/// <reference types="grecaptcha" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from "@angular/core";
import { RecaptchaLoaderService } from "./recaptcha-loader.service";
import { RecaptchaSettings } from "./recaptcha-settings";
import * as ɵngcc0 from '@angular/core';
export declare type NeverUndefined<T> = T extends undefined ? never : T;
export declare type RecaptchaErrorParameters = Parameters<NeverUndefined<ReCaptchaV2.Parameters["error-callback"]>>;
export declare class RecaptchaComponent implements AfterViewInit, OnDestroy {
    private elementRef;
    private loader;
    private zone;
    id: string;
    siteKey: string;
    theme: ReCaptchaV2.Theme;
    type: ReCaptchaV2.Type;
    size: ReCaptchaV2.Size;
    tabIndex: number;
    badge: ReCaptchaV2.Badge;
    errorMode: "handled" | "default";
    resolved: EventEmitter<string>;
    error: EventEmitter<[]>;
    /** @internal */
    private subscription;
    /** @internal */
    private widget;
    /** @internal */
    private grecaptcha;
    /** @internal */
    private executeRequested;
    constructor(elementRef: ElementRef, loader: RecaptchaLoaderService, zone: NgZone, settings?: RecaptchaSettings);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Executes the invisible recaptcha.
     * Does nothing if component's size is not set to "invisible".
     */
    execute(): void;
    reset(): void;
    /**
     * ⚠️ Warning! Use this property at your own risk!
     *
     * While this member is `public`, it is not a part of the component's public API.
     * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.
     * You are **strongly advised** against using this property.
     * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å
     */
    get __unsafe_widgetValue(): string | null;
    /** @internal */
    private expired;
    /** @internal */
    private errored;
    /** @internal */
    private captchaResponseCallback;
    /** @internal */
    private grecaptchaReset;
    /** @internal */
    private renderRecaptcha;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecaptchaComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecaptchaComponent, "re-captcha", ["reCaptcha"], { "id": "id"; "errorMode": "errorMode"; "siteKey": "siteKey"; "theme": "theme"; "type": "type"; "size": "size"; "badge": "badge"; "tabIndex": "tabIndex"; }, { "resolved": "resolved"; "error": "error"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJyZWNhcHRjaGEuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJncmVjYXB0Y2hhXCIgLz5cbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUmVjYXB0Y2hhTG9hZGVyU2VydmljZSB9IGZyb20gXCIuL3JlY2FwdGNoYS1sb2FkZXIuc2VydmljZVwiO1xuaW1wb3J0IHsgUmVjYXB0Y2hhU2V0dGluZ3MgfSBmcm9tIFwiLi9yZWNhcHRjaGEtc2V0dGluZ3NcIjtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTmV2ZXJVbmRlZmluZWQ8VD4gPSBUIGV4dGVuZHMgdW5kZWZpbmVkID8gbmV2ZXIgOiBUO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBSZWNhcHRjaGFFcnJvclBhcmFtZXRlcnMgPSBQYXJhbWV0ZXJzPE5ldmVyVW5kZWZpbmVkPFJlQ2FwdGNoYVYyLlBhcmFtZXRlcnNbXCJlcnJvci1jYWxsYmFja1wiXT4+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVjYXB0Y2hhQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBsb2FkZXI7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgc2l0ZUtleTogc3RyaW5nO1xuICAgIHRoZW1lOiBSZUNhcHRjaGFWMi5UaGVtZTtcbiAgICB0eXBlOiBSZUNhcHRjaGFWMi5UeXBlO1xuICAgIHNpemU6IFJlQ2FwdGNoYVYyLlNpemU7XG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICBiYWRnZTogUmVDYXB0Y2hhVjIuQmFkZ2U7XG4gICAgZXJyb3JNb2RlOiBcImhhbmRsZWRcIiB8IFwiZGVmYXVsdFwiO1xuICAgIHJlc29sdmVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPFtdPjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgd2lkZ2V0O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIGdyZWNhcHRjaGE7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZXhlY3V0ZVJlcXVlc3RlZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBsb2FkZXI6IFJlY2FwdGNoYUxvYWRlclNlcnZpY2UsIHpvbmU6IE5nWm9uZSwgc2V0dGluZ3M/OiBSZWNhcHRjaGFTZXR0aW5ncyk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgaW52aXNpYmxlIHJlY2FwdGNoYS5cbiAgICAgKiBEb2VzIG5vdGhpbmcgaWYgY29tcG9uZW50J3Mgc2l6ZSBpcyBub3Qgc2V0IHRvIFwiaW52aXNpYmxlXCIuXG4gICAgICovXG4gICAgZXhlY3V0ZSgpOiB2b2lkO1xuICAgIHJlc2V0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICog4pqg77iPIFdhcm5pbmchIFVzZSB0aGlzIHByb3BlcnR5IGF0IHlvdXIgb3duIHJpc2shXG4gICAgICpcbiAgICAgKiBXaGlsZSB0aGlzIG1lbWJlciBpcyBgcHVibGljYCwgaXQgaXMgbm90IGEgcGFydCBvZiB0aGUgY29tcG9uZW50J3MgcHVibGljIEFQSS5cbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbmluZyBndWFyYW50ZWVzIF93aWxsIG5vdCBiZSBob25vcmVkXyEgVGh1cywgeW91IG1pZ2h0IGZpbmQgdGhhdCB0aGlzIHByb3BlcnR5IGJlaGF2aW9yIGNoYW5nZXMgaW4gaW5jb21wYXRpYmxlIHdheXMgaW4gbWlub3Igb3IgZXZlbiBwYXRjaCByZWxlYXNlcy5cbiAgICAgKiBZb3UgYXJlICoqc3Ryb25nbHkgYWR2aXNlZCoqIGFnYWluc3QgdXNpbmcgdGhpcyBwcm9wZXJ0eS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgbW9yZSBpZGlvbWF0aWMgd2F5cyB0byBnZXQgcmVDQVBUQ0hBIHZhbHVlLCBzdWNoIGFzIGByZXNvbHZlZGAgRXZlbnRFbWl0dGVyLCBvciBmb3JtLWJvdW5kIG1ldGhvZHMgKG5nTW9kZWwsIGZvcm1Db250cm9sLCBhbmQgdGhlIGxpa2VzKS7DpVxuICAgICAqL1xuICAgIGdldCBfX3Vuc2FmZV93aWRnZXRWYWx1ZSgpOiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIGV4cGlyZWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZXJyb3JlZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBjYXB0Y2hhUmVzcG9uc2VDYWxsYmFjaztcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBncmVjYXB0Y2hhUmVzZXQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVuZGVyUmVjYXB0Y2hhO1xufVxuIl19