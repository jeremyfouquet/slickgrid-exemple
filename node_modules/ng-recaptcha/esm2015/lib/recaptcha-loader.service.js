import { isPlatformBrowser } from "@angular/common";
import { Inject, Injectable, Optional, PLATFORM_ID } from "@angular/core";
import { BehaviorSubject, of } from "rxjs";
import { loader } from "./load-script";
import { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_V3_SITE_KEY, } from "./tokens";
import * as ɵngcc0 from '@angular/core';
export class RecaptchaLoaderService {
    constructor(
    // eslint-disable-next-line @typescript-eslint/ban-types
    platformId, language, baseUrl, nonce, v3SiteKey) {
        this.platformId = platformId;
        this.language = language;
        this.baseUrl = baseUrl;
        this.nonce = nonce;
        this.v3SiteKey = v3SiteKey;
        this.init();
        this.ready = isPlatformBrowser(this.platformId)
            ? RecaptchaLoaderService.ready.asObservable()
            : of();
    }
    /** @internal */
    init() {
        if (RecaptchaLoaderService.ready) {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            const subject = new BehaviorSubject(null);
            RecaptchaLoaderService.ready = subject;
            const langParam = this.language ? "&hl=" + this.language : "";
            const renderMode = this.v3SiteKey || "explicit";
            loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);
        }
    }
}
RecaptchaLoaderService.ɵfac = function RecaptchaLoaderService_Factory(t) { return new (t || RecaptchaLoaderService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8)); };
RecaptchaLoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RecaptchaLoaderService, factory: RecaptchaLoaderService.ɵfac });
/**
 * @internal
 * @nocollapse
 */
RecaptchaLoaderService.ready = null;
RecaptchaLoaderService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_LANGUAGE,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_BASE_URL,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_NONCE,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_V3_SITE_KEY,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RecaptchaLoaderService, [{
        type: Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RECAPTCHA_LANGUAGE]
            }] }, { type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RECAPTCHA_BASE_URL]
            }] }, { type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RECAPTCHA_NONCE]
            }] }, { type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RECAPTCHA_V3_SITE_KEY]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1yZWNhcHRjaGEvc3JjL2xpYi9yZWNhcHRjaGEtbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixxQkFBcUIsR0FDdEIsTUFBTSxVQUFVLENBQUM7O0FBR2xCLE1BQU0sT0FBTyxzQkFBc0I7QUFDbkMsSUFpQkU7QUFDRixJQUFJLHdEQUF3RDtBQUM1RCxJQUEwQyxVQUFrQixFQUNoQixRQUFpQixFQUNqQixPQUFnQixFQUNuQixLQUFjLEVBQ1IsU0FBa0I7QUFDOUQsUUFMdUMsZUFBVSxHQUFWLFVBQVUsQ0FBUTtBQUFDLFFBTXpELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzdCLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDM0IsUUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUN2QixRQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQy9CLFFBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2hCLFFBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ25ELFlBQU0sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUU7QUFDbkQsWUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDYixJQUFFLENBQUM7QUFDSCxJQUNFLGdCQUFnQjtBQUNsQixJQUFVLElBQUk7QUFDZCxRQUFJLElBQUksc0JBQXNCLENBQUMsS0FBSyxFQUFFO0FBQ3RDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzVDLFlBQU0sTUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQXdCLElBQUksQ0FBQyxDQUFDO0FBQ3ZFLFlBQU0sc0JBQXNCLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUM3QyxZQUFNLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDcEUsWUFDTSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLFVBQVUsQ0FBQztBQUN0RCxZQUFNLE1BQU0sQ0FBQyxVQUFVLENBQ2YsVUFBVSxFQUNWLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUN4QyxTQUFTLEVBQ1QsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7QUFDUixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7O2tJQUFDO0FBdkRDO0FBQ0Y7QUFBYTtBQUNBLEdBQ1I7QUFDWSw0QkFBSyxHQUEyQyxJQUFJLENBQUMsQUFMcEU7QUFBQztFQURGLFVBQVUsWkFHSixZQWtCK0MsTUFBTSx1QkFBdkQsTUFBTSxTQUFDLFdBQVc7QUFBUyx5Q0FDM0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0I7QUFBUyx5Q0FDOUMsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0I7QUFBUyx5Q0FDOUMsUUFBUSxZQUFJLE1BQU0sU0FBQyxlQUFlO0FBQVMseUNBQzNDLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCO0FBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tIFwicnhqc1wiO1xuXG5pbXBvcnQgeyBsb2FkZXIgfSBmcm9tIFwiLi9sb2FkLXNjcmlwdFwiO1xuaW1wb3J0IHtcbiAgUkVDQVBUQ0hBX0JBU0VfVVJMLFxuICBSRUNBUFRDSEFfTEFOR1VBR0UsXG4gIFJFQ0FQVENIQV9OT05DRSxcbiAgUkVDQVBUQ0hBX1YzX1NJVEVfS0VZLFxufSBmcm9tIFwiLi90b2tlbnNcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlY2FwdGNoYUxvYWRlclNlcnZpY2Uge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkeTogQmVoYXZpb3JTdWJqZWN0PFJlQ2FwdGNoYVYyLlJlQ2FwdGNoYT4gPSBudWxsO1xuXG4gIHB1YmxpYyByZWFkeTogT2JzZXJ2YWJsZTxSZUNhcHRjaGFWMi5SZUNhcHRjaGE+O1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgbm9uY2U6IHN0cmluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIHYzU2l0ZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSByZWFkb25seSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChSRUNBUFRDSEFfTEFOR1VBR0UpIGxhbmd1YWdlPzogc3RyaW5nLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUkVDQVBUQ0hBX0JBU0VfVVJMKSBiYXNlVXJsPzogc3RyaW5nLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUkVDQVBUQ0hBX05PTkNFKSBub25jZT86IHN0cmluZyxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFJFQ0FQVENIQV9WM19TSVRFX0tFWSkgdjNTaXRlS2V5Pzogc3RyaW5nXG4gICkge1xuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgICB0aGlzLnYzU2l0ZUtleSA9IHYzU2l0ZUtleTtcbiAgICB0aGlzLmluaXQoKTtcbiAgICB0aGlzLnJlYWR5ID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKVxuICAgICAgPyBSZWNhcHRjaGFMb2FkZXJTZXJ2aWNlLnJlYWR5LmFzT2JzZXJ2YWJsZSgpXG4gICAgICA6IG9mKCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgaW5pdCgpIHtcbiAgICBpZiAoUmVjYXB0Y2hhTG9hZGVyU2VydmljZS5yZWFkeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgY29uc3Qgc3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVDYXB0Y2hhVjIuUmVDYXB0Y2hhPihudWxsKTtcbiAgICAgIFJlY2FwdGNoYUxvYWRlclNlcnZpY2UucmVhZHkgPSBzdWJqZWN0O1xuICAgICAgY29uc3QgbGFuZ1BhcmFtID0gdGhpcy5sYW5ndWFnZSA/IFwiJmhsPVwiICsgdGhpcy5sYW5ndWFnZSA6IFwiXCI7XG5cbiAgICAgIGNvbnN0IHJlbmRlck1vZGUgPSB0aGlzLnYzU2l0ZUtleSB8fCBcImV4cGxpY2l0XCI7XG4gICAgICBsb2FkZXIubG9hZFNjcmlwdChcbiAgICAgICAgcmVuZGVyTW9kZSxcbiAgICAgICAgKGdyZWNhcHRjaGEpID0+IHN1YmplY3QubmV4dChncmVjYXB0Y2hhKSxcbiAgICAgICAgbGFuZ1BhcmFtLFxuICAgICAgICB0aGlzLmJhc2VVcmwsXG4gICAgICAgIHRoaXMubm9uY2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=