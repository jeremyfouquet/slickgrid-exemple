import * as tslib_1 from "tslib";
import { Optional } from '@angular/core';
import * as DOMPurify from 'dompurify';
var SlickEmptyWarningComponent = /** @class */ (function () {
    function SlickEmptyWarningComponent(translate) {
        this.translate = translate;
    }
    Object.defineProperty(SlickEmptyWarningComponent.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlickEmptyWarningComponent.prototype, "grid", {
        set: function (slickGrid) {
            this._grid = slickGrid;
        },
        enumerable: true,
        configurable: true
    });
    SlickEmptyWarningComponent.prototype.dispose = function () {
        if (this._warningLeftElement && this._warningLeftElement.remove) {
            this._warningLeftElement.remove();
        }
        if (this._warningRightElement && this._warningRightElement.remove) {
            this._warningRightElement.remove();
        }
        this._warningLeftElement = null;
        this._warningRightElement = null;
    };
    /**
     * Display a warning of empty data when the filtered dataset is empty
     * NOTE: to make this code reusable, you could (should) move this code into a utility service
     * @param isShowing - are we showing the message?
     * @param options - any styling options you'd like to pass like the text color
     */
    SlickEmptyWarningComponent.prototype.showEmptyDataMessage = function (isShowing, options) {
        if (isShowing === void 0) { isShowing = true; }
        if (!this._grid || !this.gridOptions) {
            return false;
        }
        var gridUid = this._grid && this._grid.getUID();
        var defaultMessage = 'No data to display.';
        var mergedOptions = tslib_1.__assign({ message: defaultMessage }, this.gridOptions.emptyDataWarning, options);
        var emptyDataClassName = mergedOptions && mergedOptions.className || 'slick-empty-data-warning';
        this._warningLeftElement = document.querySelector("." + gridUid + " ." + emptyDataClassName);
        var gridCanvasLeftElm = document.querySelector("." + gridUid + " .grid-canvas.grid-canvas-left");
        var gridCanvasRightElm = document.querySelector("." + gridUid + " .grid-canvas.grid-canvas-right");
        var leftElementMarginLeft = mergedOptions.leftViewportMarginLeft || 0;
        var rightElementMarginLeft = mergedOptions.rightViewportMarginLeft || 0;
        var leftElementFrozenMarginLeft = mergedOptions.frozenLeftViewportMarginLeft || 0;
        var rightElementFrozenMarginLeft = mergedOptions.frozenRightViewportMarginLeft || 0;
        var isFrozenGrid = (this.gridOptions.frozenColumn !== undefined && this.gridOptions.frozenColumn >= 0);
        var leftViewportMarginLeft = typeof leftElementMarginLeft === 'string' ? leftElementMarginLeft : leftElementMarginLeft + "px";
        var rightViewportMarginLeft = typeof rightElementMarginLeft === 'string' ? rightElementMarginLeft : rightElementMarginLeft + "px";
        if (!this._warningLeftElement && !isShowing) {
            return false;
        }
        // warning message could come from a translation key or by the warning options
        var warningMessage = mergedOptions.message;
        if (this.gridOptions.enableTranslate && this.translate && this.translate.instant && mergedOptions && mergedOptions.messageKey) {
            warningMessage = this.translate.instant(mergedOptions.messageKey);
        }
        if (!this._warningLeftElement && gridCanvasLeftElm && gridCanvasRightElm) {
            var sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};
            // sanitize any unauthorized html tags like script and others
            // for the remaining allowed tags we'll permit all attributes
            var sanitizedText = (DOMPurify.sanitize(warningMessage, sanitizedOptions) || '').toString();
            this._warningLeftElement = document.createElement('div');
            this._warningLeftElement.classList.add(emptyDataClassName);
            this._warningLeftElement.classList.add('left');
            this._warningLeftElement.innerHTML = sanitizedText;
            // clone the warning element and add the "right" class to it so we can distinguish
            this._warningRightElement = this._warningLeftElement.cloneNode(true);
            this._warningRightElement.classList.add('right');
            // append both warning elements to both left/right canvas
            gridCanvasRightElm.appendChild(this._warningRightElement);
            gridCanvasLeftElm.appendChild(this._warningLeftElement);
        }
        // if we did find the Slick-Empty-Warning element then we'll display/hide at the grid position with some margin offsets (we need to position under the headerRow and filterRow)
        // when using a frozen/pinned grid, we also have extra options to hide left/right message
        if (this._warningLeftElement) {
            // display/hide right/left messages
            var leftDisplay = isShowing ? 'block' : 'none';
            if (isFrozenGrid && isShowing) {
                leftDisplay = (mergedOptions.hideFrozenLeftWarning) ? 'none' : 'block';
            }
            this._warningLeftElement.style.display = leftDisplay;
            // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)
            var leftFrozenMarginLeft = typeof leftElementFrozenMarginLeft === 'string' ? leftElementFrozenMarginLeft : leftElementFrozenMarginLeft + "px";
            this._warningLeftElement.style.marginLeft = isFrozenGrid ? leftFrozenMarginLeft : leftViewportMarginLeft;
        }
        if (this._warningRightElement) {
            // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)
            var rightDisplay = isShowing ? 'block' : 'none';
            if (isFrozenGrid && isShowing) {
                rightDisplay = (mergedOptions.hideFrozenRightWarning) ? 'none' : 'block';
            }
            this._warningRightElement.style.display = rightDisplay;
            // use correct left margin (defaults to 40% on regular grid or 10px on frozen grid)
            var rightFrozenMarginLeft = typeof rightElementFrozenMarginLeft === 'string' ? rightElementFrozenMarginLeft : rightElementFrozenMarginLeft + "px";
            this._warningRightElement.style.marginLeft = isFrozenGrid ? rightFrozenMarginLeft : rightViewportMarginLeft;
        }
        return isShowing;
    };
    SlickEmptyWarningComponent = tslib_1.__decorate([
        tslib_1.__param(0, Optional())
    ], SlickEmptyWarningComponent);
    return SlickEmptyWarningComponent;
}());
export { SlickEmptyWarningComponent };
//# sourceMappingURL=data:application/json;base64,