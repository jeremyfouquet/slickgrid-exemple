import * as tslib_1 from "tslib";
// import 3rd party vendor libs
// only import the necessary core lib, each will be imported on demand when enabled (via require)
import 'jquery-ui-dist/jquery-ui';
import 'slickgrid/lib/jquery.event.drag-2.3.0';
import 'slickgrid/lib/jquery.mousewheel';
import 'slickgrid/slick.core';
import 'slickgrid/slick.grid';
import 'slickgrid/slick.dataview';
// ...then everything else...
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Output, OnDestroy, OnInit, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { isObservable, Observable } from 'rxjs';
import { Constants } from '../constants';
import { GlobalGridOptions } from './../global-grid-options';
import { convertParentChildArrayToHierarchicalView, titleCase, unsubscribeAllObservables } from './../services/utilities';
import { executeBackendProcessesCallback, onBackendError, refreshBackendDataset } from '../services/backend-utilities';
import { ExtensionName, GridStateType, } from './../models/index';
import { FilterFactory } from '../filters/filterFactory';
import { SlickgridConfig } from '../slickgrid-config';
import { SlickEmptyWarningComponent } from './slick-empty-warning.component';
// Services
import { AngularUtilService } from '../services/angularUtil.service';
import { ExcelExportService } from '../services/excelExport.service';
import { ExportService } from './../services/export.service';
import { ExtensionService } from '../services/extension.service';
import { ExtensionUtility } from '../extensions/extensionUtility';
import { FilterService } from './../services/filter.service';
import { GraphqlService } from './../services/graphql.service';
import { GridEventService } from './../services/gridEvent.service';
import { GridService } from './../services/grid.service';
import { GridStateService } from './../services/gridState.service';
import { GroupingAndColspanService } from './../services/groupingAndColspan.service';
import { PaginationService } from '../services/pagination.service';
import { ResizerService } from './../services/resizer.service';
import { SharedService } from '../services/shared.service';
import { SortService } from './../services/sort.service';
import { TreeDataService } from './../services/treeData.service';
// Extensions (SlickGrid Controls & Plugins)
import { AutoTooltipExtension } from '../extensions/autoTooltipExtension';
import { CellExternalCopyManagerExtension } from '../extensions/cellExternalCopyManagerExtension';
import { CellMenuExtension } from '../extensions/cellMenuExtension';
import { CheckboxSelectorExtension } from '../extensions/checkboxSelectorExtension';
import { ColumnPickerExtension } from '../extensions/columnPickerExtension';
import { ContextMenuExtension } from '../extensions/contextMenuExtension';
import { DraggableGroupingExtension } from '../extensions/draggableGroupingExtension';
import { GridMenuExtension } from '../extensions/gridMenuExtension';
import { GroupItemMetaProviderExtension } from '../extensions/groupItemMetaProviderExtension';
import { HeaderButtonExtension } from '../extensions/headerButtonExtension';
import { HeaderMenuExtension } from '../extensions/headerMenuExtension';
import { RowDetailViewExtension } from '../extensions/rowDetailViewExtension';
import { RowMoveManagerExtension } from '../extensions/rowMoveManagerExtension';
import { RowSelectionExtension } from '../extensions/rowSelectionExtension';
var slickgridEventPrefix = 'sg';
var AngularSlickgridComponent = /** @class */ (function () {
    function AngularSlickgridComponent(cd, elm, excelExportService, exportService, extensionService, extensionUtility, filterService, gridEventService, gridService, gridStateService, groupingAndColspanService, paginationService, resizer, sharedService, sortService, treeDataService, translate, forRootConfig) {
        this.cd = cd;
        this.elm = elm;
        this.excelExportService = excelExportService;
        this.exportService = exportService;
        this.extensionService = extensionService;
        this.extensionUtility = extensionUtility;
        this.filterService = filterService;
        this.gridEventService = gridEventService;
        this.gridService = gridService;
        this.gridStateService = gridStateService;
        this.groupingAndColspanService = groupingAndColspanService;
        this.paginationService = paginationService;
        this.resizer = resizer;
        this.sharedService = sharedService;
        this.sortService = sortService;
        this.treeDataService = treeDataService;
        this.translate = translate;
        this.forRootConfig = forRootConfig;
        this._eventHandler = new Slick.EventHandler();
        this._hideHeaderRowAfterPageLoad = false;
        this._isGridInitialized = false;
        this._isDatasetInitialized = false;
        this._isPaginationInitialized = false;
        this._isLocalGrid = true;
        this.groupingDefinition = {};
        this.showCustomFooter = false;
        this.showPagination = false;
        this.totalItems = 0;
        this.subscriptions = [];
        this.onAngularGridCreated = new EventEmitter();
        this.onDataviewCreated = new EventEmitter();
        this.onGridCreated = new EventEmitter();
        this.onGridInitialized = new EventEmitter();
        this.onBeforeGridCreate = new EventEmitter();
        this.onBeforeGridDestroy = new EventEmitter();
        this.onAfterGridDestroyed = new EventEmitter();
        this.onGridStateChanged = new EventEmitter();
        this.onGridBeforeExportToFile = this.exportService.onGridBeforeExportToFile;
        this.onGridAfterExportToFile = this.exportService.onGridAfterExportToFile;
        this.onGridBeforeExportToExcel = this.excelExportService.onGridBeforeExportToExcel;
        this.onGridAfterExportToExcel = this.excelExportService.onGridAfterExportToExcel;
        this.slickEmptyWarning = new SlickEmptyWarningComponent(this.translate);
    }
    Object.defineProperty(AngularSlickgridComponent.prototype, "paginationOptions", {
        get: function () {
            return this._paginationOptions;
        },
        set: function (options) {
            if (options && this._paginationOptions) {
                this._paginationOptions = tslib_1.__assign({}, this._paginationOptions, options);
            }
            else {
                this._paginationOptions = options;
            }
            this.gridOptions.pagination = this._paginationOptions;
            this.paginationService.updateTotalItems(options && options.totalItems || 0, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "gridHeight", {
        set: function (height) {
            this._fixedHeight = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "gridWidth", {
        set: function (width) {
            this._fixedWidth = width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "columnDefinitions", {
        get: function () {
            return this._columnDefinitions;
        },
        set: function (columnDefinitions) {
            this._columnDefinitions = columnDefinitions;
            if (this._isGridInitialized) {
                this.updateColumnDefinitionsList(columnDefinitions);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "dataset", {
        get: function () {
            return this.dataView.getItems();
        },
        set: function (dataset) {
            this._dataset = dataset;
            this.refreshGridData(dataset);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "datasetHierarchical", {
        get: function () {
            return this.sharedService.hierarchicalDataset;
        },
        set: function (newHierarchicalDataset) {
            var _this = this;
            this.sharedService.hierarchicalDataset = newHierarchicalDataset;
            if (newHierarchicalDataset && this.columnDefinitions && this.filterService && this.filterService.clearFilters) {
                this.filterService.clearFilters();
            }
            // when a hierarchical dataset is set afterward, we can reset the flat dataset and call a tree data sort that will overwrite the flat dataset
            setTimeout(function () {
                if (newHierarchicalDataset && _this.dataView && _this.sortService && _this.sortService.processTreeDataInitialSort && _this.gridOptions && _this.gridOptions.enableTreeData) {
                    _this.dataView.setItems([], _this.gridOptions.datasetIdPropertyName);
                    _this.sortService.processTreeDataInitialSort();
                }
            }, 1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularSlickgridComponent.prototype, "elementRef", {
        get: function () {
            return this.elm;
        },
        enumerable: true,
        configurable: true
    });
    AngularSlickgridComponent.prototype.ngAfterViewInit = function () {
        this.initialization();
        this._isGridInitialized = true;
        // user must provide a "gridHeight" or use "autoResize: true" in the grid options
        if (!this._fixedHeight && !this.gridOptions.enableAutoResize) {
            throw new Error("[Angular-Slickgrid] requires a \"grid-height\" or the \"enableAutoResize\" grid option to be enabled.\n        Without that the grid will seem empty while in fact it just does not have any height define.");
        }
    };
    AngularSlickgridComponent.prototype.ngOnInit = function () {
        this.onBeforeGridCreate.emit(true);
        if (this.gridOptions && !this.gridOptions.enableAutoResize && (this._fixedHeight || this._fixedWidth)) {
            this.gridHeightString = this._fixedHeight + "px";
            this.gridWidthString = this._fixedWidth + "px";
        }
    };
    AngularSlickgridComponent.prototype.ngOnDestroy = function () {
        this.onBeforeGridDestroy.emit(this.grid);
        this.destroy();
        this.onAfterGridDestroyed.emit(true);
    };
    AngularSlickgridComponent.prototype.destroy = function (shouldEmptyDomElementContainer) {
        var e_1, _a, e_2, _b, e_3, _c;
        if (shouldEmptyDomElementContainer === void 0) { shouldEmptyDomElementContainer = false; }
        this.extensionService.dispose();
        this.filterService.dispose();
        this.gridEventService.dispose();
        this.gridStateService.dispose();
        this.gridService.dispose();
        this.groupingAndColspanService.dispose();
        this.paginationService.dispose();
        this.resizer.dispose();
        this.sortService.dispose();
        this.treeDataService.dispose();
        // dispose the Components
        this.slickEmptyWarning.dispose();
        if (this._eventHandler && this._eventHandler.unsubscribeAll) {
            this._eventHandler.unsubscribeAll();
        }
        if (this.dataView) {
            if (this.dataView && this.dataView.setItems) {
                this.dataView.setItems([]);
            }
            if (this.dataView.destroy) {
                this.dataView.destroy();
            }
        }
        if (this.grid && this.grid.destroy) {
            this.grid.destroy(shouldEmptyDomElementContainer);
        }
        if (this.backendServiceApi) {
            try {
                for (var _d = tslib_1.__values(Object.keys(this.backendServiceApi)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var prop = _e.value;
                    this.backendServiceApi[prop] = null;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.backendServiceApi = null;
        }
        try {
            for (var _f = tslib_1.__values(Object.keys(this.columnDefinitions)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var prop = _g.value;
                this.columnDefinitions[prop] = null;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _h = tslib_1.__values(Object.keys(this.sharedService)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var prop = _j.value;
                this.sharedService[prop] = null;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // we could optionally also empty the content of the grid container DOM element
        if (shouldEmptyDomElementContainer) {
            this.emptyGridContainerElm();
        }
        // also unsubscribe all RxJS subscriptions
        this.subscriptions = unsubscribeAllObservables(this.subscriptions);
        this._dataset = null;
        this.datasetHierarchical = null;
        this._columnDefinitions = [];
        this._angularGridInstances = null;
        this.grid = null;
        this.gridOptions = null;
        this.dataView = null;
    };
    AngularSlickgridComponent.prototype.emptyGridContainerElm = function () {
        var gridContainerId = this.gridOptions && this.gridOptions.gridContainerId || 'grid1';
        $(gridContainerId).empty();
    };
    /** Dispatch of Custom Event, which by default will bubble & is cancelable */
    AngularSlickgridComponent.prototype.dispatchCustomEvent = function (eventName, data, isBubbling, isCancelable) {
        if (isBubbling === void 0) { isBubbling = true; }
        if (isCancelable === void 0) { isCancelable = true; }
        var eventInit = { bubbles: isBubbling, cancelable: isCancelable };
        if (data) {
            eventInit.detail = data;
        }
        return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));
    };
    /**
     * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call
     * For now, this is GraphQL Service ONLY feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time
     */
    AngularSlickgridComponent.prototype.createBackendApiInternalPostProcessCallback = function (gridOptions) {
        var _this = this;
        var backendApi = gridOptions && gridOptions.backendServiceApi;
        if (backendApi && backendApi.service) {
            // internalPostProcess only works (for now) with a GraphQL Service, so make sure it is of that type
            if (backendApi.service instanceof GraphqlService || typeof backendApi.service.getDatasetName === 'function') {
                backendApi.internalPostProcess = function (processResult) {
                    var datasetName = (backendApi && backendApi.service && typeof backendApi.service.getDatasetName === 'function') ? backendApi.service.getDatasetName() : '';
                    if (processResult && processResult.data && processResult.data[datasetName]) {
                        var data = processResult.data[datasetName].hasOwnProperty('nodes') ? processResult.data[datasetName].nodes : processResult.data[datasetName];
                        var totalCount = processResult.data[datasetName].hasOwnProperty('totalCount') ? processResult.data[datasetName].totalCount : processResult.data[datasetName].length;
                        _this.refreshGridData(data, totalCount || 0);
                    }
                };
            }
        }
    };
    /**
     * On a Pagination changed, we will trigger a Grid State changed with the new pagination info
     * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection
     */
    AngularSlickgridComponent.prototype.paginationChanged = function (pagination) {
        var isSyncGridSelectionEnabled = this.gridStateService && this.gridStateService.needToPreserveRowSelection() || false;
        if (!isSyncGridSelectionEnabled && (this.gridOptions.enableRowSelection || this.gridOptions.enableCheckboxSelector)) {
            this.gridService.setSelectedRows([]);
        }
        var pageNumber = pagination.pageNumber, pageSize = pagination.pageSize;
        if (this.sharedService) {
            if (pageSize) {
                this.sharedService.currentPagination = { pageNumber: pageNumber, pageSize: pageSize };
            }
        }
        this.gridStateService.onGridStateChanged.next({
            change: { newValues: { pageNumber: pageNumber, pageSize: pageSize }, type: GridStateType.pagination },
            gridState: this.gridStateService.getCurrentGridState()
        });
    };
    /**
     * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well
     * @param dataset
     */
    AngularSlickgridComponent.prototype.refreshGridData = function (dataset, totalCount) {
        if (this.gridOptions && this.gridOptions.enableEmptyDataWarningMessage && Array.isArray(dataset)) {
            var finalTotalCount = totalCount || dataset.length;
            this.displayEmptyDataWarning(finalTotalCount < 1);
        }
        if (Array.isArray(dataset) && this.grid && this.dataView && typeof this.dataView.setItems === 'function') {
            this.dataView.setItems(dataset, this.gridOptions.datasetIdPropertyName);
            if (!this.gridOptions.backendServiceApi) {
                this.dataView.reSort();
            }
            if (dataset.length > 0) {
                if (!this._isDatasetInitialized) {
                    this.loadPresetsWhenDatasetInitialized();
                    if (this.gridOptions.enableCheckboxSelector) {
                        this.loadRowSelectionPresetWhenExists();
                    }
                }
                this._isDatasetInitialized = true;
                // also update the hierarchical dataset
                if (dataset.length > 0 && this.gridOptions.treeDataOptions) {
                    this.sharedService.hierarchicalDataset = this.treeDataSortComparer(dataset);
                }
            }
            if (dataset) {
                this.grid.invalidate();
            }
            // display the Pagination component only after calling this refresh data first, we call it here so that if we preset pagination page number it will be shown correctly
            this.showPagination = (this.gridOptions && (this.gridOptions.enablePagination || (this.gridOptions.backendServiceApi && this.gridOptions.enablePagination === undefined))) ? true : false;
            if (this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.pagination) {
                var paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions);
                // when we have a totalCount use it, else we'll take it from the pagination object
                // only update the total items if it's different to avoid refreshing the UI
                var totalRecords = totalCount !== undefined ? totalCount : (this.gridOptions && this.gridOptions.pagination && this.gridOptions.pagination.totalItems);
                if (totalRecords !== this.totalItems) {
                    this.totalItems = totalRecords;
                }
                // initialize the Pagination Service with new pagination options (which might have presets)
                if (!this._isPaginationInitialized) {
                    this.initializePaginationService(paginationOptions);
                }
                else {
                    // update the pagination service with the new total
                    this.paginationService.totalItems = this.totalItems;
                }
            }
            // resize the grid inside a slight timeout, in case other DOM element changed prior to the resize (like a filter/pagination changed)
            if (this.grid && this.gridOptions.enableAutoResize) {
                var delay = this.gridOptions.autoResize && this.gridOptions.autoResize.delay;
                this.resizer.resizeGrid(delay || 10);
            }
        }
    };
    /**
     * Check if there's any Pagination Presets defined in the Grid Options,
     * if there are then load them in the paginationOptions object
     */
    AngularSlickgridComponent.prototype.setPaginationOptionsWhenPresetDefined = function (gridOptions, paginationOptions) {
        if (gridOptions.presets && gridOptions.presets.pagination && gridOptions.pagination) {
            paginationOptions.pageSize = gridOptions.presets.pagination.pageSize;
            paginationOptions.pageNumber = gridOptions.presets.pagination.pageNumber;
        }
        return paginationOptions;
    };
    /**
     * Dynamically change or update the column definitions list.
     * We will re-render the grid so that the new header and data shows up correctly.
     * If using i18n, we also need to trigger a re-translate of the column headers
     */
    AngularSlickgridComponent.prototype.updateColumnDefinitionsList = function (newColumnDefinitions) {
        // map/swap the internal library Editor to the SlickGrid Editor factory
        newColumnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(newColumnDefinitions);
        if (this.gridOptions.enableTranslate) {
            this.extensionService.translateColumnHeaders(false, newColumnDefinitions);
        }
        else {
            this.extensionService.renderColumnHeaders(newColumnDefinitions, true);
        }
        if (this.gridOptions && this.gridOptions.enableAutoSizeColumns) {
            this.grid.autosizeColumns();
        }
    };
    /**
     * Show the filter row displayed on first row, we can optionally pass false to hide it.
     * @param showing
     */
    AngularSlickgridComponent.prototype.showHeaderRow = function (showing) {
        if (showing === void 0) { showing = true; }
        this.grid.setHeaderRowVisibility(showing, false);
        if (showing === true && this._isGridInitialized) {
            this.grid.setColumns(this.columnDefinitions);
        }
        return showing;
    };
    //
    // private functions
    // ------------------
    AngularSlickgridComponent.prototype.displayEmptyDataWarning = function (showWarning) {
        if (showWarning === void 0) { showWarning = true; }
        this.slickEmptyWarning.grid = this.grid;
        this.slickEmptyWarning && this.slickEmptyWarning.showEmptyDataMessage(showWarning);
    };
    AngularSlickgridComponent.prototype.bindDifferentHooks = function (grid, gridOptions, dataView) {
        var _this = this;
        // on locale change, we have to manually translate the Headers, GridMenu
        if (this.translate && this.translate.onLangChange) {
            // translate some of them on first load, then on each language change
            if (gridOptions.enableTranslate) {
                this.translateColumnHeaderTitleKeys();
                this.translateColumnGroupKeys();
                this.translateCustomFooterTexts();
            }
            this.subscriptions.push(this.translate.onLangChange.subscribe(function () {
                if (gridOptions.enableTranslate) {
                    _this.extensionService.translateCellMenu();
                    _this.extensionService.translateColumnHeaders();
                    _this.extensionService.translateColumnPicker();
                    _this.extensionService.translateContextMenu();
                    _this.extensionService.translateGridMenu();
                    _this.extensionService.translateHeaderMenu();
                    _this.translateCustomFooterTexts();
                    _this.translateColumnHeaderTitleKeys();
                    _this.translateColumnGroupKeys();
                    if (gridOptions.createPreHeaderPanel && !gridOptions.enableDraggableGrouping) {
                        _this.groupingAndColspanService.translateGroupingAndColSpan();
                    }
                }
            }));
        }
        if (!this.customDataView) {
            // bind external sorting (backend) when available or default onSort (dataView)
            if (gridOptions.enableSorting) {
                // bind external sorting (backend) unless specified to use the local one
                if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalSorting) {
                    this.sortService.bindBackendOnSort(grid);
                }
                else {
                    this.sortService.bindLocalOnSort(grid);
                }
            }
            // bind external filter (backend) when available or default onFilter (dataView)
            if (gridOptions.enableFiltering) {
                this.filterService.init(grid);
                // bind external filter (backend) unless specified to use the local one
                if (gridOptions.backendServiceApi && !gridOptions.backendServiceApi.useLocalFiltering) {
                    this.filterService.bindBackendOnFilter(grid);
                }
                else {
                    this.filterService.bindLocalOnFilter(grid);
                }
            }
            // load any presets if any (after dataset is initialized)
            this.loadPresetsWhenDatasetInitialized();
        }
        // if user set an onInit Backend, we'll run it right away (and if so, we also need to run preProcess, internalPostProcess & postProcess)
        if (gridOptions.backendServiceApi) {
            var backendApi = gridOptions.backendServiceApi;
            if (backendApi && backendApi.service && backendApi.service.init) {
                backendApi.service.init(backendApi.options, gridOptions.pagination, this.grid);
            }
        }
        var _loop_1 = function (prop) {
            if (grid.hasOwnProperty(prop) && prop.startsWith('on')) {
                this_1._eventHandler.subscribe(grid[prop], function (event, args) {
                    return _this.dispatchCustomEvent("" + slickgridEventPrefix + titleCase(prop), { eventData: event, args: args });
                });
            }
        };
        var this_1 = this;
        // expose all Slick Grid Events through dispatch
        for (var prop in grid) {
            _loop_1(prop);
        }
        var _loop_2 = function (prop) {
            if (dataView.hasOwnProperty(prop) && prop.startsWith('on')) {
                this_2._eventHandler.subscribe(dataView[prop], function (event, args) {
                    return _this.dispatchCustomEvent("" + slickgridEventPrefix + titleCase(prop), { eventData: event, args: args });
                });
            }
        };
        var this_2 = this;
        // expose all Slick DataView Events through dispatch
        for (var prop in dataView) {
            _loop_2(prop);
        }
        // expose GridState Service changes event through dispatch
        this.subscriptions.push(this.gridStateService.onGridStateChanged.subscribe(function (gridStateChange) {
            _this.onGridStateChanged.emit(gridStateChange);
        }));
        // on cell click, mainly used with the columnDef.action callback
        this.gridEventService.bindOnCellChange(grid, dataView);
        this.gridEventService.bindOnClick(grid, dataView);
        if (dataView && grid) {
            this._eventHandler.subscribe(dataView.onRowCountChanged, function (e, args) {
                grid.invalidate();
                _this.metrics = {
                    startTime: new Date(),
                    endTime: new Date(),
                    itemCount: args && args.current || 0,
                    totalItemCount: Array.isArray(_this.dataset) ? _this.dataset.length : 0
                };
                // when using local (in-memory) dataset, we'll display a warning message when filtered data is empty
                if (_this._isLocalGrid && _this.gridOptions && _this.gridOptions.enableEmptyDataWarningMessage) {
                    _this.displayEmptyDataWarning(args.current === 0);
                }
            });
            // when dealing with Tree Data View, make sure we have necessary tree data options
            if (this.gridOptions && this.gridOptions.enableTreeData && (!this.gridOptions.treeDataOptions || !this.gridOptions.treeDataOptions.columnId)) {
                throw new Error('[Angular-Slickgrid] When enabling tree data, you must also provide the "treeDataOption" property in your Grid Options with "childrenPropName" or "parentPropName" (depending if your array is hierarchical or flat) for the Tree Data to work properly');
            }
            this._eventHandler.subscribe(dataView.onRowsChanged, function (e, args) {
                // when dealing with Tree Data, anytime the flat dataset changes, we need to update our hierarchical dataset
                // this could be triggered by a DataView setItems or updateItem
                if (_this.gridOptions && _this.gridOptions.enableTreeData) {
                    var items = _this.dataView.getItems();
                    if (Array.isArray(items) && items.length > 0 && !_this._isDatasetInitialized) {
                        _this.sharedService.hierarchicalDataset = _this.treeDataSortComparer(items);
                    }
                }
                // filtering data with local dataset will not always show correctly unless we call this updateRow/render
                // also don't use "invalidateRows" since it destroys the entire row and as bad user experience when updating a row
                // see commit: https://github.com/ghiscoding/Angular-Slickgrid/commit/bb62c0aa2314a5d61188ff005ccb564577f08805
                if (gridOptions && gridOptions.enableFiltering && !gridOptions.enableRowDetailView) {
                    if (args && args.rows && Array.isArray(args.rows)) {
                        args.rows.forEach(function (row) { return grid.updateRow(row); });
                        grid.render();
                    }
                }
            });
        }
        // does the user have a colspan callback?
        if (gridOptions && gridOptions.colspanCallback && dataView && dataView.getItem && dataView.getItemMetadata) {
            dataView.getItemMetadata = function (rowNumber) {
                var callbackResult = null;
                if (gridOptions.colspanCallback && gridOptions.colspanCallback) {
                    callbackResult = gridOptions.colspanCallback(dataView.getItem(rowNumber));
                }
                return callbackResult;
            };
        }
    };
    AngularSlickgridComponent.prototype.bindBackendCallbackFunctions = function (gridOptions) {
        var _this = this;
        var backendApi = gridOptions.backendServiceApi;
        var backendApiService = backendApi && backendApi.service;
        var serviceOptions = backendApiService && backendApiService.options || {};
        var isExecuteCommandOnInit = (!serviceOptions) ? false : ((serviceOptions && serviceOptions.hasOwnProperty('executeProcessCommandOnInit')) ? serviceOptions['executeProcessCommandOnInit'] : true);
        if (backendApiService) {
            // update backend filters (if need be) BEFORE the query runs (via the onInit command a few lines below)
            // if user entered some any "presets", we need to reflect them all in the grid
            if (gridOptions && gridOptions.presets) {
                // Filters "presets"
                if (backendApiService.updateFilters && Array.isArray(gridOptions.presets.filters) && gridOptions.presets.filters.length > 0) {
                    backendApiService.updateFilters(gridOptions.presets.filters, true);
                }
                // Sorters "presets"
                if (backendApiService.updateSorters && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {
                    backendApiService.updateSorters(undefined, gridOptions.presets.sorters);
                }
                // Pagination "presets"
                if (backendApiService.updatePagination && gridOptions.presets.pagination) {
                    var _a = gridOptions.presets.pagination, pageNumber = _a.pageNumber, pageSize = _a.pageSize;
                    backendApiService.updatePagination(pageNumber, pageSize);
                }
            }
            else {
                var columnFilters = this.filterService.getColumnFilters();
                if (columnFilters && backendApiService.updateFilters) {
                    backendApiService.updateFilters(columnFilters, false);
                }
            }
            // execute onInit command when necessary
            if (backendApi && backendApiService && (backendApi.onInit || isExecuteCommandOnInit)) {
                var query = (typeof backendApiService.buildQuery === 'function') ? backendApiService.buildQuery() : '';
                var process_1 = (isExecuteCommandOnInit) ? (backendApi.process && backendApi.process(query) || null) : (backendApi.onInit && backendApi.onInit(query) || null);
                // wrap this inside a setTimeout to avoid timing issue since the gridOptions needs to be ready before running this onInit
                setTimeout(function () {
                    // keep start time & end timestamps then return these metrics after the process execution
                    var startTime = new Date();
                    // run any pre-process, if defined, for example a spinner
                    if (backendApi.preProcess) {
                        backendApi.preProcess();
                    }
                    // the processes can be Promises or Observables (like Angular HttpClient)
                    var totalItems = _this.gridOptions && _this.gridOptions.pagination && _this.gridOptions.pagination.totalItems;
                    if (process_1 instanceof Promise && process_1.then) {
                        process_1.then(function (processResult) { return executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems); })
                            .catch(function (error) { return onBackendError(error, backendApi); });
                    }
                    else if (isObservable(process_1)) {
                        _this.subscriptions.push(process_1.subscribe(function (processResult) { return executeBackendProcessesCallback(startTime, processResult, backendApi, totalItems); }, function (error) { return onBackendError(error, backendApi); }));
                    }
                });
            }
        }
    };
    AngularSlickgridComponent.prototype.bindResizeHook = function (grid, options) {
        // expand/autofit columns on first page load
        if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {
            grid.autosizeColumns();
        }
        // auto-resize grid on browser resize
        if (this._fixedHeight || this._fixedWidth) {
            this.resizer.init(grid, { height: this._fixedHeight, width: this._fixedWidth });
        }
        else {
            this.resizer.init(grid);
        }
        if (options.enableAutoResize) {
            this.resizer.bindAutoResizeDataGrid();
            if (grid && options.autoFitColumnsOnFirstLoad && options.enableAutoSizeColumns) {
                grid.autosizeColumns();
            }
        }
    };
    AngularSlickgridComponent.prototype.executeAfterDataviewCreated = function (grid, gridOptions, dataView) {
        // if user entered some Sort "presets", we need to reflect them all in the DOM
        if (gridOptions.enableSorting) {
            if (gridOptions.presets && Array.isArray(gridOptions.presets.sorters) && gridOptions.presets.sorters.length > 0) {
                this.sortService.loadGridSorters(gridOptions.presets.sorters);
            }
        }
    };
    AngularSlickgridComponent.prototype.initializePaginationService = function (paginationOptions) {
        var _this = this;
        if (this.gridOptions) {
            this.paginationData = {
                gridOptions: this.gridOptions,
            };
            this.paginationService.totalItems = this.totalItems;
            this.paginationService.init(this.grid, this.dataView, paginationOptions, this.backendServiceApi);
            this.subscriptions.push(this.paginationService.onPaginationChanged.subscribe(function (changes) { return _this.paginationChanged(changes); }), this.paginationService.onPaginationVisibilityChanged.subscribe(function (visibility) {
                _this.showPagination = visibility && visibility.visible || false;
                if (_this.gridOptions && _this.gridOptions.backendServiceApi) {
                    refreshBackendDataset();
                }
            }));
            this._isPaginationInitialized = true;
        }
        this.cd.detectChanges();
    };
    AngularSlickgridComponent.prototype.initialization = function () {
        // when detecting a frozen grid, we'll automatically enable the mousewheel scroll handler so that we can scroll from both left/right frozen containers
        if (this.gridOptions && ((this.gridOptions.frozenRow !== undefined && this.gridOptions.frozenRow >= 0) || this.gridOptions.frozenColumn !== undefined && this.gridOptions.frozenColumn >= 0) && this.gridOptions.enableMouseWheelScrollHandler === undefined) {
            this.gridOptions.enableMouseWheelScrollHandler = true;
        }
        // make sure the dataset is initialized (if not it will throw an error that it cannot getLength of null)
        this._dataset = this._dataset || [];
        this.gridOptions = this.mergeGridOptions(this.gridOptions);
        this._paginationOptions = this.gridOptions.pagination;
        this.locales = this.gridOptions && this.gridOptions.locales || Constants.locales;
        this.backendServiceApi = this.gridOptions && this.gridOptions.backendServiceApi;
        this.createBackendApiInternalPostProcessCallback(this.gridOptions);
        this._isLocalGrid = !this.backendServiceApi; // considered a local grid if it doesn't have a backend service set
        if (!this.customDataView) {
            var dataviewInlineFilters = this.gridOptions.dataView && this.gridOptions.dataView.inlineFilters || false;
            var dataViewOptions = { inlineFilters: dataviewInlineFilters };
            if (this.gridOptions.draggableGrouping || this.gridOptions.enableGrouping) {
                this.extensionUtility.loadExtensionDynamically(ExtensionName.groupItemMetaProvider);
                this.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
                this.sharedService.groupItemMetadataProvider = this.groupItemMetadataProvider;
                dataViewOptions = tslib_1.__assign({}, dataViewOptions, { groupItemMetadataProvider: this.groupItemMetadataProvider });
            }
            this.dataView = new Slick.Data.DataView(dataViewOptions);
        }
        // for convenience to the user, we provide the property "editor" as an Angular-Slickgrid editor complex object
        // however "editor" is used internally by SlickGrid for it's own Editor Factory
        // so in our lib we will swap "editor" and copy it into a new property called "internalColumnEditor"
        // then take back "editor.model" and make it the new "editor" so that SlickGrid Editor Factory still works
        this._columnDefinitions = this.swapInternalEditorToSlickGridFactoryEditor(this._columnDefinitions);
        // save reference for all columns before they optionally become hidden/visible
        this.sharedService.allColumns = this._columnDefinitions;
        this.sharedService.visibleColumns = this._columnDefinitions;
        this.extensionService.createExtensionsBeforeGridCreation(this._columnDefinitions, this.gridOptions);
        // build SlickGrid Grid, also user might optionally pass a custom dataview (e.g. remote model)
        this.grid = new Slick.Grid("#" + this.gridId, this.customDataView || this.dataView, this._columnDefinitions, this.gridOptions);
        this.sharedService.dataView = this.dataView;
        this.sharedService.grid = this.grid;
        this.extensionService.bindDifferentExtensions();
        this.bindDifferentHooks(this.grid, this.gridOptions, this.dataView);
        // emit the Grid & DataView object to make them available in parent component
        this.onGridCreated.emit(this.grid);
        // when it's a frozen grid, we need to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward
        var frozenColumnIndex = this.gridOptions.frozenColumn !== undefined ? this.gridOptions.frozenColumn : -1;
        if (frozenColumnIndex >= 0 && frozenColumnIndex <= this._columnDefinitions.length) {
            this.sharedService.frozenVisibleColumnId = this._columnDefinitions[frozenColumnIndex].id || '';
        }
        // initialize the SlickGrid grid
        this.grid.init();
        if (!this.customDataView && (this.dataView && this.dataView.beginUpdate && this.dataView.setItems && this.dataView.endUpdate)) {
            this.onDataviewCreated.emit(this.dataView);
            this.dataView.beginUpdate();
            this.dataView.setItems(this._dataset || [], this.gridOptions.datasetIdPropertyName);
            this.dataView.endUpdate();
            // if you don't want the items that are not visible (due to being filtered out or being on a different page)
            // to stay selected, pass 'false' to the second arg
            var selectionModel = this.grid && this.grid.getSelectionModel();
            if (selectionModel && this.gridOptions && this.gridOptions.dataView && this.gridOptions.dataView.hasOwnProperty('syncGridSelection')) {
                // if we are using a Backend Service, we will do an extra flag check, the reason is because it might have some unintended behaviors
                // with the BackendServiceApi because technically the data in the page changes the DataView on every page change.
                var preservedRowSelectionWithBackend = false;
                if (this.gridOptions.backendServiceApi && this.gridOptions.dataView.hasOwnProperty('syncGridSelectionWithBackendService')) {
                    preservedRowSelectionWithBackend = this.gridOptions.dataView.syncGridSelectionWithBackendService;
                }
                var syncGridSelection = this.gridOptions.dataView.syncGridSelection;
                if (typeof syncGridSelection === 'boolean') {
                    var preservedRowSelection = syncGridSelection;
                    if (!this._isLocalGrid) {
                        // when using BackendServiceApi, we'll be using the "syncGridSelectionWithBackendService" flag BUT "syncGridSelection" must also be set to True
                        preservedRowSelection = syncGridSelection && preservedRowSelectionWithBackend;
                    }
                    this.dataView.syncGridSelection(this.grid, preservedRowSelection);
                }
                else if (typeof syncGridSelection === 'object') {
                    this.dataView.syncGridSelection(this.grid, syncGridSelection.preserveHidden, syncGridSelection.preserveHiddenOnSelectionChange);
                }
            }
            var datasetLn = this.dataView.getLength() || this._dataset && this._dataset.length || 0;
            if (datasetLn > 0) {
                if (!this._isDatasetInitialized && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection)) {
                    this.loadRowSelectionPresetWhenExists();
                }
                this.loadPresetsWhenDatasetInitialized();
                this._isDatasetInitialized = true;
            }
        }
        // user might want to hide the header row on page load but still have `enableFiltering: true`
        // if that is the case, we need to hide the headerRow ONLY AFTER all filters got created & dataView exist
        if (this._hideHeaderRowAfterPageLoad) {
            this.showHeaderRow(false);
            this.sharedService.hideHeaderRowAfterPageLoad = this._hideHeaderRowAfterPageLoad;
        }
        // after the DataView is created & updated execute some processes
        this.executeAfterDataviewCreated(this.grid, this.gridOptions, this.dataView);
        // bind resize ONLY after the dataView is ready
        this.bindResizeHook(this.grid, this.gridOptions);
        // bind & initialize grouping and header grouping colspan service
        if (this.gridOptions.createPreHeaderPanel && !this.gridOptions.enableDraggableGrouping) {
            this.groupingAndColspanService.init(this.grid, this.dataView);
        }
        // bind & initialize the grid service
        this.gridService.init(this.grid, this.dataView);
        // when user enables translation, we need to translate Headers on first pass & subsequently in the bindDifferentHooks
        if (this.gridOptions.enableTranslate) {
            this.extensionService.translateColumnHeaders();
        }
        // if Export is enabled, initialize the service with the necessary grid and other objects
        if (this.gridOptions.enableExport) {
            this.exportService.init(this.grid, this.dataView);
        }
        // if Excel Export is enabled, initialize the service with the necessary grid and other objects
        if (this.gridOptions.enableExcelExport && this.sharedService) {
            this.excelExportService.init(this.grid, this.dataView);
        }
        // when using Tree Data View
        if (this.gridOptions.enableTreeData) {
            this.treeDataService.init(this.grid);
        }
        // once all hooks are in placed and the grid is initialized, we can emit an event
        this.onGridInitialized.emit(this.grid);
        // bind the Backend Service API callback functions only after the grid is initialized
        // because the preProcess() and onInit() might get triggered
        if (this.gridOptions && this.gridOptions.backendServiceApi) {
            this.bindBackendCallbackFunctions(this.gridOptions);
        }
        this.gridStateService.init(this.grid, this.dataView);
        // local grid, check if we need to show the Pagination
        // if so then also check if there's any presets and finally initialize the PaginationService
        // a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total
        if (this.gridOptions && this.gridOptions.enablePagination && this._isLocalGrid) {
            this.showPagination = true;
            this.loadLocalGridPagination();
        }
        this._angularGridInstances = {
            // Slick Grid & DataView objects
            dataView: this.dataView,
            slickGrid: this.grid,
            extensions: this.extensionService && this.extensionService.extensionList,
            // public methods
            destroy: this.destroy.bind(this),
            // return all available Services (non-singleton)
            backendService: this.gridOptions && this.gridOptions.backendServiceApi && this.gridOptions.backendServiceApi.service,
            excelExportService: this.excelExportService,
            exportService: this.exportService,
            extensionService: this.extensionService,
            filterService: this.filterService,
            gridEventService: this.gridEventService,
            gridStateService: this.gridStateService,
            gridService: this.gridService,
            groupingService: this.groupingAndColspanService,
            paginationService: this.paginationService,
            resizerService: this.resizer,
            sortService: this.sortService,
            treeDataService: this.treeDataService,
            /** @deprecated please use "extensionService" instead */
            pluginService: this.extensionService,
        };
        // all instances (SlickGrid, DataView & all Services)
        this.onAngularGridCreated.emit(this._angularGridInstances);
        // user could show a custom footer with the data metrics (dataset length and last updated timestamp)
        this.optionallyShowCustomFooterWithMetrics();
    };
    /** Load the Editor Collection asynchronously and replace the "collection" property when Observable resolves */
    AngularSlickgridComponent.prototype.loadEditorCollectionAsync = function (column) {
        var _this = this;
        var collectionAsync = column && column.editor && column.editor.collectionAsync;
        if (collectionAsync instanceof Observable) {
            this.subscriptions.push(collectionAsync.subscribe(function (resolvedCollection) { return _this.updateEditorCollection(column, resolvedCollection); }));
        }
    };
    AngularSlickgridComponent.prototype.loadPresetsWhenDatasetInitialized = function () {
        if (this.gridOptions && !this.customDataView) {
            // if user entered some Filter "presets", we need to reflect them all in the DOM
            if (this.gridOptions.presets && Array.isArray(this.gridOptions.presets.filters) && this.gridOptions.presets.filters.length > 0) {
                this.filterService.populateColumnFilterSearchTermPresets(this.gridOptions.presets.filters);
            }
            // if user entered some Columns "presets", we need to reflect them all in the grid
            if (this.gridOptions.presets && Array.isArray(this.gridOptions.presets.columns) && this.gridOptions.presets.columns.length > 0) {
                var gridColumns = this.gridStateService.getAssociatedGridColumns(this.grid, this.gridOptions.presets.columns);
                if (gridColumns && Array.isArray(gridColumns) && gridColumns.length > 0) {
                    // make sure that the checkbox selector is also visible if it is enabled
                    if (this.gridOptions.enableCheckboxSelector) {
                        var checkboxColumn = (Array.isArray(this._columnDefinitions) && this._columnDefinitions.length > 0) ? this._columnDefinitions[0] : null;
                        if (checkboxColumn && checkboxColumn.id === '_checkbox_selector' && gridColumns[0].id !== '_checkbox_selector') {
                            gridColumns.unshift(checkboxColumn);
                        }
                    }
                    // finally set the new presets columns (including checkbox selector if need be)
                    this.grid.setColumns(gridColumns);
                }
            }
        }
    };
    /**
     * local grid, check if we need to show the Pagination
     * if so then also check if there's any presets and finally initialize the PaginationService
     * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total
     */
    AngularSlickgridComponent.prototype.loadLocalGridPagination = function () {
        if (this.gridOptions) {
            this.totalItems = Array.isArray(this.dataset) ? this.dataset.length : 0;
            if (this._paginationOptions && this.dataView && this.dataView.getPagingInfo) {
                var slickPagingInfo = this.dataView.getPagingInfo() || {};
                if (slickPagingInfo.hasOwnProperty('totalRows') && this._paginationOptions.totalItems !== slickPagingInfo.totalRows) {
                    this.totalItems = slickPagingInfo.totalRows;
                }
            }
            this._paginationOptions.totalItems = this.totalItems;
            var paginationOptions = this.setPaginationOptionsWhenPresetDefined(this.gridOptions, this._paginationOptions);
            this.initializePaginationService(paginationOptions);
        }
    };
    /** Load any Row Selections into the DataView that were presets by the user */
    AngularSlickgridComponent.prototype.loadRowSelectionPresetWhenExists = function () {
        var _this = this;
        // if user entered some Row Selections "presets"
        var presets = this.gridOptions && this.gridOptions.presets;
        var selectionModel = this.grid && this.grid.getSelectionModel();
        var enableRowSelection = this.gridOptions && (this.gridOptions.enableCheckboxSelector || this.gridOptions.enableRowSelection);
        if (enableRowSelection && selectionModel && presets && presets.rowSelection && (Array.isArray(presets.rowSelection.gridRowIndexes) || Array.isArray(presets.rowSelection.dataContextIds))) {
            var dataContextIds = presets.rowSelection.dataContextIds;
            var gridRowIndexes_1 = presets.rowSelection.gridRowIndexes;
            // maps the IDs to the Grid Rows and vice versa, the "dataContextIds" has precedence over the other
            if (Array.isArray(dataContextIds) && dataContextIds.length > 0) {
                gridRowIndexes_1 = this.dataView.mapIdsToRows(dataContextIds) || [];
            }
            else if (Array.isArray(gridRowIndexes_1) && gridRowIndexes_1.length > 0) {
                dataContextIds = this.dataView.mapRowsToIds(gridRowIndexes_1) || [];
            }
            this.gridStateService.selectedRowDataContextIds = dataContextIds;
            // change the selected rows except UNLESS it's a Local Grid with Pagination
            // local Pagination uses the DataView and that also trigger a change/refresh
            // and we don't want to trigger 2 Grid State changes just 1
            if ((this._isLocalGrid && !this.gridOptions.enablePagination) || !this._isLocalGrid) {
                setTimeout(function () { return _this.grid.setSelectedRows(gridRowIndexes_1); });
            }
        }
    };
    AngularSlickgridComponent.prototype.mergeGridOptions = function (gridOptions) {
        gridOptions.gridId = this.gridId;
        gridOptions.gridContainerId = "slickGridContainer-" + this.gridId;
        // if we have a backendServiceApi and the enablePagination is undefined, we'll assume that we do want to see it, else get that defined value
        // @deprecated TODO remove this check in the future, user should explicitely enable the Pagination since this feature is now optional (you can now call OData/GraphQL without Pagination which is a new feature)
        gridOptions.enablePagination = ((gridOptions.backendServiceApi && gridOptions.enablePagination === undefined) ? true : gridOptions.enablePagination) || false;
        // use jquery extend to deep merge & copy to avoid immutable properties being changed in GlobalGridOptions after a route change
        var options = $.extend(true, {}, GlobalGridOptions, this.forRootConfig, gridOptions);
        // using jQuery extend to do a deep clone has an unwanted side on objects and pageSizes but ES6 spread has other worst side effects
        // so we will just overwrite the pageSizes when needed, this is the only one causing issues so far.
        // jQuery wrote this on their docs:: On a deep extend, Object and Array are extended, but object wrappers on primitive types such as String, Boolean, and Number are not.
        if (options && options.pagination && (gridOptions.enablePagination || gridOptions.backendServiceApi) && gridOptions.pagination && Array.isArray(gridOptions.pagination.pageSizes)) {
            options.pagination.pageSizes = gridOptions.pagination.pageSizes;
        }
        // also make sure to show the header row if user have enabled filtering
        this._hideHeaderRowAfterPageLoad = (options.showHeaderRow === false);
        if (options.enableFiltering && !options.showHeaderRow) {
            options.showHeaderRow = options.enableFiltering;
        }
        // when we use Pagination on Local Grid, it doesn't seem to work without enableFiltering
        // so we'll enable the filtering but we'll keep the header row hidden
        if (!options.enableFiltering && options.enablePagination && this._isLocalGrid) {
            options.enableFiltering = true;
            options.showHeaderRow = false;
            this._hideHeaderRowAfterPageLoad = true;
            this.sharedService.hideHeaderRowAfterPageLoad = true;
        }
        return options;
    };
    /**
     * We could optionally display a custom footer below the grid to show some metrics (last update, item count with/without filters)
     * It's an opt-in, user has to enable "showCustomFooter" and it cannot be used when there's already a Pagination since they display the same kind of info
     */
    AngularSlickgridComponent.prototype.optionallyShowCustomFooterWithMetrics = function () {
        if (this.gridOptions) {
            if (this.gridOptions.enableTranslate) {
                this.translateCustomFooterTexts();
            }
            else if (this.gridOptions.customFooterOptions) {
                var customFooterOptions = this.gridOptions.customFooterOptions;
                customFooterOptions.metricTexts = customFooterOptions.metricTexts || {};
                customFooterOptions.metricTexts.lastUpdate = customFooterOptions.metricTexts.lastUpdate || this.locales && this.locales.TEXT_LAST_UPDATE || 'TEXT_LAST_UPDATE';
                customFooterOptions.metricTexts.items = customFooterOptions.metricTexts.items || this.locales && this.locales.TEXT_ITEMS || 'TEXT_ITEMS';
                customFooterOptions.metricTexts.of = customFooterOptions.metricTexts.of || this.locales && this.locales.TEXT_OF || 'TEXT_OF';
            }
            // we will display the custom footer only when there's no Pagination
            if (!this.gridOptions.enablePagination && !this._isPaginationInitialized) {
                this.showCustomFooter = this.gridOptions.hasOwnProperty('showCustomFooter') ? this.gridOptions.showCustomFooter : false;
                this.customFooterOptions = this.gridOptions.customFooterOptions || {};
            }
            this.cd.detectChanges();
        }
    };
    AngularSlickgridComponent.prototype.treeDataSortComparer = function (flatDataset) {
        var dataViewIdIdentifier = this.gridOptions && this.gridOptions.datasetIdPropertyName || 'id';
        var treeDataOpt = this.gridOptions && this.gridOptions.treeDataOptions || { columnId: '' };
        var treeDataOptions = tslib_1.__assign({}, treeDataOpt, { identifierPropName: treeDataOpt.identifierPropName || dataViewIdIdentifier });
        return convertParentChildArrayToHierarchicalView(flatDataset, treeDataOptions);
    };
    /**
     * For convenience to the user, we provide the property "editor" as an Angular-Slickgrid editor complex object
     * however "editor" is used internally by SlickGrid for it's own Editor Factory
     * so in our lib we will swap "editor" and copy it into a new property called "internalColumnEditor"
     * then take back "editor.model" and make it the new "editor" so that SlickGrid Editor Factory still works
     */
    AngularSlickgridComponent.prototype.swapInternalEditorToSlickGridFactoryEditor = function (columnDefinitions) {
        var _this = this;
        return columnDefinitions.map(function (column) {
            // on every Editor that have a "collectionAsync", resolve the data and assign it to the "collection" property
            if (column && column.editor && column.editor.collectionAsync) {
                _this.loadEditorCollectionAsync(column);
            }
            return tslib_1.__assign({}, column, { editor: column.editor && column.editor.model, internalColumnEditor: tslib_1.__assign({}, column.editor) });
        });
    };
    /** Translate all Custom Footer Texts (footer with metrics) */
    AngularSlickgridComponent.prototype.translateCustomFooterTexts = function () {
        var e_4, _a;
        if (this.translate && this.translate.instant && this.translate.currentLang) {
            var customFooterOptions = this.gridOptions && this.gridOptions.customFooterOptions || {};
            customFooterOptions.metricTexts = customFooterOptions.metricTexts || {};
            try {
                for (var _b = tslib_1.__values(Object.keys(customFooterOptions.metricTexts)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var propName = _c.value;
                    if (propName.lastIndexOf('Key') > 0) {
                        var propNameWithoutKey = propName.substring(0, propName.lastIndexOf('Key'));
                        customFooterOptions.metricTexts[propNameWithoutKey] = this.translate.instant(customFooterOptions.metricTexts[propName] || ' ');
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    AngularSlickgridComponent.prototype.translateColumnHeaderTitleKeys = function () {
        // translate all columns (including hidden columns)
        // eventually deprecate the "headerKey" and use only the "nameKey"
        this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');
        this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');
    };
    AngularSlickgridComponent.prototype.translateColumnGroupKeys = function () {
        // translate all column groups (including hidden columns)
        this.extensionUtility.translateItems(this.sharedService.allColumns, 'columnGroupKey', 'columnGroup');
    };
    /**
     * Update the Editor "collection" property from an async call resolved
     * Since this is called after the async call resolves, the pointer will not be the same as the "column" argument passed.
     * Once we found the new pointer, we will reassign the "editor" and "collection" to the "internalColumnEditor" so it has newest collection
     */
    AngularSlickgridComponent.prototype.updateEditorCollection = function (column, newCollection) {
        column.editor.collection = newCollection;
        // find the new column reference pointer
        var columns = this.grid.getColumns();
        if (Array.isArray(columns)) {
            var columnRef = columns.find(function (col) { return col.id === column.id; });
            columnRef.internalColumnEditor = column.editor;
        }
    };
    AngularSlickgridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: ExcelExportService },
        { type: ExportService },
        { type: ExtensionService },
        { type: ExtensionUtility },
        { type: FilterService },
        { type: GridEventService },
        { type: GridService },
        { type: GridStateService },
        { type: GroupingAndColspanService },
        { type: PaginationService },
        { type: ResizerService },
        { type: SharedService },
        { type: SortService },
        { type: TreeDataService },
        { type: TranslateService, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: ['config',] }] }
    ]; };
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onAngularGridCreated", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onDataviewCreated", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridCreated", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridInitialized", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onBeforeGridCreate", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onBeforeGridDestroy", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onAfterGridDestroyed", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridStateChanged", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridBeforeExportToFile", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridAfterExportToFile", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridBeforeExportToExcel", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularSlickgridComponent.prototype, "onGridAfterExportToExcel", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "customDataView", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "gridId", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "gridOptions", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "paginationOptions", null);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "gridHeight", null);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "gridWidth", null);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "columnDefinitions", null);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "dataset", null);
    tslib_1.__decorate([
        Input()
    ], AngularSlickgridComponent.prototype, "datasetHierarchical", null);
    AngularSlickgridComponent = tslib_1.__decorate([
        Component({
            selector: 'angular-slickgrid',
            template: "<div id=\"slickGridContainer-{{gridId}}\" class=\"gridPane\" [style.width]=\"gridWidthString\">\r\n  <div attr.id='{{gridId}}' class=\"slickgrid-container\" style=\"width: 100%\" [style.height]=\"gridHeightString\">\r\n  </div>\r\n\r\n  <!-- Pagination section under the grid -->\r\n  <slick-pagination id=\"slickPagingContainer-{{gridId}}\" *ngIf=\"showPagination\" [gridOptions]=\"gridOptions\">\r\n  </slick-pagination>\r\n\r\n  <!-- Custom Footer section under the grid -->\r\n  <div *ngIf=\"showCustomFooter && customFooterOptions\" class=\"slick-custom-footer\" style=\"width: 100%;\"\r\n       [style.height]=\"customFooterOptions?.footerHeight || 20\">\r\n    <div class=\"left-footer\" [ngClass]=\"customFooterOptions.leftContainerClass\">\r\n      {{customFooterOptions.leftFooterText}}\r\n    </div>\r\n\r\n    <div class=\"right-footer metrics\" [ngClass]=\"customFooterOptions.rightContainerClass\"\r\n         *ngIf=\"metrics && !customFooterOptions.hideMetrics\">\r\n      <span *ngIf=\"!customFooterOptions.hideLastUpdateTimestamp\">\r\n        <span>{{customFooterOptions.metricTexts?.lastUpdate}}</span>\r\n\r\n        {{metrics.endTime | date: customFooterOptions.dateFormat}}\r\n        <span class=\"separator\">{{customFooterOptions.metricSeparator}}</span>\r\n      </span>\r\n\r\n      {{metrics.itemCount}}\r\n      <span *ngIf=\"!customFooterOptions.hideTotalItemCount\">{{customFooterOptions.metricTexts?.of}}\r\n        {{metrics.totalItemCount}}\r\n      </span>\r\n      {{customFooterOptions.metricTexts?.items}}\r\n    </div>\r\n  </div>\r\n</div>\r\n",
            providers: [
                // make everything transient (non-singleton)
                AngularUtilService,
                AutoTooltipExtension,
                CellExternalCopyManagerExtension,
                CellMenuExtension,
                CheckboxSelectorExtension,
                ColumnPickerExtension,
                ContextMenuExtension,
                DraggableGroupingExtension,
                ExcelExportService,
                ExtensionService,
                ExportService,
                ExtensionUtility,
                FilterFactory,
                FilterService,
                GraphqlService,
                GridEventService,
                GridMenuExtension,
                GridService,
                GridStateService,
                GroupingAndColspanService,
                GroupItemMetaProviderExtension,
                HeaderButtonExtension,
                HeaderMenuExtension,
                PaginationService,
                ResizerService,
                RowDetailViewExtension,
                RowMoveManagerExtension,
                RowSelectionExtension,
                SharedService,
                SortService,
                SlickgridConfig,
                TreeDataService,
            ]
        }),
        tslib_1.__param(16, Optional()),
        tslib_1.__param(17, Inject('config'))
    ], AngularSlickgridComponent);
    return AngularSlickgridComponent;
}());
export { AngularSlickgridComponent };
//# sourceMappingURL=data:application/json;base64,