import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector } from '@angular/core';
var AngularUtilService = /** @class */ (function () {
    function AngularUtilService(compFactoryResolver, appRef, injector) {
        this.compFactoryResolver = compFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6
    AngularUtilService.prototype.createAngularComponent = function (component) {
        // Create a component reference from the component
        var componentRef = this.compFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        // Attach component to the appRef so that it's inside the ng component tree
        this.appRef.attachView(componentRef.hostView);
        // Get DOM element from component
        var domElem;
        var viewRef = componentRef.hostView;
        if (viewRef && Array.isArray(viewRef.rootNodes) && viewRef.rootNodes[0]) {
            domElem = viewRef.rootNodes[0];
        }
        return { componentRef: componentRef, domElement: domElem };
    };
    // ref https://hackernoon.com/angular-pro-tip-how-to-dynamically-create-components-in-body-ba200cc289e6
    AngularUtilService.prototype.createAngularComponentAppendToDom = function (component, targetElement, clearTargetContent) {
        if (clearTargetContent === void 0) { clearTargetContent = false; }
        var componentOutput = this.createAngularComponent(component);
        // Append DOM element to the HTML element specified
        if (targetElement && targetElement.appendChild) {
            if (clearTargetContent && targetElement.innerHTML) {
                targetElement.innerHTML = '';
            }
            targetElement.appendChild(componentOutput.domElement);
        }
        else {
            document.body.appendChild(componentOutput.domElement); // when no target provided, we'll simply add it to the HTML Body
        }
        return componentOutput;
    };
    AngularUtilService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    AngularUtilService = tslib_1.__decorate([
        Injectable()
    ], AngularUtilService);
    return AngularUtilService;
}());
export { AngularUtilService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhclV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc2VydmljZXMvYW5ndWxhclV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSx3QkFBd0IsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoSDtJQUNFLDRCQUNVLG1CQUE2QyxFQUM3QyxNQUFzQixFQUN0QixRQUFrQjtRQUZsQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTBCO1FBQzdDLFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDeEIsQ0FBQztJQUVMLHVHQUF1RztJQUN2RyxtREFBc0IsR0FBdEIsVUFBdUIsU0FBYztRQUNuQyxrREFBa0Q7UUFDbEQsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQjthQUMxQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUM7YUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QiwyRUFBMkU7UUFDM0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLGlDQUFpQztRQUNqQyxJQUFJLE9BQU8sQ0FBQztRQUNaLElBQU0sT0FBTyxHQUFJLFlBQVksQ0FBQyxRQUFpQyxDQUFDO1FBQ2hFLElBQUksT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFnQixDQUFDO1NBQy9DO1FBRUQsT0FBTyxFQUFFLFlBQVksY0FBQSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRUQsdUdBQXVHO0lBQ3ZHLDhEQUFpQyxHQUFqQyxVQUFrQyxTQUFjLEVBQUUsYUFBcUMsRUFBRSxrQkFBMEI7UUFBMUIsbUNBQUEsRUFBQSwwQkFBMEI7UUFDakgsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRS9ELG1EQUFtRDtRQUNuRCxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzlDLElBQUksa0JBQWtCLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRTtnQkFDakQsYUFBYSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7YUFDOUI7WUFDRCxhQUFhLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2RDthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0VBQWdFO1NBQ3hIO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs7Z0JBeEM4Qix3QkFBd0I7Z0JBQ3JDLGNBQWM7Z0JBQ1osUUFBUTs7SUFKakIsa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTtPQUNBLGtCQUFrQixDQTJDOUI7SUFBRCx5QkFBQztDQUFBLEFBM0NELElBMkNDO1NBM0NZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuZ3VsYXJDb21wb25lbnRPdXRwdXQgfSBmcm9tICcuLi9tb2RlbHMvYW5ndWxhckNvbXBvbmVudE91dHB1dC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbWJlZGRlZFZpZXdSZWYsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBbmd1bGFyVXRpbFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjb21wRmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICApIHsgfVxyXG5cclxuICAvLyByZWYgaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9hbmd1bGFyLXByby10aXAtaG93LXRvLWR5bmFtaWNhbGx5LWNyZWF0ZS1jb21wb25lbnRzLWluLWJvZHktYmEyMDBjYzI4OWU2XHJcbiAgY3JlYXRlQW5ndWxhckNvbXBvbmVudChjb21wb25lbnQ6IGFueSk6IEFuZ3VsYXJDb21wb25lbnRPdXRwdXQge1xyXG4gICAgLy8gQ3JlYXRlIGEgY29tcG9uZW50IHJlZmVyZW5jZSBmcm9tIHRoZSBjb21wb25lbnRcclxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuY29tcEZhY3RvcnlSZXNvbHZlclxyXG4gICAgICAucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KVxyXG4gICAgICAuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG5cclxuICAgIC8vIEF0dGFjaCBjb21wb25lbnQgdG8gdGhlIGFwcFJlZiBzbyB0aGF0IGl0J3MgaW5zaWRlIHRoZSBuZyBjb21wb25lbnQgdHJlZVxyXG4gICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG5cclxuICAgIC8vIEdldCBET00gZWxlbWVudCBmcm9tIGNvbXBvbmVudFxyXG4gICAgbGV0IGRvbUVsZW07XHJcbiAgICBjb25zdCB2aWV3UmVmID0gKGNvbXBvbmVudFJlZi5ob3N0VmlldyBhcyBFbWJlZGRlZFZpZXdSZWY8YW55Pik7XHJcbiAgICBpZiAodmlld1JlZiAmJiBBcnJheS5pc0FycmF5KHZpZXdSZWYucm9vdE5vZGVzKSAmJiB2aWV3UmVmLnJvb3ROb2Rlc1swXSkge1xyXG4gICAgICBkb21FbGVtID0gdmlld1JlZi5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgY29tcG9uZW50UmVmLCBkb21FbGVtZW50OiBkb21FbGVtIH07XHJcbiAgfVxyXG5cclxuICAvLyByZWYgaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9hbmd1bGFyLXByby10aXAtaG93LXRvLWR5bmFtaWNhbGx5LWNyZWF0ZS1jb21wb25lbnRzLWluLWJvZHktYmEyMDBjYzI4OWU2XHJcbiAgY3JlYXRlQW5ndWxhckNvbXBvbmVudEFwcGVuZFRvRG9tKGNvbXBvbmVudDogYW55LCB0YXJnZXRFbGVtZW50PzogSFRNTEVsZW1lbnQgfCBFbGVtZW50LCBjbGVhclRhcmdldENvbnRlbnQgPSBmYWxzZSk6IEFuZ3VsYXJDb21wb25lbnRPdXRwdXQge1xyXG4gICAgY29uc3QgY29tcG9uZW50T3V0cHV0ID0gdGhpcy5jcmVhdGVBbmd1bGFyQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcblxyXG4gICAgLy8gQXBwZW5kIERPTSBlbGVtZW50IHRvIHRoZSBIVE1MIGVsZW1lbnQgc3BlY2lmaWVkXHJcbiAgICBpZiAodGFyZ2V0RWxlbWVudCAmJiB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKSB7XHJcbiAgICAgIGlmIChjbGVhclRhcmdldENvbnRlbnQgJiYgdGFyZ2V0RWxlbWVudC5pbm5lckhUTUwpIHtcclxuICAgICAgICB0YXJnZXRFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIHRhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29tcG9uZW50T3V0cHV0LmRvbUVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb21wb25lbnRPdXRwdXQuZG9tRWxlbWVudCk7IC8vIHdoZW4gbm8gdGFyZ2V0IHByb3ZpZGVkLCB3ZSdsbCBzaW1wbHkgYWRkIGl0IHRvIHRoZSBIVE1MIEJvZHlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50T3V0cHV0O1xyXG4gIH1cclxufVxyXG4iXX0=