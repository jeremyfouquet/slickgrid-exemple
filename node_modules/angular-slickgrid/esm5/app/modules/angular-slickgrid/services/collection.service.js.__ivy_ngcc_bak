import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { FilterMultiplePassType, FieldType, OperatorType, SortDirectionNumber, } from './../models/index';
import { sortByFieldType } from '../sorters/sorterUtilities';
import { uniqueArray } from './utilities';
var CollectionService = /** @class */ (function () {
    function CollectionService(translate) {
        this.translate = translate;
    }
    /**
     * Filter 1 or more items from a collection
     * @param collection
     * @param filterByOptions
     */
    CollectionService.prototype.filterCollection = function (collection, filterByOptions, filterResultBy) {
        var e_1, _a;
        if (filterResultBy === void 0) { filterResultBy = FilterMultiplePassType.chain; }
        var filteredCollection = [];
        // when it's array, we will use the new filtered collection after every pass
        // basically if input collection has 10 items on 1st pass and 1 item is filtered out, then on 2nd pass the input collection will be 9 items
        if (Array.isArray(filterByOptions)) {
            filteredCollection = (filterResultBy === FilterMultiplePassType.merge) ? [] : collection;
            try {
                for (var filterByOptions_1 = tslib_1.__values(filterByOptions), filterByOptions_1_1 = filterByOptions_1.next(); !filterByOptions_1_1.done; filterByOptions_1_1 = filterByOptions_1.next()) {
                    var filter = filterByOptions_1_1.value;
                    if (filterResultBy === FilterMultiplePassType.merge) {
                        var filteredPass = this.singleFilterCollection(collection, filter);
                        filteredCollection = uniqueArray(tslib_1.__spread(filteredCollection, filteredPass));
                    }
                    else {
                        filteredCollection = this.singleFilterCollection(filteredCollection, filter);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (filterByOptions_1_1 && !filterByOptions_1_1.done && (_a = filterByOptions_1.return)) _a.call(filterByOptions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            filteredCollection = this.singleFilterCollection(collection, filterByOptions);
        }
        return filteredCollection;
    };
    /**
     * Filter an item from a collection
     * @param collection
     * @param filterBy
     */
    CollectionService.prototype.singleFilterCollection = function (collection, filterBy) {
        var filteredCollection = [];
        if (filterBy) {
            var objectProperty_1 = filterBy.property;
            var operator = filterBy.operator || OperatorType.equal;
            // just check for undefined since the filter value could be null, 0, '', false etc
            var value_1 = typeof filterBy.value === 'undefined' ? '' : filterBy.value;
            switch (operator) {
                case OperatorType.equal:
                    if (objectProperty_1) {
                        filteredCollection = collection.filter(function (item) { return item[objectProperty_1] === value_1; });
                    }
                    else {
                        filteredCollection = collection.filter(function (item) { return item === value_1; });
                    }
                    break;
                case OperatorType.contains:
                    if (objectProperty_1) {
                        filteredCollection = collection.filter(function (item) { return item[objectProperty_1].toString().indexOf(value_1.toString()) !== -1; });
                    }
                    else {
                        filteredCollection = collection.filter(function (item) { return (item !== null && item !== undefined) && item.toString().indexOf(value_1.toString()) !== -1; });
                    }
                    break;
                case OperatorType.notContains:
                    if (objectProperty_1) {
                        filteredCollection = collection.filter(function (item) { return item[objectProperty_1].toString().indexOf(value_1.toString()) === -1; });
                    }
                    else {
                        filteredCollection = collection.filter(function (item) { return (item !== null && item !== undefined) && item.toString().indexOf(value_1.toString()) === -1; });
                    }
                    break;
                case OperatorType.notEqual:
                default:
                    if (objectProperty_1) {
                        filteredCollection = collection.filter(function (item) { return item[objectProperty_1] !== value_1; });
                    }
                    else {
                        filteredCollection = collection.filter(function (item) { return item !== value_1; });
                    }
            }
        }
        return filteredCollection;
    };
    /**
     * Sort 1 or more items in a collection
     * @param column definition
     * @param collection
     * @param sortByOptions
     * @param enableTranslateLabel
     */
    CollectionService.prototype.sortCollection = function (columnDef, collection, sortByOptions, enableTranslateLabel) {
        var _this = this;
        if (enableTranslateLabel && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        var sortedCollection = [];
        if (sortByOptions) {
            if (Array.isArray(sortByOptions)) {
                // multi-sort
                sortedCollection = collection.sort(function (dataRow1, dataRow2) {
                    for (var i = 0, l = sortByOptions.length; i < l; i++) {
                        var sortBy = sortByOptions[i];
                        if (sortBy && sortBy.property) {
                            // collection of objects with a property name provided
                            var sortDirection = sortBy.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;
                            var objectProperty = sortBy.property;
                            var fieldType = sortBy.fieldType || FieldType.string;
                            var value1 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow1[objectProperty] || ' ') : dataRow1[objectProperty];
                            var value2 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow2[objectProperty] || ' ') : dataRow2[objectProperty];
                            var sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef);
                            if (sortResult !== SortDirectionNumber.neutral) {
                                return sortResult;
                            }
                        }
                    }
                    return SortDirectionNumber.neutral;
                });
            }
            else if (sortByOptions && sortByOptions.property) {
                // single sort
                // collection of objects with a property name provided
                var objectProperty_2 = sortByOptions.property;
                var sortDirection_1 = sortByOptions.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;
                var fieldType_1 = sortByOptions.fieldType || FieldType.string;
                if (objectProperty_2) {
                    sortedCollection = collection.sort(function (dataRow1, dataRow2) {
                        var value1 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow1[objectProperty_2] || ' ') : dataRow1[objectProperty_2];
                        var value2 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow2[objectProperty_2] || ' ') : dataRow2[objectProperty_2];
                        var sortResult = sortByFieldType(fieldType_1, value1, value2, sortDirection_1, columnDef);
                        if (sortResult !== SortDirectionNumber.neutral) {
                            return sortResult;
                        }
                        return SortDirectionNumber.neutral;
                    });
                }
            }
            else if (sortByOptions && !sortByOptions.property) {
                var sortDirection_2 = sortByOptions.sortDesc ? SortDirectionNumber.desc : SortDirectionNumber.asc;
                var fieldType_2 = sortByOptions.fieldType || FieldType.string;
                sortedCollection = collection.sort(function (dataRow1, dataRow2) {
                    var value1 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow1 || ' ') : dataRow1;
                    var value2 = (enableTranslateLabel) ? _this.translate && _this.translate.currentLang && _this.translate.instant(dataRow2 || ' ') : dataRow2;
                    var sortResult = sortByFieldType(fieldType_2, value1, value2, sortDirection_2, columnDef);
                    if (sortResult !== SortDirectionNumber.neutral) {
                        return sortResult;
                    }
                    return SortDirectionNumber.neutral;
                });
            }
        }
        return sortedCollection;
    };
    CollectionService.ctorParameters = function () { return [
        { type: TranslateService, decorators: [{ type: Optional }] }
    ]; };
    CollectionService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Optional())
    ], CollectionService);
    return CollectionService;
}());
export { CollectionService };
//# sourceMappingURL=data:application/json;base64,