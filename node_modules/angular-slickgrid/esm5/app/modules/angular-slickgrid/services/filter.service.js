import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isObservable, Subject } from 'rxjs';
import * as isequal_ from 'lodash.isequal';
import * as Éµngcc0 from '@angular/core';
var isequal = isequal_; // patch to fix rollup to work
import { EmitterType, FieldType, KeyCode, OperatorType, } from './../models/index';
import { executeBackendCallback, refreshBackendDataset } from './backend-utilities';
import { getDescendantProperty } from './utilities';
import { FilterConditions } from './../filter-conditions';
import { FilterFactory } from '../filters/filterFactory';
import { SharedService } from './shared.service';
// timer for keeping track of user typing waits
var timer;
var DEFAULT_FILTER_TYPING_DEBOUNCE = 500;
var FilterService = /** @class */ (function () {
    function FilterService(filterFactory, sharedService) {
        this.filterFactory = filterFactory;
        this.sharedService = sharedService;
        this._isFilterFirstRender = true;
        this._firstColumnIdRendered = '';
        this._filtersMetadata = [];
        this._columnFilters = {};
        this.httpCancelRequests$ = new Subject(); // this will be used to cancel any pending http request
        this.onFilterChanged = new Subject();
        this.onFilterCleared = new Subject();
        this._eventHandler = new Slick.EventHandler();
        this._onSearchChange = new Slick.Event();
    }
    Object.defineProperty(FilterService.prototype, "eventHandler", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterService.prototype, "isFilterFirstRender", {
        /** Getter to know if the filter was already rendered or if it was its first time render */
        get: function () {
            return this._isFilterFirstRender;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterService.prototype, "onSearchChange", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._onSearchChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterService.prototype, "_columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterService.prototype, "_dataView", {
        /** Getter of SlickGrid DataView object */
        get: function () {
            return (this._grid && this._grid.getData) ? this._grid.getData() : {};
        },
        enumerable: true,
        configurable: true
    });
    FilterService.prototype.init = function (grid) {
        this._grid = grid;
        if (this._gridOptions && this._gridOptions.enableTreeData && this._gridOptions.treeDataOptions) {
            this._grid.setSortColumns([{ columnId: this._gridOptions.treeDataOptions.columnId, sortAsc: true }]);
        }
    };
    FilterService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        if (this._eventHandler && this._eventHandler.unsubscribeAll) {
            this._eventHandler.unsubscribeAll();
        }
        if (isObservable(this.httpCancelRequests$)) {
            this.httpCancelRequests$.next(); // this cancels any pending http requests
        }
        this.disposeColumnFilters();
        this._onSearchChange = null;
        this.addFilterTemplateToHeaderRow = null;
        this.customLocalFilter = null;
        this.callbackSearchEvent = null;
        this.handleBackendOnSearchChange = null;
        this.handleLocalOnSearchChange = null;
    };
    /**
     * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns
     */
    FilterService.prototype.disposeColumnFilters = function () {
        // we need to loop through all columnFilters and delete them 1 by 1
        // only trying to make columnFilter an empty (without looping) would not trigger a dataset change
        if (typeof this._columnFilters === 'object') {
            for (var columnId in this._columnFilters) {
                if (columnId && this._columnFilters[columnId]) {
                    delete this._columnFilters[columnId];
                }
            }
        }
        // also destroy each Filter instances
        if (Array.isArray(this._filtersMetadata)) {
            this._filtersMetadata.forEach(function (filter) {
                if (filter && filter.destroy) {
                    filter.destroy(true);
                }
            });
        }
        this._filtersMetadata = [];
    };
    /**
     * When clearing or disposing of all filters, we need to loop through all columnFilters and delete them 1 by 1
     * only trying to make columnFilter an empty (without looping) would not trigger a dataset change
     */
    FilterService.prototype.resetColumnFilters = function () {
        if (typeof this._columnFilters === 'object') {
            for (var columnId in this._columnFilters) {
                if (columnId && this._columnFilters[columnId]) {
                    delete this._columnFilters[columnId];
                }
            }
        }
    };
    /**
     * Bind a backend filter hook to the grid
     * @param grid SlickGrid Grid object
     */
    FilterService.prototype.bindBackendOnFilter = function (grid) {
        this._filtersMetadata = [];
        // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template
        this._eventHandler.subscribe(grid.onHeaderRowCellRendered, this.handleBackendOnSearchChange.bind(this));
        // subscribe to the SlickGrid event and call the backend execution
        if (this._onSearchChange) {
            this._eventHandler.subscribe(this._onSearchChange, this.onBackendFilterChange.bind(this));
        }
    };
    FilterService.prototype.handleBackendOnSearchChange = function (_e, args) {
        // firstColumnIdRendered is null at first, so if it changes to being filled and equal, then we would know that it was already rendered
        // this is to avoid rendering the filter twice (only the Select Filter for now), rendering it again also clears the filter which has unwanted side effect
        if (args.column.id === this._firstColumnIdRendered) {
            this._isFilterFirstRender = false;
        }
        this.addFilterTemplateToHeaderRow(null, args, this._isFilterFirstRender);
        if (this._firstColumnIdRendered === '') {
            this._firstColumnIdRendered = args.column.id;
        }
    };
    /**
     * Bind a local filter hook to the grid
     * @param grid SlickGrid Grid object
     * @param dataView
     */
    FilterService.prototype.bindLocalOnFilter = function (grid) {
        this._filtersMetadata = [];
        this._dataView.setFilterArgs({ columnFilters: this._columnFilters, grid: this._grid, dataView: this._dataView });
        this._dataView.setFilter(this.customLocalFilter.bind(this));
        // bind any search filter change (e.g. input filter input change event)
        if (this._onSearchChange) {
            this._eventHandler.subscribe(this._onSearchChange, this.handleLocalOnSearchChange.bind(this));
            // subscribe to SlickGrid onHeaderRowCellRendered event to create filter template
            this._eventHandler.subscribe(grid.onHeaderRowCellRendered, this.addFilterTemplateToHeaderRow.bind(this));
        }
    };
    FilterService.prototype.handleLocalOnSearchChange = function (_e, args) {
        var isGridWithTreeData = this._gridOptions && this._gridOptions.enableTreeData || false;
        // When using Tree Data, we need to do it in 2 steps
        // step 1. we need to prefilter (search) the data prior, the result will be an array of IDs which are the node(s) and their parent nodes when necessary.
        // step 2. calling the DataView.refresh() is what triggers the final filtering, with "customLocalFilter()" which will decide which rows should persist
        if (isGridWithTreeData) {
            this._tmpPreFilteredData = this.preFilterTreeData(this._dataView.getItems(), this._columnFilters);
        }
        var columnId = args.columnId;
        if (columnId !== null) {
            this._dataView.refresh();
        }
        // emit an onFilterChanged event when it's not called by a clear filter
        if (args && !args.clearFilterTriggered) {
            this.emitFilterChanged(EmitterType.local);
        }
    };
    FilterService.prototype.clearFilterByColumnId = function (event, columnId) {
        // get current column filter before clearing, this allow us to know if the filter was empty prior to calling the clear filter
        var currentColumnFilters = Object.keys(this._columnFilters);
        var currentColFilter;
        if (Array.isArray(currentColumnFilters)) {
            currentColFilter = currentColumnFilters.find(function (name) { return name === columnId; });
        }
        // find the filter object and call its clear method with true (the argument tells the method it was called by a clear filter)
        var colFilter = this._filtersMetadata.find(function (filter) { return filter.columnDef.id === columnId; });
        if (colFilter && colFilter.clear) {
            colFilter.clear(true);
        }
        var emitter = EmitterType.local;
        var isBackendApi = this._gridOptions && this._gridOptions.backendServiceApi || false;
        // when using a backend service, we need to manually trigger a filter change but only if the filter was previously filled
        if (isBackendApi) {
            emitter = EmitterType.remote;
            if (currentColFilter) {
                this.onBackendFilterChange(event, { grid: this._grid, columnFilters: this._columnFilters });
            }
        }
        // emit an event when filter is cleared
        this.emitFilterChanged(emitter);
    };
    /** Clear the search filters (below the column titles) */
    FilterService.prototype.clearFilters = function (triggerChange) {
        var _this = this;
        if (triggerChange === void 0) { triggerChange = true; }
        this._filtersMetadata.forEach(function (filter) {
            if (filter && filter.clear) {
                // clear element but don't trigger individual clear change,
                // we'll do 1 trigger for all filters at once afterward
                filter.clear(false);
            }
        });
        // also reset the columnFilters object and remove any filters from the object
        this.resetColumnFilters();
        // we also need to refresh the dataView and optionally the grid (it's optional since we use DataView)
        if (this._dataView && this._grid) {
            this._dataView.refresh();
            this._grid.invalidate();
        }
        // when using backend service, we need to query only once so it's better to do it here
        var backendApi = this._gridOptions && this._gridOptions.backendServiceApi;
        if (backendApi && triggerChange) {
            var callbackArgs_1 = { clearFilterTriggered: true, shouldTriggerQuery: triggerChange, grid: this._grid, columnFilters: this._columnFilters };
            var queryResponse = backendApi.service.processOnFilterChanged(undefined, callbackArgs_1);
            if (queryResponse instanceof Promise && queryResponse.then) {
                // @deprecated, processOnFilterChanged in the future should be returned as a query string NOT as a Promise
                console.warn("[Angular-Slickgrid] please note that the \"processOnFilterChanged\" from your Backend Service, should now return a string instead of a Promise.\n          Returning a Promise will be deprecated in the future.");
                queryResponse.then(function (query) {
                    var totalItems = _this._gridOptions && _this._gridOptions.pagination && _this._gridOptions.pagination.totalItems;
                    executeBackendCallback(backendApi, query, callbackArgs_1, new Date(), totalItems, _this.emitFilterChanged.bind(_this));
                });
            }
            else {
                var query = queryResponse;
                var totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems;
                executeBackendCallback(backendApi, query, callbackArgs_1, new Date(), totalItems, this.emitFilterChanged.bind(this));
            }
        }
        // emit an event when filters are all cleared
        if (triggerChange) {
            this.onFilterCleared.next(true);
        }
    };
    /** Local Grid Filter search */
    FilterService.prototype.customLocalFilter = function (item, args) {
        var e_1, _a;
        var dataView = args && args.dataView;
        var grid = args && args.grid;
        var isGridWithTreeData = this._gridOptions && this._gridOptions.enableTreeData || false;
        var columnFilters = args && args.columnFilters || {};
        var treeDataOptions;
        // when the column is a Tree Data structure and the parent is collapsed, we won't go further and just continue with next row
        // so we always run this check even when there are no filter search, the reason is because the user might click on the expand/collapse
        if (isGridWithTreeData && this._gridOptions && this._gridOptions.treeDataOptions) {
            treeDataOptions = this._gridOptions.treeDataOptions;
            var collapsedPropName = treeDataOptions.collapsedPropName || '__collapsed';
            var parentPropName = treeDataOptions.parentPropName || '__parentId';
            var dataViewIdIdentifier = this._gridOptions.datasetIdPropertyName || 'id';
            if (item[parentPropName] !== null) {
                var parent_1 = this._dataView.getItemById(item[parentPropName]);
                while (parent_1) {
                    if (parent_1[collapsedPropName]) {
                        return false; // don't display any row that have their parent collapsed
                    }
                    parent_1 = this._dataView.getItemById(parent_1[parentPropName]);
                }
            }
            // filter out any row items that aren't part of our pre-processed "preFilterTreeData()" result
            if (Array.isArray(this._tmpPreFilteredData)) {
                return this._tmpPreFilteredData.includes(item[dataViewIdIdentifier]); // return true when found, false otherwise
            }
        }
        else {
            if (typeof columnFilters === 'object') {
                try {
                    for (var _b = tslib_1.__values(Object.keys(columnFilters)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var columnId = _c.value;
                        var columnFilter = columnFilters[columnId];
                        var conditionOptions = this.getFilterConditionOptionsOrBoolean(item, columnFilter, columnId, grid, dataView);
                        if (typeof conditionOptions === 'boolean') {
                            return conditionOptions;
                        }
                        if (!FilterConditions.executeMappedCondition(conditionOptions)) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        // if it reaches here, that means the row is valid and passed all filter
        return true;
    };
    FilterService.prototype.getFilterConditionOptionsOrBoolean = function (item, columnFilter, columnId, grid, dataView) {
        var columnIndex = grid.getColumnIndex(columnId);
        var columnDef = grid.getColumns()[columnIndex];
        // it might be a hidden column, if so it won't be part of the getColumns (because it we hide a column via setColumns)
        // when that happens we can try to get the column definition from all defined columns
        if (!columnDef && this.sharedService && Array.isArray(this.sharedService.allColumns)) {
            columnIndex = this.sharedService.allColumns.findIndex(function (col) { return col.field === columnId; });
            columnDef = this.sharedService.allColumns[columnIndex];
        }
        // if we still don't have a column definition then we should return then row anyway (true)
        if (!columnDef) {
            return true;
        }
        // Row Detail View plugin, if the row is padding we just get the value we're filtering on from it's parent
        if (this._gridOptions.enableRowDetailView) {
            var metadataPrefix = this._gridOptions.rowDetailView && this._gridOptions.rowDetailView.keyPrefix || '__';
            if (item[metadataPrefix + "isPadding"] && item[metadataPrefix + "parent"]) {
                item = item[metadataPrefix + "parent"];
            }
        }
        var dataKey = columnDef.dataKey;
        var queryFieldName = (columnDef.filter && columnDef.filter.queryField) || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || '';
        if (typeof columnDef.queryFieldNameGetterFn === 'function') {
            queryFieldName = columnDef.queryFieldNameGetterFn(item);
        }
        var fieldType = (columnDef.filter && columnDef.filter.type) || columnDef.type || FieldType.string;
        var filterSearchType = (columnDef.filterSearchType) ? columnDef.filterSearchType : null;
        var cellValue = item[queryFieldName];
        // when item is a complex object (dot "." notation), we need to filter the value contained in the object tree
        if (queryFieldName && queryFieldName.indexOf('.') >= 0) {
            cellValue = getDescendantProperty(item, queryFieldName);
        }
        // if we find searchTerms use them but make a deep copy so that we don't affect original array
        // we might have to overwrite the value(s) locally that are returned
        // e.g: we don't want to operator within the search value, since it will fail filter condition check trigger afterward
        var searchValues = (columnFilter && columnFilter.searchTerms) ? $.extend(true, [], columnFilter.searchTerms) : [];
        var fieldSearchValue = (Array.isArray(searchValues) && searchValues.length === 1) ? searchValues[0] : '';
        var matches = null;
        if (fieldType !== FieldType.object) {
            fieldSearchValue = '' + fieldSearchValue; // make sure it's a string
            matches = fieldSearchValue.match(/^([<>!=\*]{0,2})(.*[^<>!=\*])([\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)
        }
        var operator = columnFilter.operator || ((matches) ? matches[1] : '');
        var searchTerm = (!!matches) ? matches[2] : '';
        var lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');
        if (searchValues && searchValues.length > 1) {
            fieldSearchValue = searchValues.join(',');
        }
        else if (typeof fieldSearchValue === 'string') {
            // escaping the search value
            fieldSearchValue = fieldSearchValue.replace("'", "''"); // escape single quotes by doubling them
            if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {
                operator = (operator === '*' || operator === '*z') ? OperatorType.endsWith : OperatorType.startsWith;
            }
        }
        // no need to query if search value is empty or if the search value is in fact equal to the operator
        if (searchTerm === '' && (!searchValues || (Array.isArray(searchValues) && (searchValues.length === 0 || searchValues.length === 1 && operator === searchValues[0])))) {
            return true;
        }
        // if search value has a regex match we will only keep the value without the operator
        // in this case we need to overwrite the returned search values to truncate operator from the string search
        if (Array.isArray(matches) && matches.length >= 1 && (Array.isArray(searchValues) && searchValues.length === 1)) {
            searchValues[0] = searchTerm;
        }
        // filter search terms should always be string type (even though we permit the end user to input numbers)
        // so make sure each term are strings, if user has some default search terms, we will cast them to string
        if (searchValues && Array.isArray(searchValues) && fieldType !== FieldType.object) {
            for (var k = 0, ln = searchValues.length; k < ln; k++) {
                // make sure all search terms are strings
                searchValues[k] = ((searchValues[k] === undefined || searchValues[k] === null) ? '' : searchValues[k]) + '';
            }
        }
        // when using localization (i18n), we should use the formatter output to search as the new cell value
        if (columnDef && columnDef.params && columnDef.params.useFormatterOuputToFilter) {
            var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
            var rowIndex = (dataView && typeof dataView.getIdxById === 'function') ? dataView.getIdxById(item[idPropName]) : 0;
            cellValue = (columnDef && typeof columnDef.formatter === 'function') ? columnDef.formatter(rowIndex, columnIndex, cellValue, columnDef, item, this._grid) : '';
        }
        // make sure cell value is always a string
        if (typeof cellValue === 'number') {
            cellValue = cellValue.toString();
        }
        var currentCellValue = cellValue;
        return {
            dataKey: dataKey,
            fieldType: fieldType,
            searchTerms: searchValues,
            cellValue: currentCellValue,
            operator: operator,
            cellValueLastChar: lastValueChar,
            filterSearchType: filterSearchType
        };
    };
    /**
     * When using Tree Data, we need to prefilter (search) the data prior, the result will be an array of IDs which are the node(s) and their parent nodes when necessary.
     * This will then be passed to the DataView setFilter(customLocalFilter), which will itself loop through the list of IDs and display/hide the row if found that array of IDs
     * We do this in 2 steps so that we can still use the DataSet setFilter()
     */
    FilterService.prototype.preFilterTreeData = function (inputArray, columnFilters) {
        var e_2, _a;
        var treeDataOptions = this._gridOptions && this._gridOptions.treeDataOptions;
        var parentPropName = treeDataOptions && treeDataOptions.parentPropName || '__parentId';
        var dataViewIdIdentifier = this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id';
        var treeObj = {};
        var filteredChildrenAndParents = [];
        if (Array.isArray(inputArray)) {
            for (var i = 0; i < inputArray.length; i++) {
                treeObj[inputArray[i][dataViewIdIdentifier]] = inputArray[i];
                // as the filtered data is then used again as each subsequent letter
                // we need to delete the .__used property, otherwise the logic below
                // in the while loop (which checks for parents) doesn't work:
                delete treeObj[inputArray[i][dataViewIdIdentifier]].__used;
            }
            for (var i = 0; i < inputArray.length; i++) {
                var item = inputArray[i];
                var matchFilter = true; // valid until proven otherwise
                try {
                    // loop through all column filters and execute filter condition(s)
                    for (var _b = (e_2 = void 0, tslib_1.__values(Object.keys(columnFilters))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var columnId = _c.value;
                        var columnFilter = columnFilters[columnId];
                        var conditionOptionResult = this.getFilterConditionOptionsOrBoolean(item, columnFilter, columnId, this._grid, this._dataView);
                        if (conditionOptionResult) {
                            var conditionResult = (typeof conditionOptionResult === 'boolean') ? conditionOptionResult : FilterConditions.executeMappedCondition(conditionOptionResult);
                            if (conditionResult) {
                                // don't return true since we still need to check other keys in columnFilters
                                continue;
                            }
                        }
                        matchFilter = false;
                        continue;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                // build an array from the matched filters, anything valid from filter condition
                // will be pushed to the filteredChildrenAndParents array
                if (matchFilter) {
                    var len = filteredChildrenAndParents.length;
                    // add child (id):
                    filteredChildrenAndParents.splice(len, 0, item[dataViewIdIdentifier]);
                    var parent_2 = treeObj[item[parentPropName]] || false;
                    while (parent_2) {
                        // only add parent (id) if not already added:
                        parent_2.__used || filteredChildrenAndParents.splice(len, 0, parent_2[dataViewIdIdentifier]);
                        // mark each parent as used to not use them again later:
                        treeObj[parent_2[dataViewIdIdentifier]].__used = true;
                        // try to find parent of the current parent, if exists:
                        parent_2 = treeObj[parent_2[parentPropName]] || false;
                    }
                }
            }
        }
        return filteredChildrenAndParents;
    };
    FilterService.prototype.getColumnFilters = function () {
        return this._columnFilters;
    };
    FilterService.prototype.getFiltersMetadata = function () {
        return this._filtersMetadata;
    };
    FilterService.prototype.getCurrentLocalFilters = function () {
        var e_3, _a;
        var currentFilters = [];
        if (this._columnFilters) {
            try {
                for (var _b = tslib_1.__values(Object.keys(this._columnFilters)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var colId = _c.value;
                    var columnFilter = this._columnFilters[colId];
                    var filter = { columnId: colId || '' };
                    if (columnFilter && columnFilter.searchTerms) {
                        filter.searchTerms = columnFilter.searchTerms;
                    }
                    if (columnFilter.operator) {
                        filter.operator = columnFilter.operator;
                    }
                    if (Array.isArray(filter.searchTerms) && filter.searchTerms.length > 0 && filter.searchTerms[0] !== '') {
                        currentFilters.push(filter);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return currentFilters;
    };
    /**
     * A simple function that is binded to the subscriber and emit a change when the filter is called.
     * Other services, like Pagination, can then subscribe to it.
     * @param caller
     */
    FilterService.prototype.emitFilterChanged = function (caller) {
        if (caller === EmitterType.remote && this._gridOptions && this._gridOptions.backendServiceApi) {
            var currentFilters = [];
            var backendService = this._gridOptions.backendServiceApi.service;
            if (backendService && backendService.getCurrentFilters) {
                currentFilters = backendService.getCurrentFilters();
            }
            this.onFilterChanged.next(currentFilters);
        }
        else if (caller === EmitterType.local) {
            this.onFilterChanged.next(this.getCurrentLocalFilters());
        }
    };
    FilterService.prototype.onBackendFilterChange = function (event, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var backendApi, startTime, debounceTypingDelay, isTriggeredByClearFilter, eventType, eventKeyCode, query, totalItems;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!args || !args.grid) {
                            throw new Error('Something went wrong when trying to bind the "onBackendFilterChange(event, args)" function, it seems that "args" is not populated correctly');
                        }
                        backendApi = this._gridOptions.backendServiceApi;
                        if (!backendApi || !backendApi.process || !backendApi.service) {
                            throw new Error("BackendServiceApi requires at least a \"process\" function and a \"service\" defined");
                        }
                        startTime = new Date();
                        // run a preProcess callback if defined
                        if (backendApi.preProcess) {
                            backendApi.preProcess();
                        }
                        debounceTypingDelay = 0;
                        isTriggeredByClearFilter = args && args.clearFilterTriggered;
                        eventType = event && event.type;
                        eventKeyCode = event && event.keyCode;
                        if (!isTriggeredByClearFilter && eventKeyCode !== KeyCode.ENTER && (eventType === 'input' || eventType === 'keyup' || eventType === 'keydown')) {
                            debounceTypingDelay = backendApi.hasOwnProperty('filterTypingDebounce') ? backendApi.filterTypingDebounce : DEFAULT_FILTER_TYPING_DEBOUNCE;
                        }
                        if (!(args && args.shouldTriggerQuery)) return [3 /*break*/, 3];
                        // call the service to get a query back
                        // @deprecated TODO: remove async/await on next major change, refer to processOnFilterChanged in BackendService interface (with @deprecated)
                        clearTimeout(timer);
                        if (!(debounceTypingDelay > 0)) return [3 /*break*/, 1];
                        timer = setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var query, totalItems;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, backendApi.service.processOnFilterChanged(event, args)];
                                    case 1:
                                        query = _a.sent();
                                        totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems;
                                        executeBackendCallback(backendApi, query, args, startTime, totalItems, this.emitFilterChanged.bind(this), this.httpCancelRequests$);
                                        return [2 /*return*/];
                                }
                            });
                        }); }, debounceTypingDelay);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, backendApi.service.processOnFilterChanged(event, args)];
                    case 2:
                        query = _a.sent();
                        totalItems = this._gridOptions && this._gridOptions.pagination && this._gridOptions.pagination.totalItems;
                        executeBackendCallback(backendApi, query, args, startTime, totalItems, this.emitFilterChanged.bind(this), this.httpCancelRequests$);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)
     * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)
     * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.
     * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)
     */
    FilterService.prototype.populateColumnFilterSearchTermPresets = function (filters) {
        if (Array.isArray(filters) && filters.length > 0) {
            this._columnDefinitions.forEach(function (columnDef) {
                // clear any columnDef searchTerms before applying Presets
                if (columnDef.filter && columnDef.filter.searchTerms) {
                    delete columnDef.filter.searchTerms;
                }
                // from each presets, we will find the associated columnDef and apply the preset searchTerms & operator if there is
                var columnPreset = filters.find(function (presetFilter) { return presetFilter.columnId === columnDef.id; });
                if (columnPreset && columnPreset.searchTerms && Array.isArray(columnPreset.searchTerms)) {
                    columnDef.filter = columnDef.filter || {};
                    columnDef.filter.operator = columnPreset.operator || columnDef.filter.operator || '';
                    columnDef.filter.searchTerms = columnPreset.searchTerms;
                }
            });
            // when we have a Filter Presets on a Tree Data View grid, we need to call the pre-filtering of tree data
            this.refreshTreeDataFilters();
        }
        return this._columnDefinitions;
    };
    /**
     * when we have a Filter Presets on a Tree Data View grid, we need to call the pre-filtering of tree data
     * we need to do this because Tree Data is the only type of grid that requires a pre-filter (preFilterTreeData) to be executed before the final filtering
     * @param filters
     */
    FilterService.prototype.refreshTreeDataFilters = function () {
        if (this._dataView && this._dataView.getItems && this._gridOptions && this._gridOptions.enableTreeData) {
            this._tmpPreFilteredData = this.preFilterTreeData(this._dataView.getItems(), this._columnFilters);
            this._dataView.refresh(); // and finally this refresh() is what triggers a DataView filtering check
        }
    };
    /**
     * Toggle the Filter Functionality
     * @param {boolean} isFilterDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True
     * @param {boolean} clearFiltersWhenDisabled - when disabling the Filter, do we also want to clear all the filters as well? Defaults to True
     */
    FilterService.prototype.disableFilterFunctionality = function (isFilterDisabled, clearFiltersWhenDisabled) {
        if (isFilterDisabled === void 0) { isFilterDisabled = true; }
        if (clearFiltersWhenDisabled === void 0) { clearFiltersWhenDisabled = true; }
        var prevShowFilterFlag = this._gridOptions.enableFiltering;
        var newShowFilterFlag = !prevShowFilterFlag;
        if (newShowFilterFlag !== isFilterDisabled) {
            if (clearFiltersWhenDisabled && isFilterDisabled) {
                this.clearFilters();
            }
            this.disableAllFilteringCommands(isFilterDisabled);
            this._grid.setOptions({ enableFiltering: newShowFilterFlag }, false, true);
            this._grid.setHeaderRowVisibility(newShowFilterFlag);
            this._gridOptions.enableFiltering = !isFilterDisabled;
            this.sharedService.gridOptions = this._gridOptions;
            // when displaying header row, we'll call "setColumns" which in terms will recreate the header row filters
            this._grid.setColumns(this.sharedService.columnDefinitions);
        }
    };
    /**
     * Toggle the Filter Functionality (show/hide the header row filter bar as well)
     * @param {boolean} clearFiltersWhenDisabled - when disabling the filters, do we want to clear the filters before hiding the filters? Defaults to True
     */
    FilterService.prototype.toggleFilterFunctionality = function (clearFiltersWhenDisabled) {
        if (clearFiltersWhenDisabled === void 0) { clearFiltersWhenDisabled = true; }
        var prevShowFilterFlag = this._gridOptions.enableFiltering;
        this.disableFilterFunctionality(prevShowFilterFlag, clearFiltersWhenDisabled);
    };
    /**
     * Toggle the Header Row filter bar (this does not disable the Filtering itself, you can use "toggleFilterFunctionality()" instead, however this will reset any column positions)
     */
    FilterService.prototype.toggleHeaderFilterRow = function () {
        var showHeaderRow = this._gridOptions && this._gridOptions.showHeaderRow || false;
        showHeaderRow = !showHeaderRow; // inverse show header flag
        this._grid.setHeaderRowVisibility(showHeaderRow);
        // when displaying header row, we'll call "setColumns" which in terms will recreate the header row filters
        if (showHeaderRow === true) {
            this._grid.setColumns(this.sharedService.columnDefinitions);
        }
    };
    /**
     * Set the sort icons in the UI (ONLY the icons, it does not do any sorting)
     * The column sort icons are not necessarily inter-connected to the sorting functionality itself,
     * you can change the sorting icons separately by passing an array of columnId/sortAsc and that will change ONLY the icons
     * @param sortColumns
     */
    FilterService.prototype.setSortColumnIcons = function (sortColumns) {
        if (this._grid && Array.isArray(sortColumns)) {
            this._grid.setSortColumns(sortColumns);
        }
    };
    /**
     * Update Filters dynamically just by providing an array of filter(s).
     * You can also choose emit (default) a Filter Changed event that will be picked by the Grid State Service.
     *
     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,
     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.
     * @param filters array
     * @param triggerEvent defaults to True, do we want to emit a filter changed event?
     * @param triggerBackendQuery defaults to True, which will query the backend.
     */
    FilterService.prototype.updateFilters = function (filters, emitChangedEvent, triggerBackendQuery, triggerOnSearchChangeEvent) {
        var _this = this;
        if (emitChangedEvent === void 0) { emitChangedEvent = true; }
        if (triggerBackendQuery === void 0) { triggerBackendQuery = true; }
        if (triggerOnSearchChangeEvent === void 0) { triggerOnSearchChangeEvent = false; }
        if (!this._filtersMetadata || this._filtersMetadata.length === 0 || !this._gridOptions || !this._gridOptions.enableFiltering) {
            throw new Error('[Angular-Slickgrid] in order to use "updateFilters" method, you need to have Filterable Columns defined in your grid and "enableFiltering" set in your Grid Options');
        }
        if (Array.isArray(filters)) {
            // start by clearing all filters (without triggering an event) before applying any new filters
            this.clearFilters(false);
            // pre-fill (value + operator) and render all filters in the DOM
            // loop through each Filters provided (which has a columnId property)
            // then find their associated Filter instances that were originally created in the grid
            filters.forEach(function (newFilter) {
                var uiFilter = _this._filtersMetadata.find(function (filter) { return newFilter.columnId === filter.columnDef.id; });
                if (newFilter && uiFilter) {
                    var newOperator = newFilter.operator || uiFilter.defaultOperator;
                    _this.updateColumnFilters(newFilter.searchTerms, uiFilter.columnDef, newOperator);
                    uiFilter.setValues(newFilter.searchTerms, newOperator);
                    if (triggerOnSearchChangeEvent) {
                        _this.callbackSearchEvent(null, { columnDef: uiFilter.columnDef, operator: newOperator, searchTerms: newFilter.searchTerms, shouldTriggerQuery: true });
                    }
                }
            });
            var backendApi = this._gridOptions && this._gridOptions.backendServiceApi;
            // refresh the DataView and trigger an event after all filters were updated and rendered
            this._dataView.refresh();
            if (backendApi) {
                var backendApiService = backendApi && backendApi.service;
                if (backendApiService) {
                    backendApiService.updateFilters(filters, true);
                    if (triggerBackendQuery) {
                        refreshBackendDataset(this._gridOptions);
                    }
                }
            }
            if (emitChangedEvent) {
                var emitterType = backendApi ? EmitterType.remote : EmitterType.local;
                this.emitFilterChanged(emitterType);
            }
        }
    };
    // --
    // private functions
    // -------------------
    /** Add all created filters (from their template) to the header row section area */
    FilterService.prototype.addFilterTemplateToHeaderRow = function (_event, args, isFilterFirstRender) {
        if (isFilterFirstRender === void 0) { isFilterFirstRender = true; }
        var columnDef = args.column;
        var columnId = columnDef && columnDef.id || '';
        if (columnDef && columnId !== 'selector' && columnDef.filterable) {
            var searchTerms = void 0;
            var operator = void 0;
            var newFilter_1 = this.filterFactory.createFilter(args.column.filter);
            operator = (columnDef && columnDef.filter && columnDef.filter.operator) || (newFilter_1 && newFilter_1.operator) || undefined;
            if (this._columnFilters[columnDef.id]) {
                searchTerms = this._columnFilters[columnDef.id].searchTerms || undefined;
                operator = this._columnFilters[columnDef.id].operator || undefined;
            }
            else if (columnDef.filter) {
                // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)
                // because of that we need to first get searchTerm(s) from the columnFilters (that is what the user last typed in a filter search input)
                searchTerms = columnDef.filter.searchTerms || undefined;
                this.updateColumnFilters(searchTerms, columnDef, operator);
            }
            var filterArguments = {
                grid: this._grid,
                operator: operator,
                searchTerms: searchTerms,
                columnDef: columnDef,
                callback: this.callbackSearchEvent.bind(this)
            };
            if (newFilter_1) {
                newFilter_1.init(filterArguments, isFilterFirstRender);
                var filterExistIndex = this._filtersMetadata.findIndex(function (filter) { return newFilter_1.columnDef.id === filter.columnDef.id; });
                // add to the filters arrays or replace it when found
                if (filterExistIndex === -1) {
                    this._filtersMetadata.push(newFilter_1);
                }
                else {
                    this._filtersMetadata[filterExistIndex] = newFilter_1;
                }
                // when hiding/showing (with Column Picker or Grid Menu), it will try to re-create yet again the filters (since SlickGrid does a re-render)
                // we need to also set again the values in the DOM elements if the values were set by a searchTerm(s)
                if (searchTerms && newFilter_1.setValues) {
                    newFilter_1.setValues(searchTerms);
                }
            }
        }
    };
    /**
     * Callback method that is called and executed by the individual Filter (DOM element),
     * for example when user type in a word to search (which uses InputFilter), this Filter will execute the callback from an input change event.
     */
    FilterService.prototype.callbackSearchEvent = function (event, args) {
        if (args) {
            var searchTerm = ((event && event.target) ? event.target.value : undefined);
            var searchTerms = (args.searchTerms && Array.isArray(args.searchTerms)) ? args.searchTerms : (searchTerm ? [searchTerm] : undefined);
            var columnDef = args.columnDef || null;
            var columnId = columnDef && columnDef.id || '';
            var operator = args.operator || undefined;
            var hasSearchTerms = searchTerms && Array.isArray(searchTerms);
            var termsCount = hasSearchTerms && searchTerms && searchTerms.length;
            var oldColumnFilters = tslib_1.__assign({}, this._columnFilters);
            if (columnDef && columnId) {
                if (!hasSearchTerms || termsCount === 0 || (termsCount === 1 && Array.isArray(searchTerms) && searchTerms[0] === '')) {
                    // delete the property from the columnFilters when it becomes empty
                    // without doing this, it would leave an incorrect state of the previous column filters when filtering on another column
                    delete this._columnFilters[columnId];
                }
                else {
                    var colId = '' + columnId;
                    var colFilter = {
                        columnId: colId,
                        columnDef: columnDef,
                        searchTerms: searchTerms,
                    };
                    if (operator) {
                        colFilter.operator = operator;
                    }
                    this._columnFilters[colId] = colFilter;
                }
            }
            // event might have been created as a CustomEvent (e.g. CompoundDateFilter), without being a valid Slick.EventData,
            // if so we will create a new Slick.EventData and merge it with that CustomEvent to avoid having SlickGrid errors
            var eventData = (event && typeof event.isPropagationStopped !== 'function') ? $.extend({}, new Slick.EventData(), event) : event;
            // trigger an event only if Filters changed or if ENTER key was pressed
            var eventKey = event && event.key;
            var eventKeyCode = event && event.keyCode;
            if (this._onSearchChange && (eventKey === 'Enter' || eventKeyCode === KeyCode.ENTER || !isequal(oldColumnFilters, this._columnFilters))) {
                this._onSearchChange.notify({
                    clearFilterTriggered: args.clearFilterTriggered,
                    shouldTriggerQuery: args.shouldTriggerQuery,
                    columnId: columnId,
                    columnDef: columnDef,
                    columnFilters: this._columnFilters,
                    operator: operator,
                    searchTerms: searchTerms,
                    grid: this._grid
                }, eventData);
            }
        }
    };
    /**
     * Loop through all column definitions and do the following thing
     * 1. loop through each Header Menu commands and change the "hidden" commands to show/hide depending if it's enabled/disabled
     * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.
     * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)
     * @param {boolean} isDisabling - are we disabling the filter functionality? Defaults to true
     */
    FilterService.prototype.disableAllFilteringCommands = function (isDisabling) {
        if (isDisabling === void 0) { isDisabling = true; }
        var columnDefinitions = this._grid.getColumns();
        // loop through column definition to hide/show header menu commands
        columnDefinitions.forEach(function (col) {
            if (col && col.header && col.header.menu) {
                col.header.menu.items.forEach(function (menuItem) {
                    if (menuItem && typeof menuItem !== 'string') {
                        var menuCommand = menuItem.command;
                        if (menuCommand === 'clear-filter') {
                            menuItem.hidden = isDisabling;
                        }
                    }
                });
            }
        });
        // loop through column definition to hide/show grid menu commands
        if (this._gridOptions && this._gridOptions.gridMenu && this._gridOptions.gridMenu.customItems) {
            this._gridOptions.gridMenu.customItems.forEach(function (menuItem) {
                if (menuItem && typeof menuItem !== 'string') {
                    var menuCommand = menuItem.command;
                    if (menuCommand === 'clear-filter' || menuCommand === 'toggle-filter') {
                        menuItem.hidden = isDisabling;
                    }
                }
            });
        }
        return columnDefinitions;
    };
    FilterService.prototype.updateColumnFilters = function (searchTerms, columnDef, operator) {
        if (searchTerms && columnDef) {
            this._columnFilters[columnDef.id] = {
                columnId: columnDef.id,
                columnDef: columnDef,
                searchTerms: searchTerms,
                operator: operator
            };
        }
    };
    FilterService.ctorParameters = function () { return [
        { type: FilterFactory },
        { type: SharedService }
    ]; };
FilterService.Éµfac = function FilterService_Factory(t) { return new (t || FilterService)(Éµngcc0.ÉµÉµinject(FilterFactory), Éµngcc0.ÉµÉµinject(SharedService)); };
FilterService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: FilterService, factory: function (t) { return FilterService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(FilterService, [{
        type: Injectable
    }], function () { return [{ type: FilterFactory }, { type: SharedService }]; }, null); })();
    return FilterService;
}());
export { FilterService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,