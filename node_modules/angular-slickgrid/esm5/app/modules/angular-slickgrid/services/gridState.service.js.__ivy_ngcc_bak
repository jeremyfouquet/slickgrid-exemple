import * as tslib_1 from "tslib";
import * as isequal_ from 'lodash.isequal';
var isequal = isequal_; // patch to fix rollup to work
import { ExtensionName, GridStateType, } from './../models/index';
import { ExtensionService } from './extension.service';
import { FilterService } from './filter.service';
import { SortService } from './sort.service';
import { Subject } from 'rxjs';
import { unsubscribeAllObservables } from './utilities';
import { SharedService } from './shared.service';
import { Injectable } from '@angular/core';
var GridStateService = /** @class */ (function () {
    function GridStateService(extensionService, filterService, sharedService, sortService) {
        this.extensionService = extensionService;
        this.filterService = filterService;
        this.sharedService = sharedService;
        this.sortService = sortService;
        this._columns = [];
        this._currentColumns = [];
        this._subscriptions = [];
        this._selectedRowDataContextIds = []; // used with row selection
        this._selectedFilteredRowDataContextIds = []; // used with row selection
        this._wasRecheckedAfterPageChange = true; // used with row selection & pagination
        this.onGridStateChanged = new Subject();
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(GridStateService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridStateService.prototype, "datasetIdPropName", {
        get: function () {
            return this._gridOptions.datasetIdPropertyName || 'id';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridStateService.prototype, "selectedRowDataContextIds", {
        /** Getter of the selected data context object IDs */
        get: function () {
            return this._selectedRowDataContextIds;
        },
        /** Setter of the selected data context object IDs */
        set: function (dataContextIds) {
            this._selectedRowDataContextIds = dataContextIds;
            // since this is coming from a preset, we also need to update the filtered IDs
            this._selectedFilteredRowDataContextIds = dataContextIds;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the Grid State Service
     * @param grid
     */
    GridStateService.prototype.init = function (grid, dataView) {
        this._grid = grid;
        this._dataView = dataView;
        this.subscribeToAllGridChanges(grid);
    };
    /** Dispose of all the SlickGrid & Angular subscriptions */
    GridStateService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        // also unsubscribe all Angular Subscriptions
        this._subscriptions = unsubscribeAllObservables(this._subscriptions);
        this._currentColumns = [];
        this._columns = [];
    };
    /**
     * Get the current grid state (filters/sorters/pagination)
     * @return grid state
     */
    GridStateService.prototype.getCurrentGridState = function (args) {
        var gridState = {
            columns: this.getCurrentColumns(),
            filters: this.getCurrentFilters(),
            sorters: this.getCurrentSorters(),
        };
        var currentPagination = this.getCurrentPagination();
        if (currentPagination) {
            gridState.pagination = currentPagination;
        }
        if (this.hasRowSelectionEnabled()) {
            var currentRowSelection = this.getCurrentRowSelections(args && args.requestRefreshRowFilteredRow);
            if (currentRowSelection) {
                gridState.rowSelection = currentRowSelection;
            }
        }
        return gridState;
    };
    /**
     * Get the Columns (and their state: visibility/position) that are currently applied in the grid
     * @return current columns
     */
    GridStateService.prototype.getColumns = function () {
        return this._columns;
    };
    /**
     * From an array of Grid Column Definitions, get the associated Current Columns
     * @param gridColumns
     */
    GridStateService.prototype.getAssociatedCurrentColumns = function (gridColumns) {
        var currentColumns = [];
        if (gridColumns && Array.isArray(gridColumns)) {
            gridColumns.forEach(function (column, index) {
                if (column && column.id) {
                    currentColumns.push({
                        columnId: column.id,
                        cssClass: column.cssClass || '',
                        headerCssClass: column.headerCssClass || '',
                        width: column.width || 0
                    });
                }
            });
        }
        this._currentColumns = currentColumns;
        return currentColumns;
    };
    /**
     * From an array of Current Columns, get the associated Grid Column Definitions
     * @param grid
     * @param currentColumns
     */
    GridStateService.prototype.getAssociatedGridColumns = function (grid, currentColumns) {
        var columns = [];
        var gridColumns = grid.getColumns();
        if (currentColumns && Array.isArray(currentColumns)) {
            currentColumns.forEach(function (currentColumn, index) {
                var gridColumn = gridColumns.find(function (c) { return c.id === currentColumn.columnId; });
                if (gridColumn && gridColumn.id) {
                    columns.push(tslib_1.__assign({}, gridColumn, { cssClass: currentColumn.cssClass, headerCssClass: currentColumn.headerCssClass, width: currentColumn.width }));
                }
            });
        }
        this._columns = columns;
        return columns;
    };
    /**
     * Get the Columns (and their states: visibility/position/width) that are currently applied in the grid
     * @return current columns
     */
    GridStateService.prototype.getCurrentColumns = function () {
        var currentColumns = [];
        if (this._currentColumns && Array.isArray(this._currentColumns) && this._currentColumns.length > 0) {
            currentColumns = this._currentColumns;
        }
        else {
            currentColumns = this.getAssociatedCurrentColumns(this._grid.getColumns());
        }
        return currentColumns;
    };
    /**
     * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid
     * @return current filters
     */
    GridStateService.prototype.getCurrentFilters = function () {
        if (this._gridOptions && this._gridOptions.backendServiceApi) {
            var backendService = this._gridOptions.backendServiceApi.service;
            if (backendService && backendService.getCurrentFilters) {
                return backendService.getCurrentFilters();
            }
        }
        else if (this.filterService && this.filterService.getCurrentLocalFilters) {
            return this.filterService.getCurrentLocalFilters();
        }
        return null;
    };
    /**
     * Get current Pagination (and its state, pageNumber, pageSize) that are currently applied in the grid
     * @return current pagination state
     */
    GridStateService.prototype.getCurrentPagination = function () {
        if (this._gridOptions.enablePagination) {
            if (this._gridOptions && this._gridOptions.backendServiceApi) {
                var backendService = this._gridOptions.backendServiceApi.service;
                if (backendService && backendService.getCurrentPagination) {
                    return backendService.getCurrentPagination();
                }
            }
            else {
                return this.sharedService.currentPagination;
            }
        }
        return null;
    };
    /**
     * Get the current Row Selections (and its state, gridRowIndexes, dataContextIds, filteredDataContextIds) that are currently applied in the grid
     * @return current row selection
     */
    GridStateService.prototype.getCurrentRowSelections = function (requestRefreshFilteredRow) {
        if (requestRefreshFilteredRow === void 0) { requestRefreshFilteredRow = true; }
        if (this._grid && this._gridOptions && this._dataView && this.hasRowSelectionEnabled()) {
            if (this._grid.getSelectedRows && this._dataView.mapRowsToIds) {
                var filteredDataContextIds = [];
                var gridRowIndexes = this._dataView.mapIdsToRows(this._selectedRowDataContextIds || []); // note that this will return only what is visible in current page
                var dataContextIds = this._selectedRowDataContextIds;
                // user might request to refresh the filtered selection dataset
                // typically always True, except when "reEvaluateRowSelectionAfterFilterChange" is called and we don't need to refresh the filtered dataset twice
                if (requestRefreshFilteredRow === true) {
                    filteredDataContextIds = this.refreshFilteredRowSelections();
                }
                filteredDataContextIds = this._selectedFilteredRowDataContextIds;
                return { gridRowIndexes: gridRowIndexes, dataContextIds: dataContextIds, filteredDataContextIds: filteredDataContextIds };
            }
        }
        return null;
    };
    /**
     * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid
     * @return current sorters
     */
    GridStateService.prototype.getCurrentSorters = function () {
        if (this._gridOptions && this._gridOptions.backendServiceApi) {
            var backendService = this._gridOptions.backendServiceApi.service;
            if (backendService && backendService.getCurrentSorters) {
                return backendService.getCurrentSorters();
            }
        }
        else if (this.sortService && this.sortService.getCurrentLocalSorters) {
            return this.sortService.getCurrentLocalSorters();
        }
        return null;
    };
    /** Check whether the row selection needs to be preserved */
    GridStateService.prototype.needToPreserveRowSelection = function () {
        var preservedRowSelection = false;
        if (this._gridOptions && this._gridOptions.dataView && this._gridOptions.dataView.hasOwnProperty('syncGridSelection')) {
            var syncGridSelection = this._gridOptions.dataView.syncGridSelection;
            if (typeof syncGridSelection === 'boolean') {
                preservedRowSelection = this._gridOptions.dataView.syncGridSelection;
            }
            else {
                preservedRowSelection = syncGridSelection.preserveHidden;
            }
            // if the result is True but the grid is using a Backend Service, we will do an extra flag check the reason is because it might have some unintended behaviors
            // with the BackendServiceApi because technically the data in the page changes the DataView on every page.
            if (preservedRowSelection && this._gridOptions.backendServiceApi && this._gridOptions.dataView.hasOwnProperty('syncGridSelectionWithBackendService')) {
                preservedRowSelection = this._gridOptions.dataView.syncGridSelectionWithBackendService;
            }
        }
        return preservedRowSelection;
    };
    GridStateService.prototype.resetColumns = function (columnDefinitions) {
        var columns = columnDefinitions || this._columns;
        var currentColumns = this.getAssociatedCurrentColumns(columns);
        this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: this.getCurrentGridState() });
    };
    /** if we use Row Selection or the Checkbox Selector, we need to reset any selection */
    GridStateService.prototype.resetRowSelectionWhenRequired = function () {
        if (!this.needToPreserveRowSelection() && (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector)) {
            // this also requires the Row Selection Model to be registered as well
            var rowSelectionExtension = this.extensionService && this.extensionService.getExtensionByName && this.extensionService.getExtensionByName(ExtensionName.rowSelection);
            if (rowSelectionExtension && rowSelectionExtension.instance) {
                this._grid.setSelectedRows([]);
            }
        }
    };
    /**
     * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,
     * when triggered, we will publish a Grid State Event with current Grid State
     */
    GridStateService.prototype.subscribeToAllGridChanges = function (grid) {
        var _this = this;
        // Subscribe to Event Emitter of Filter changed
        this._subscriptions.push(this.filterService.onFilterChanged.subscribe(function (currentFilters) {
            _this.resetRowSelectionWhenRequired();
            // trigger a Grid State filter change, however don't reevaluate the filtered row selections, we'll do that on the next Grid State change below
            _this.onGridStateChanged.next({ change: { newValues: currentFilters, type: GridStateType.filter }, gridState: _this.getCurrentGridState({ requestRefreshRowFilteredRow: !_this.hasRowSelectionEnabled() }) });
            // when Row Selection is enabled, we also need to re-evaluate the row selection with the leftover filtered dataset
            if (_this.hasRowSelectionEnabled()) {
                _this.reEvaluateRowSelectionAfterFilterChange();
            }
        }));
        // Subscribe to Event Emitter of Filter cleared
        this._subscriptions.push(this.filterService.onFilterCleared.subscribe(function () {
            _this.resetRowSelectionWhenRequired();
            _this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.filter }, gridState: _this.getCurrentGridState() });
        }));
        // Subscribe to Event Emitter of Sort changed
        this._subscriptions.push(this.sortService.onSortChanged.subscribe(function (currentSorters) {
            _this.resetRowSelectionWhenRequired();
            _this.onGridStateChanged.next({ change: { newValues: currentSorters, type: GridStateType.sorter }, gridState: _this.getCurrentGridState() });
        }));
        // Subscribe to Event Emitter of Sort cleared
        this._subscriptions.push(this.sortService.onSortCleared.subscribe(function () {
            _this.resetRowSelectionWhenRequired();
            _this.onGridStateChanged.next({ change: { newValues: [], type: GridStateType.sorter }, gridState: _this.getCurrentGridState() });
        }));
        // Subscribe to ColumnPicker and/or GridMenu for show/hide Columns visibility changes
        this.bindExtensionAddonEventToGridStateChange(ExtensionName.columnPicker, 'onColumnsChanged');
        this.bindExtensionAddonEventToGridStateChange(ExtensionName.gridMenu, 'onColumnsChanged');
        // subscribe to Column Resize & Reordering
        this.bindSlickGridColumnChangeEventToGridStateChange('onColumnsReordered', grid);
        this.bindSlickGridColumnChangeEventToGridStateChange('onColumnsResized', grid);
        // subscribe to Row Selection changes (when enabled)
        if (this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector) {
            this.bindSlickGridRowSelectionToGridStateChange();
        }
        // subscribe to HeaderMenu (hide column)
        this._subscriptions.push(this.sharedService.onHeaderMenuHideColumns.subscribe(function (visibleColumns) {
            var currentColumns = _this.getAssociatedCurrentColumns(visibleColumns);
            _this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: _this.getCurrentGridState() });
        }));
    };
    // --
    // private methods
    // ------------------
    /**
     * Bind a SlickGrid Extension Event to a Grid State change event
     * @param extension name
     * @param grid
     */
    GridStateService.prototype.bindExtensionAddonEventToGridStateChange = function (extensionName, eventName) {
        var _this = this;
        var extension = this.extensionService && this.extensionService.getExtensionByName && this.extensionService.getExtensionByName(extensionName);
        var slickEvent = extension && extension.instance && extension.instance[eventName];
        if (slickEvent && slickEvent.subscribe) {
            this._eventHandler.subscribe(slickEvent, function (e, args) {
                var columns = args && args.columns;
                var currentColumns = _this.getAssociatedCurrentColumns(columns);
                _this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: _this.getCurrentGridState() });
            });
        }
    };
    /**
     * Bind a Grid Event (of Column changes) to a Grid State change event
     * @param event name
     * @param grid
     */
    GridStateService.prototype.bindSlickGridColumnChangeEventToGridStateChange = function (eventName, grid) {
        var _this = this;
        var slickGridEvent = grid && grid[eventName];
        if (slickGridEvent && slickGridEvent.subscribe) {
            this._eventHandler.subscribe(slickGridEvent, function () {
                var columns = grid.getColumns();
                var currentColumns = _this.getAssociatedCurrentColumns(columns);
                _this.onGridStateChanged.next({ change: { newValues: currentColumns, type: GridStateType.columns }, gridState: _this.getCurrentGridState() });
            });
        }
    };
    /**
     * Bind a Grid Event of Row Selection change to a Grid State change event
     * For the row selection, we can't just use the getSelectedRows() since this will only return the visible rows shown in the UI which is not enough.
     * The process is much more complex, what we have to do instead is the following
     * 1. when changing a row selection, we'll add the new selection if it's not yet in the global array of selected IDs
     * 2. when deleting a row selection, we'll remove the selection from our global array of selected IDs (unless it came from a page change)
     * 3. if we use Pagination and we change page, we'll keep track with a flag (this flag will be used to skip any deletion when we're changing page)
     * 4. after the Page or DataView is changed or updated, we'll do an extra (and delayed) check to make sure that what we have in our global array of selected IDs is displayed on screen
     */
    GridStateService.prototype.bindSlickGridRowSelectionToGridStateChange = function () {
        var _this = this;
        if (this._grid && this._gridOptions && this._dataView) {
            this._eventHandler.subscribe(this._dataView.onBeforePagingInfoChanged, function () {
                _this._wasRecheckedAfterPageChange = false; // reset the page check flag, to skip deletions on page change (used in code below)
            });
            this._eventHandler.subscribe(this._dataView.onPagingInfoChanged, function () {
                // when user changes page, the selected row indexes might not show up
                // we can check to make sure it is but it has to be in a delay so it happens after the first "onSelectedRowsChanged" is triggered
                setTimeout(function () {
                    var shouldBeSelectedRowIndexes = _this._dataView.mapIdsToRows(_this._selectedRowDataContextIds || []);
                    var currentSelectedRowIndexes = _this._grid.getSelectedRows();
                    if (!isequal(shouldBeSelectedRowIndexes, currentSelectedRowIndexes)) {
                        _this._grid.setSelectedRows(shouldBeSelectedRowIndexes);
                    }
                });
            });
            this._eventHandler.subscribe(this._grid.onSelectedRowsChanged, function (e, args) {
                if (Array.isArray(args.rows) && Array.isArray(args.previousSelectedRows)) {
                    var newSelectedRows_1 = args.rows;
                    var prevSelectedRows_1 = args.previousSelectedRows;
                    var newSelectedAdditions = newSelectedRows_1.filter(function (i) { return prevSelectedRows_1.indexOf(i) < 0; });
                    var newSelectedDeletions = prevSelectedRows_1.filter(function (i) { return newSelectedRows_1.indexOf(i) < 0; });
                    // deletion might happen when user is changing page, if that is the case then skip the deletion since it's only a visual deletion (current page)
                    // if it's not a page change (when the flag is true), then proceed with the deletion in our global array of selected IDs
                    if (_this._wasRecheckedAfterPageChange && newSelectedDeletions.length > 0) {
                        var toDeleteDataIds = _this._dataView.mapRowsToIds(newSelectedDeletions) || [];
                        toDeleteDataIds.forEach(function (removeId) {
                            _this._selectedRowDataContextIds.splice(_this._selectedRowDataContextIds.indexOf(removeId), 1);
                        });
                    }
                    // if we have newly added selected row(s), let's update our global array of selected IDs
                    if (newSelectedAdditions.length > 0) {
                        var toAddDataIds = _this._dataView.mapRowsToIds(newSelectedAdditions) || [];
                        toAddDataIds.forEach(function (dataId) {
                            if (_this._selectedRowDataContextIds.indexOf(dataId) === -1) {
                                _this._selectedRowDataContextIds.push(dataId);
                            }
                        });
                    }
                    // we set this flag which will be used on the 2nd time the "onSelectedRowsChanged" event is called
                    // when it's the first time, we skip deletion and this is what this flag is for
                    _this._wasRecheckedAfterPageChange = true;
                    // form our full selected row IDs, let's make sure these indexes are selected in the grid, if not then let's call a reselect
                    // this could happen if the previous step was a page change
                    var shouldBeSelectedRowIndexes = _this._dataView.mapIdsToRows(_this._selectedRowDataContextIds || []);
                    var currentSelectedRowIndexes = _this._grid.getSelectedRows();
                    if (!isequal(shouldBeSelectedRowIndexes, currentSelectedRowIndexes)) {
                        _this._grid.setSelectedRows(shouldBeSelectedRowIndexes);
                    }
                    var filteredDataContextIds = _this.refreshFilteredRowSelections();
                    var newValues = { gridRowIndexes: _this._grid.getSelectedRows(), dataContextIds: _this._selectedRowDataContextIds, filteredDataContextIds: filteredDataContextIds };
                    _this.onGridStateChanged.next({ change: { newValues: newValues, type: GridStateType.rowSelection }, gridState: _this.getCurrentGridState() });
                }
            });
        }
    };
    /** Check wether the grid has the Row Selection enabled */
    GridStateService.prototype.hasRowSelectionEnabled = function () {
        var selectionModel = this._grid.getSelectionModel();
        var isRowSelectionEnabled = this._gridOptions.enableRowSelection || this._gridOptions.enableCheckboxSelector;
        return (isRowSelectionEnabled && selectionModel);
    };
    GridStateService.prototype.reEvaluateRowSelectionAfterFilterChange = function () {
        var currentSelectedRowIndexes = this._grid.getSelectedRows();
        var previousSelectedFilteredRowDataContextIds = this._selectedFilteredRowDataContextIds.slice();
        var filteredDataContextIds = this.refreshFilteredRowSelections();
        // when selection changed, we'll send a Grid State event with the selection changes
        if (!isequal(this._selectedFilteredRowDataContextIds, previousSelectedFilteredRowDataContextIds)) {
            var newValues = { gridRowIndexes: currentSelectedRowIndexes, dataContextIds: this._selectedRowDataContextIds, filteredDataContextIds: filteredDataContextIds };
            this.onGridStateChanged.next({ change: { newValues: newValues, type: GridStateType.rowSelection }, gridState: this.getCurrentGridState({ requestRefreshRowFilteredRow: false }) });
        }
    };
    /** When a Filter is triggered or when user request it, we will refresh the filtered selection array and return it */
    GridStateService.prototype.refreshFilteredRowSelections = function () {
        var _this = this;
        var tmpFilteredArray = [];
        var filteredDataset = this._dataView.getFilteredItems() || [];
        if (Array.isArray(this._selectedRowDataContextIds)) {
            var selectedFilteredRowDataContextIds = tslib_1.__spread(this._selectedRowDataContextIds); // take a fresh copy of all selections before filtering the row ids
            tmpFilteredArray = selectedFilteredRowDataContextIds.filter(function (selectedRowId) {
                return filteredDataset.findIndex(function (item) { return item[_this.datasetIdPropName] === selectedRowId; }) > -1;
            });
            this._selectedFilteredRowDataContextIds = tmpFilteredArray;
        }
        return tmpFilteredArray;
    };
    GridStateService.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: FilterService },
        { type: SharedService },
        { type: SortService }
    ]; };
    GridStateService = tslib_1.__decorate([
        Injectable()
    ], GridStateService);
    return GridStateService;
}());
export { GridStateService };
//# sourceMappingURL=data:application/json;base64,