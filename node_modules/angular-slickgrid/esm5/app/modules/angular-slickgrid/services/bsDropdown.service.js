import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AngularUtilService } from './angularUtil.service';
// Boostrap dropdown service
import * as ɵngcc0 from '@angular/core';
var BsDropDownService = /** @class */ (function () {
    function BsDropDownService(angularUtilService) {
        this.angularUtilService = angularUtilService;
    }
    Object.defineProperty(BsDropDownService.prototype, "domElement", {
        get: function () {
            return this._domElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropDownService.prototype, "domContainerElement", {
        get: function () {
            return this._domContainerElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsDropDownService.prototype, "gridViewport", {
        get: function () {
            return $('.slick-viewport');
        },
        enumerable: true,
        configurable: true
    });
    BsDropDownService.prototype.dispose = function () {
        if (this._domElement && this._domElement.remove) {
            this._domElement.remove();
        }
    };
    BsDropDownService.prototype.dropContainerShow = function () {
        if (this._domContainerElement && this._domContainerElement.show) {
            this._domContainerElement.show();
        }
    };
    BsDropDownService.prototype.render = function (dropdownParams) {
        var _this = this;
        return new Promise(function (resolve) {
            var component = dropdownParams.component, args = dropdownParams.args, parent = dropdownParams.parent, offsetTop = dropdownParams.offsetTop, offsetLeft = dropdownParams.offsetLeft, offsetDropupBottom = dropdownParams.offsetDropupBottom;
            var cell = args.cell;
            var row = args.row;
            _this._domContainerElement = $("#myDrop-r" + row + "-c" + cell);
            if (_this._domContainerElement) {
                // hide the dropdown we created as a formatter Component, we'll redisplay it later
                var cellPos_1 = _this._domContainerElement.offset();
                var componentOutput_1 = _this.angularUtilService.createAngularComponent(component);
                var componentInstance = componentOutput_1 && componentOutput_1.componentRef && componentOutput_1.componentRef.instance;
                if (componentInstance) {
                    var myDropId_1 = componentInstance.dropdownId || 'myDrop';
                    var dropDownToggleId_1 = componentInstance.dropDownToggleId || 'dropdownMenu1';
                    _this._domElement = $("#" + myDropId_1);
                    if (_this._domElement) {
                        // make sure to remove any previous Action dropdown elements, to avoid having multiple element of the same on top of each other
                        _this.dispose();
                        // assign the row data to the dropdown component instance
                        Object.assign(componentInstance, { parent: parent, row: args.row, dataContext: args.grid.getDataItem(args.row) });
                        // use a delay to make sure Angular ran at least a full cycle and make sure it finished rendering the Component before using it
                        setTimeout(function () {
                            // create a new dropdown element
                            _this._domElement = $(componentOutput_1.domElement);
                            var topPos = (cellPos_1 && cellPos_1.top || 0) + 30 + (offsetTop || 0);
                            var leftPos = (cellPos_1 && cellPos_1.left || 0) + (offsetLeft || 0);
                            _this._domElement.appendTo('body');
                            _this._domElement.css('position', 'absolute');
                            _this._domElement.css('top', topPos);
                            _this._domElement.css('left', leftPos);
                            $("#" + myDropId_1).addClass('open');
                            $("#" + dropDownToggleId_1).hide();
                            // check if it should drop Up or Down
                            var offset = 35;
                            var iElement = $('.dropdown-menu');
                            var iElementWrapper = iElement.parent();
                            var iElementWrapperOffset = iElementWrapper.offset() || {};
                            var iElementWrapperOffsetTop = iElementWrapperOffset.top || iElementWrapper && iElementWrapper.length > 0 && iElementWrapper[0].offsetTop;
                            var iElementHeight = iElement.height();
                            var windowHeight = window.innerHeight;
                            var shouldDropUp = (windowHeight - iElementHeight - offset) < iElementWrapperOffsetTop;
                            var menuMarginTop = '0px';
                            if (shouldDropUp) {
                                var offsetBottom = offsetDropupBottom || 0;
                                menuMarginTop = '-'.concat("" + (iElementHeight + offset + offsetBottom + 5), 'px');
                            }
                            _this._domElement.css({ 'margin-top': menuMarginTop });
                            // set dropdown margin left according to the document width
                            var parentOffset = iElementWrapperOffset.left;
                            var leftMargin = parentOffset - $(document).width();
                            _this._domElement.css({ 'margin-left': (_this._domElement.width() + leftMargin + 60) + 'px' });
                            try {
                                _this._domElement.dropdown('show'); // required for Bootstrap 4 only
                            }
                            catch (e) {
                                // Bootstrap 3 wil throw an error since that method doesn't exist, we can safely disregard it
                            }
                            _this._domElement.on('hidden.bs.dropdown', function () { return _this.dropContainerShow(); });
                            // hide dropdown menu on grid scroll
                            _this.gridViewport.on('scroll', function () { return _this.dispose(); });
                            // hide on dropdown click
                            _this._domElement.on('click', function () { return _this.dispose(); });
                            resolve(true);
                        });
                    }
                }
            }
        });
    };
    BsDropDownService.ctorParameters = function () { return [
        { type: AngularUtilService }
    ]; };
BsDropDownService.ɵfac = function BsDropDownService_Factory(t) { return new (t || BsDropDownService)(ɵngcc0.ɵɵinject(AngularUtilService)); };
BsDropDownService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BsDropDownService, factory: function (t) { return BsDropDownService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BsDropDownService, [{
        type: Injectable
    }], function () { return [{ type: AngularUtilService }]; }, null); })();
    return BsDropDownService;
}());
export { BsDropDownService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,