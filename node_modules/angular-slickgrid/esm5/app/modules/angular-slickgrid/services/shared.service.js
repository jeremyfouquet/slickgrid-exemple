import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var SharedService = /** @class */ (function () {
    function SharedService() {
        this._hideHeaderRowAfterPageLoad = false;
        this.onHeaderMenuHideColumns = new Subject();
    }
    Object.defineProperty(SharedService.prototype, "allColumns", {
        // --
        // public
        /** Getter for All Columns  in the grid (hidden/visible) */
        get: function () {
            return this._allColumns;
        },
        /** Setter for All Columns  in the grid (hidden/visible) */
        set: function (allColumns) {
            this._allColumns = allColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "currentPagination", {
        /** Getter for the Current Pagination (when Pagination is enabled) */
        get: function () {
            return this._currentPagination;
        },
        /** Setter for the Current Pagination (when Pagination is enabled) */
        set: function (currentPagination) {
            this._currentPagination = currentPagination;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "dataView", {
        /** Getter for SlickGrid DataView object */
        get: function () {
            return this._dataView;
        },
        /** Setter for SlickGrid DataView object */
        set: function (dataView) {
            this._dataView = dataView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "frozenVisibleColumnId", {
        /** Setter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
        get: function () {
            return this._frozenVisibleColumnId;
        },
        /** Getter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
        set: function (columnId) {
            this._frozenVisibleColumnId = columnId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "grid", {
        /** Getter for SlickGrid Grid object */
        get: function () {
            return this._grid;
        },
        /** Setter for SlickGrid Grid object */
        set: function (grid) {
            this._grid = grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return this._gridOptions || this._grid && this._grid.getOptions && this._grid.getOptions() || {};
        },
        /** Setter for the Grid Options pulled through the Grid Object */
        set: function (gridOptions) {
            this._gridOptions = gridOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "groupItemMetadataProvider", {
        /** Getter for the Grid Options */
        get: function () {
            return this._groupItemMetadataProvider;
        },
        /** Setter for the Grid Options */
        set: function (groupItemMetadataProvider) {
            this._groupItemMetadataProvider = groupItemMetadataProvider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "hideHeaderRowAfterPageLoad", {
        /** Getter to know if user want to hide header row after 1st page load */
        get: function () {
            return this._hideHeaderRowAfterPageLoad;
        },
        /** Setter for knowing if user want to hide header row after 1st page load */
        set: function (hideHeaderRowAfterPageLoad) {
            this._hideHeaderRowAfterPageLoad = hideHeaderRowAfterPageLoad;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "visibleColumns", {
        /** Getter for the Visible Columns in the grid */
        get: function () {
            return this._visibleColumns;
        },
        /** Setter for the Visible Columns in the grid */
        set: function (visibleColumns) {
            this._visibleColumns = visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "hierarchicalDataset", {
        /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
        get: function () {
            return this._hierarchicalDataset;
        },
        /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
        set: function (hierarchicalDataset) {
            this._hierarchicalDataset = hierarchicalDataset;
        },
        enumerable: true,
        configurable: true
    });
SharedService.ɵfac = function SharedService_Factory(t) { return new (t || SharedService)(); };
SharedService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SharedService, factory: function (t) { return SharedService.ɵfac(t); } });

    return SharedService;
}());
export { SharedService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,