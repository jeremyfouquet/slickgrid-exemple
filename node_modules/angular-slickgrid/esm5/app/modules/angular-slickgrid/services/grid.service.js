import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ExtensionService } from './extension.service';
import { FilterService } from './filter.service';
import { GridStateService } from './gridState.service';
import { SharedService } from './shared.service';
import { SortService } from './sort.service';
import { arrayRemoveItemByIndex } from './utilities';
import * as Éµngcc0 from '@angular/core';
var highlightTimerEnd;
var GridServiceDeleteOptionDefaults = { triggerEvent: true };
var GridServiceInsertOptionDefaults = { highlightRow: true, position: 'top', resortGrid: false, selectRow: false, triggerEvent: true };
var GridServiceUpdateOptionDefaults = { highlightRow: true, selectRow: false, scrollRowIntoView: false, triggerEvent: true };
var HideColumnOptionDefaults = { autoResizeColumns: true, triggerEvent: true, hideFromColumnPicker: false, hideFromGridMenu: false };
var GridService = /** @class */ (function () {
    function GridService(extensionService, filterService, gridStateService, sharedService, sortService) {
        this.extensionService = extensionService;
        this.filterService = filterService;
        this.gridStateService = gridStateService;
        this.sharedService = sharedService;
        this.sortService = sortService;
        this.onItemAdded = new Subject();
        this.onItemDeleted = new Subject();
        this.onItemUpdated = new Subject();
        this.onItemUpserted = new Subject();
        this.onColumnsChanged = new Subject();
    }
    Object.defineProperty(GridService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    GridService.prototype.dispose = function () {
        if (this._rowSelectionPlugin && this._rowSelectionPlugin.destroy) {
            this._rowSelectionPlugin.destroy();
        }
    };
    GridService.prototype.init = function (grid, dataView) {
        this._grid = grid;
        this._dataView = dataView;
    };
    /** Clear all Filters & Sorts */
    GridService.prototype.clearAllFiltersAndSorts = function () {
        // call both clear Filters & Sort but only trigger the last one to avoid sending multiple backend queries
        if (this.sortService && this.sortService.clearSorting) {
            this.sortService.clearSorting(false); // skip event trigger on this one
        }
        if (this.filterService && this.filterService.clearFilters) {
            this.filterService.clearFilters();
        }
    };
    /**
     * Get all column set in the grid, that is all visible/hidden columns
     * and also include any extra columns used by some plugins (like Row Selection, Row Detail, ...)
     */
    GridService.prototype.getAllColumnDefinitions = function () {
        return this.sharedService.allColumns;
    };
    /** Get only visible column definitions and also include any extra columns by some plugins (like Row Selection, Row Detail, ...) */
    GridService.prototype.getVisibleColumnDefinitions = function () {
        return this.sharedService.visibleColumns;
    };
    /**
     * From a SlickGrid Event triggered get the Column Definition and Item Data Context
     *
     * For example the SlickGrid onClick will return cell arguments when subscribing to it.
     * From these cellArgs, we want to get the Column Definition and Item Data
     * @param cell event args
     * @return object with columnDef and dataContext
     */
    GridService.prototype.getColumnFromEventArguments = function (args) {
        if (!args || !args.grid || !args.grid.getColumns || !args.grid.getDataItem) {
            throw new Error('To get the column definition and data, we need to have these arguments passed as objects (row, cell, grid)');
        }
        return {
            row: args.row,
            cell: args.cell,
            columnDef: args.grid.getColumns()[args.cell],
            dataContext: args.grid.getDataItem(args.row),
            dataView: this._dataView,
            grid: this._grid
        };
    };
    /** Get data item by it's row index number */
    GridService.prototype.getDataItemByRowNumber = function (rowNumber) {
        if (!this._grid || typeof this._grid.getDataItem !== 'function') {
            throw new Error("We could not find SlickGrid Grid object or it's \"getDataItem\" method");
        }
        return this._grid.getDataItem(rowNumber);
    };
    /** Chain the item Metadata with our implementation of Metadata at given row index */
    GridService.prototype.getItemRowMetadataToHighlight = function (previousItemMetadata) {
        var _this = this;
        return function (rowNumber) {
            var item = _this._dataView.getItem(rowNumber);
            var meta = { cssClasses: '' };
            if (typeof previousItemMetadata === 'function') {
                meta = previousItemMetadata(rowNumber);
            }
            if (!meta) {
                meta = { cssClasses: '' };
            }
            if (item && item._dirty) {
                meta.cssClasses = (meta && meta.cssClasses || '') + ' dirty';
            }
            if (item && item.rowClass && meta) {
                meta.cssClasses += " " + item.rowClass;
                meta.cssClasses += " row" + rowNumber;
            }
            return meta;
        };
    };
    /**
       * @deprecated Hide a Column from the Grid (the column will just become hidden and will still show up in columnPicker/gridMenu)
       * @see hideColumnById
       * @param column
       */
    GridService.prototype.hideColumn = function (column) {
        if (this._grid && this._grid.getColumns && this._grid.setColumns && this._grid.getColumnIndex) {
            var columnIndex = this._grid.getColumnIndex(column.id);
            if (columnIndex >= 0) {
                this.hideColumnByIndex(columnIndex);
            }
        }
    };
    /**
     * @deprecated Hide a Column from the Grid by its column definition index (the column will just become hidden and will still show up in columnPicker/gridMenu)
     * @see hideColumnById Please use "hideColumnById(id)" or "hideColumnByIds([ids])" instead since it has a lot more options
     * @param columnIndex - column definition index
     * @param triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     */
    GridService.prototype.hideColumnByIndex = function (columnIndex, triggerEvent) {
        if (triggerEvent === void 0) { triggerEvent = true; }
        if (this._grid && this._grid.getColumns && this._grid.setColumns) {
            var currentColumns = this._grid.getColumns();
            var visibleColumns = arrayRemoveItemByIndex(currentColumns, columnIndex);
            this.sharedService.visibleColumns = visibleColumns;
            this._grid.setColumns(visibleColumns);
            if (triggerEvent) {
                this.onColumnsChanged.next(visibleColumns);
            }
        }
    };
    /**
     * Hide a Column from the Grid by its column definition id, the column will just become hidden and will still show up in columnPicker/gridMenu
     * @param {string | number} columnId - column definition id
     * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     * @return {number} columnIndex - column index position when found or -1
     */
    GridService.prototype.hideColumnById = function (columnId, options) {
        options = tslib_1.__assign({}, HideColumnOptionDefaults, options);
        if (this._grid && this._grid.getColumns && this._grid.setColumns) {
            var currentColumns = this._grid.getColumns();
            var colIndexFound = currentColumns.findIndex(function (col) { return col.id === columnId; });
            if (colIndexFound >= 0) {
                var visibleColumns = arrayRemoveItemByIndex(currentColumns, colIndexFound);
                this.sharedService.visibleColumns = visibleColumns;
                this._grid.setColumns(visibleColumns);
                var columnIndexFromAllColumns = this.sharedService.allColumns.findIndex(function (col) { return col.id === columnId; });
                if (columnIndexFromAllColumns) {
                    if (options && options.hideFromColumnPicker) {
                        this.sharedService.allColumns[columnIndexFromAllColumns].excludeFromColumnPicker = true;
                    }
                    if (options && options.hideFromGridMenu) {
                        this.sharedService.allColumns[columnIndexFromAllColumns].excludeFromGridMenu = true;
                    }
                }
                // do we want to auto-resize the columns in the grid after hidding some? most often yes
                if (options && options.autoResizeColumns) {
                    this._grid.autosizeColumns();
                }
                // do we want to trigger an event after hidding
                if (options && options.triggerEvent) {
                    this.onColumnsChanged.next(visibleColumns);
                }
                return colIndexFound;
            }
        }
        return -1;
    };
    /**
     * Hide a Column from the Grid by its column definition id(s), the column will just become hidden and will still show up in columnPicker/gridMenu
     * @param {Array<string | number>} columnIds - column definition ids, can be a single string and an array of strings
     * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     */
    GridService.prototype.hideColumnByIds = function (columnIds, options) {
        var e_1, _a;
        options = tslib_1.__assign({}, HideColumnOptionDefaults, options);
        if (Array.isArray(columnIds)) {
            try {
                for (var columnIds_1 = tslib_1.__values(columnIds), columnIds_1_1 = columnIds_1.next(); !columnIds_1_1.done; columnIds_1_1 = columnIds_1.next()) {
                    var columnId = columnIds_1_1.value;
                    // hide each column by its id but wait after the for loop to auto resize columns in the grid
                    this.hideColumnById(columnId, tslib_1.__assign({}, options, { triggerEvent: false, autoResizeColumns: false }));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (columnIds_1_1 && !columnIds_1_1.done && (_a = columnIds_1.return)) _a.call(columnIds_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // do we want to auto-resize the columns in the grid after hidding some? most often yes
            if (options && options.autoResizeColumns) {
                this._grid.autosizeColumns();
            }
            // do we want to trigger an event after hidding
            if (options && options.triggerEvent) {
                this.onColumnsChanged.next(this.sharedService.visibleColumns);
            }
        }
    };
    /**
     * Highlight then fade a row for x seconds.
     * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166
     * @param rowNumber
     * @param fadeDelay
     */
    GridService.prototype.highlightRow = function (rowNumber, fadeDelay, fadeOutDelay) {
        var _this = this;
        if (fadeDelay === void 0) { fadeDelay = 1500; }
        if (fadeOutDelay === void 0) { fadeOutDelay = 300; }
        // create a SelectionModel if there's not one yet
        if (!this._grid.getSelectionModel() && Slick && Slick.RowSelectionModel) {
            this._rowSelectionPlugin = new Slick.RowSelectionModel(this._gridOptions.rowSelectionOptions || {});
            this._grid.setSelectionModel(this._rowSelectionPlugin);
        }
        if (Array.isArray(rowNumber)) {
            rowNumber.forEach(function (row) { return _this.highlightRowByMetadata(row, fadeDelay, fadeOutDelay); });
        }
        else {
            this.highlightRowByMetadata(rowNumber, fadeDelay, fadeOutDelay);
        }
    };
    GridService.prototype.highlightRowByMetadata = function (rowNumber, fadeDelay, fadeOutDelay) {
        var _this = this;
        if (fadeDelay === void 0) { fadeDelay = 1500; }
        if (fadeOutDelay === void 0) { fadeOutDelay = 300; }
        this._dataView.getItemMetadata = this.getItemRowMetadataToHighlight(this._dataView.getItemMetadata);
        var item = this._dataView.getItem(rowNumber);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        if (item && item[idPropName]) {
            item.rowClass = 'highlight';
            this._dataView.updateItem(item[idPropName], item);
            this.renderGrid();
            // fade out
            clearTimeout(highlightTimerEnd);
            highlightTimerEnd = setTimeout(function () {
                item.rowClass = 'highlight-end';
                _this._dataView.updateItem(item[idPropName], item);
                _this.renderGrid();
            }, fadeOutDelay);
            // delete the row's CSS highlight classes once the delay is passed
            setTimeout(function () {
                if (item && item[idPropName]) {
                    delete item.rowClass;
                    if (_this._dataView.getIdxById(item[idPropName]) !== undefined) {
                        _this._dataView.updateItem(item[idPropName], item);
                        _this.renderGrid();
                    }
                }
            }, fadeDelay + fadeOutDelay);
        }
    };
    /** Get the Data Item from a grid row index */
    GridService.prototype.getDataItemByRowIndex = function (index) {
        if (!this._grid || typeof this._grid.getDataItem !== 'function') {
            throw new Error('We could not find SlickGrid Grid object and/or "getDataItem" method');
        }
        return this._grid.getDataItem(index);
    };
    /** Get the Data Item from an array of grid row indexes */
    GridService.prototype.getDataItemByRowIndexes = function (indexes) {
        var _this = this;
        if (!this._grid || typeof this._grid.getDataItem !== 'function') {
            throw new Error('We could not find SlickGrid Grid object and/or "getDataItem" method');
        }
        var dataItems = [];
        if (Array.isArray(indexes)) {
            indexes.forEach(function (idx) {
                dataItems.push(_this._grid.getDataItem(idx));
            });
        }
        return dataItems;
    };
    /** Get the currently selected row indexes */
    GridService.prototype.getSelectedRows = function () {
        if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {
            throw new Error('We could not find SlickGrid Grid object and/or "getSelectedRows" method');
        }
        return this._grid.getSelectedRows();
    };
    /** Get the currently selected rows item data */
    GridService.prototype.getSelectedRowsDataItem = function () {
        if (!this._grid || typeof this._grid.getSelectedRows !== 'function') {
            throw new Error('We could not find SlickGrid Grid object and/or "getSelectedRows" method');
        }
        var selectedRowIndexes = this._grid.getSelectedRows();
        return this.getDataItemByRowIndexes(selectedRowIndexes);
    };
    /** Select the selected row by a row index */
    GridService.prototype.setSelectedRow = function (rowIndex) {
        if (this._grid && this._grid.setSelectedRows) {
            this._grid.setSelectedRows([rowIndex]);
        }
    };
    /** Set selected rows with provided array of row indexes */
    GridService.prototype.setSelectedRows = function (rowIndexes) {
        if (this._grid && this._grid.setSelectedRows) {
            this._grid.setSelectedRows(rowIndexes);
        }
    };
    /** Re-Render the Grid */
    GridService.prototype.renderGrid = function () {
        if (this._grid && typeof this._grid.invalidate === 'function') {
            this._grid.invalidate();
            this._grid.render();
        }
    };
    /**
     * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .
     * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)
     * The reset will clear the Filters & Sort, then will reset the Columns to their original state
     */
    GridService.prototype.resetGrid = function (columnDefinitions) {
        // reset columns to original states & refresh the grid
        if (this._grid && this._dataView) {
            var originalColumns = this.extensionService.getAllColumns();
            if (Array.isArray(originalColumns) && originalColumns.length > 0) {
                // set the grid columns to it's original column definitions
                this._grid.setColumns(originalColumns);
                if (this._gridOptions && this._gridOptions.enableAutoSizeColumns) {
                    this._grid.autosizeColumns();
                }
                this.gridStateService.resetColumns(columnDefinitions);
            }
        }
        if (this.filterService && this.filterService.clearFilters) {
            this.filterService.clearFilters();
        }
        if (this.sortService && this.sortService.clearSorting) {
            this.sortService.clearSorting();
        }
    };
    /** @deprecated please use "addItem" method instead */
    GridService.prototype.addItemToDatagrid = function (item, shouldHighlightRow, shouldResortGrid, shouldTriggerEvent, shouldSelectRow) {
        if (shouldHighlightRow === void 0) { shouldHighlightRow = true; }
        if (shouldResortGrid === void 0) { shouldResortGrid = false; }
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        if (shouldSelectRow === void 0) { shouldSelectRow = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "addItem" method since "addItemToDatagrid" will be deprecated in the future.');
        return this.addItem(item, { highlightRow: shouldHighlightRow, resortGrid: shouldResortGrid, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });
    };
    /** @deprecated please use "addItems" method instead */
    GridService.prototype.addItemsToDatagrid = function (items, shouldHighlightRow, shouldResortGrid, shouldTriggerEvent, shouldSelectRow) {
        if (shouldHighlightRow === void 0) { shouldHighlightRow = true; }
        if (shouldResortGrid === void 0) { shouldResortGrid = false; }
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        if (shouldSelectRow === void 0) { shouldSelectRow = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "addItems" method since "addItemsToDatagrid" will be deprecated in the future.');
        return this.addItems(items, { highlightRow: shouldHighlightRow, resortGrid: shouldResortGrid, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });
    };
    /**
     * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return rowIndex: typically index 0 when adding to position "top" or a different number when adding to the "bottom"
     */
    GridService.prototype.addItem = function (item, options) {
        options = tslib_1.__assign({}, GridServiceInsertOptionDefaults, options);
        if (!this._grid || !this._gridOptions || !this._dataView) {
            throw new Error('We could not find SlickGrid Grid, DataView objects');
        }
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        if (!item || !(idPropName in item)) {
            throw new Error("Adding an item requires the item to include an \"" + idPropName + "\" property");
        }
        // insert position top/bottom, defaults to top
        // when position is top we'll call insert at index 0, else call addItem which just push to the DataView array
        if (options && options.position === 'bottom') {
            this._dataView.addItem(item);
        }
        else {
            this._dataView.insertItem(0, item); // insert at index 0
        }
        // row number in the grid, by default it will be on first row (top is the default)
        var rowNumber = 0;
        // do we want the item to be sorted in the grid, when set to False it will insert on first row (defaults to false)
        if (options.resortGrid) {
            this._dataView.reSort();
            // find the row number in the grid and if user wanted to see highlighted row
            // we need to do it here after resort and get each row number because it possibly changes after the sort
            rowNumber = this._dataView.getRowById(item[idPropName]);
        }
        else {
            // scroll to row index 0 when inserting on top else scroll to the bottom where it got inserted
            rowNumber = (options && options.position === 'bottom') ? this._dataView.getRowById(item[idPropName]) : 0;
            this._grid.scrollRowIntoView(rowNumber);
        }
        // if highlight is enabled, we'll highlight the row we just added
        if (options.highlightRow) {
            this.highlightRow(rowNumber);
        }
        // if row selection (checkbox selector) is enabled, we'll select the row in the grid
        if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
            this.setSelectedRow(rowNumber);
        }
        // do we want to trigger an event after adding the item
        if (options.triggerEvent) {
            this.onItemAdded.next(item);
        }
        return rowNumber;
    };
    /**
     * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     */
    GridService.prototype.addItems = function (items, options) {
        var _this = this;
        options = tslib_1.__assign({}, GridServiceInsertOptionDefaults, options);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        var rowNumbers = [];
        // loop through all items to add
        if (!Array.isArray(items)) {
            return [this.addItem(items, options)];
        }
        else {
            this._dataView.beginUpdate();
            items.forEach(function (item) { return _this.addItem(item, tslib_1.__assign({}, options, { highlightRow: false, resortGrid: false, triggerEvent: false, selectRow: false })); });
            this._dataView.endUpdate();
        }
        // do we want the item to be sorted in the grid, when set to False it will insert on first row (defaults to false)
        if (options.resortGrid) {
            this._dataView.reSort();
        }
        // scroll to row index 0 when inserting on top else scroll to the bottom where it got inserted
        (options && options.position === 'bottom') ? this._grid.navigateBottom() : this._grid.navigateTop();
        // get row numbers of all new inserted items
        // we need to do it after resort and get each row number because it possibly changed after the sort
        items.forEach(function (item) { return rowNumbers.push(_this._dataView.getRowById(item[idPropName])); });
        // if user wanted to see highlighted row
        if (options.highlightRow) {
            this.highlightRow(rowNumbers);
        }
        // select the row in the grid
        if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
            this.setSelectedRows(rowNumbers);
        }
        // do we want to trigger an event after adding the item
        if (options.triggerEvent) {
            this.onItemAdded.next(items);
        }
        return rowNumbers;
    };
    /** @deprecated please use "deleteItem" method instead */
    GridService.prototype.deleteDataGridItem = function (item, shouldTriggerEvent) {
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "deleteItem" method since "deleteDataGridItem" will be deprecated in the future.');
        this.deleteItem(item, { triggerEvent: shouldTriggerEvent });
    };
    /** @deprecated please use "deleteItems" method instead */
    GridService.prototype.deleteDataGridItems = function (items, shouldTriggerEvent) {
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "deleteItems" method since "deleteDataGridItems" will be deprecated in the future.');
        this.deleteItems(items, { triggerEvent: shouldTriggerEvent });
    };
    /** @deprecated please use "deleteItemById" method instead */
    GridService.prototype.deleteDataGridItemById = function (itemId, shouldTriggerEvent) {
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "deleteItemById" method since "deleteDataGridItemById" will be deprecated in the future.');
        this.deleteItemById(itemId, { triggerEvent: shouldTriggerEvent });
    };
    /** @deprecated please use "deleteItemByIds" method instead */
    GridService.prototype.deleteDataGridItemByIds = function (itemIds, shouldTriggerEvent) {
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "deleteItemByIds" method since "deleteDataGridItemByIds" will be deprecated in the future.');
        this.deleteItemByIds(itemIds, { triggerEvent: shouldTriggerEvent });
    };
    /**
     * Delete an existing item from the datagrid (dataView)
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    GridService.prototype.deleteItem = function (item, options) {
        options = tslib_1.__assign({}, GridServiceDeleteOptionDefaults, options);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        if (!item || !(idPropName in item)) {
            throw new Error("Deleting an item requires the item to include an \"" + idPropName + "\" property");
        }
        return this.deleteItemById(item[idPropName], options);
    };
    /**
     * Delete an array of existing items from the datagrid
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    GridService.prototype.deleteItems = function (items, options) {
        var _this = this;
        options = tslib_1.__assign({}, GridServiceDeleteOptionDefaults, options);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        // when it's not an array, we can call directly the single item delete
        if (!Array.isArray(items)) {
            this.deleteItem(items, options);
            return [items[idPropName]];
        }
        this._dataView.beginUpdate();
        var itemIds = [];
        items.forEach(function (item) {
            if (item && item[idPropName] !== undefined) {
                itemIds.push(item[idPropName]);
            }
            _this.deleteItem(item, tslib_1.__assign({}, options, { triggerEvent: false }));
        });
        this._dataView.endUpdate();
        // do we want to trigger an event after deleting the item
        if (options.triggerEvent) {
            this.onItemDeleted.next(items);
        }
        return itemIds;
    };
    /**
     * Delete an existing item from the datagrid (dataView) by it's id
     * @param itemId: item unique id
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    GridService.prototype.deleteItemById = function (itemId, options) {
        options = tslib_1.__assign({}, GridServiceDeleteOptionDefaults, options);
        if (itemId === null || itemId === undefined) {
            throw new Error("Cannot delete a row without a valid \"id\"");
        }
        // when user has row selection enabled, we should clear any selection to avoid confusion after a delete
        var isSyncGridSelectionEnabled = this.gridStateService && this.gridStateService.needToPreserveRowSelection() || false;
        if (!isSyncGridSelectionEnabled && this._grid && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
            this.setSelectedRows([]);
        }
        // delete the item from the dataView
        this._dataView.deleteItem(itemId);
        // do we want to trigger an event after deleting the item
        if (options.triggerEvent) {
            this.onItemDeleted.next(itemId);
        }
        return itemId;
    };
    /**
     * Delete an array of existing items from the datagrid
     * @param itemIds array of item unique IDs
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     */
    GridService.prototype.deleteItemByIds = function (itemIds, options) {
        options = tslib_1.__assign({}, GridServiceDeleteOptionDefaults, options);
        // when it's not an array, we can call directly the single item delete
        if (Array.isArray(itemIds)) {
            this._dataView.beginUpdate();
            for (var i = 0; i < itemIds.length; i++) {
                if (itemIds[i] !== null) {
                    this.deleteItemById(itemIds[i], { triggerEvent: false });
                }
            }
            this._dataView.endUpdate();
            // do we want to trigger an event after deleting the item
            if (options.triggerEvent) {
                this.onItemDeleted.next(itemIds);
            }
            return itemIds;
        }
        return [];
    };
    /** @deprecated please use "updateItem" method instead */
    GridService.prototype.updateDataGridItem = function (item, shouldHighlightRow, shouldTriggerEvent, shouldSelectRow) {
        if (shouldHighlightRow === void 0) { shouldHighlightRow = true; }
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        if (shouldSelectRow === void 0) { shouldSelectRow = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "updateItem" method since "updateDataGridItem" will be deprecated in the future.');
        return this.updateItem(item, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });
    };
    /** @deprecated please use "updateItems" method instead */
    GridService.prototype.updateDataGridItems = function (items, shouldHighlightRow, shouldTriggerEvent, shouldSelectRow) {
        if (shouldHighlightRow === void 0) { shouldHighlightRow = true; }
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        if (shouldSelectRow === void 0) { shouldSelectRow = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "updateItems" method since "updateDataGridItems" will be deprecated in the future.');
        return this.updateItems(items, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });
    };
    /** @deprecated please use "updateItemById" method instead */
    GridService.prototype.updateDataGridItemById = function (itemId, item, shouldHighlightRow, shouldTriggerEvent, shouldSelectRow) {
        if (shouldHighlightRow === void 0) { shouldHighlightRow = true; }
        if (shouldTriggerEvent === void 0) { shouldTriggerEvent = true; }
        if (shouldSelectRow === void 0) { shouldSelectRow = true; }
        console.warn('[Angular-Slickgrid - GridService] please consider using the new "updateItemById" method since "updateDataGridItemById" will be deprecated in the future.');
        return this.updateItemById(itemId, item, { highlightRow: shouldHighlightRow, triggerEvent: shouldTriggerEvent, selectRow: shouldSelectRow });
    };
    /**
     * Update an existing item with new properties inside the datagrid
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row index
     */
    GridService.prototype.updateItem = function (item, options) {
        options = tslib_1.__assign({}, GridServiceUpdateOptionDefaults, options);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        var itemId = (!item || !(idPropName in item)) ? undefined : item[idPropName];
        if (itemId === undefined) {
            throw new Error("Calling Update of an item requires the item to include an \"" + idPropName + "\" property");
        }
        return this.updateItemById(itemId, item, options);
    };
    /**
     * Update an array of existing items with new properties inside the datagrid
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row indexes
     */
    GridService.prototype.updateItems = function (items, options) {
        var _this = this;
        options = tslib_1.__assign({}, GridServiceUpdateOptionDefaults, options);
        // when it's not an array, we can call directly the single item update
        if (!Array.isArray(items)) {
            return [this.updateItem(items, options)];
        }
        this._dataView.beginUpdate();
        var gridRowNumbers = [];
        items.forEach(function (item) {
            gridRowNumbers.push(_this.updateItem(item, tslib_1.__assign({}, options, { highlightRow: false, selectRow: false, triggerEvent: false })));
        });
        this._dataView.endUpdate();
        // only highlight at the end, all at once
        // we have to do this because doing highlight 1 by 1 would only re-select the last highlighted row which is wrong behavior
        if (options.highlightRow) {
            this.highlightRow(gridRowNumbers);
        }
        // select the row in the grid
        if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
            this.setSelectedRows(gridRowNumbers);
        }
        // do we want to trigger an event after updating the item
        if (options.triggerEvent) {
            this.onItemUpdated.next(items);
        }
        return gridRowNumbers;
    };
    /**
     * Update an existing item in the datagrid by it's id and new properties
     * @param itemId: item unique id
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row number
     */
    GridService.prototype.updateItemById = function (itemId, item, options) {
        options = tslib_1.__assign({}, GridServiceUpdateOptionDefaults, options);
        if (itemId === undefined) {
            throw new Error("Cannot update a row without a valid \"id\"");
        }
        var rowNumber = this._dataView.getRowById(itemId);
        if (!item || rowNumber === undefined) {
            throw new Error("The item to update in the grid was not found with id: " + itemId);
        }
        if (this._dataView.getIdxById(itemId) !== undefined) {
            // Update the item itself inside the dataView
            this._dataView.updateItem(itemId, item);
            this._grid.updateRow(rowNumber);
            // do we want to scroll to the row so that it shows in the Viewport (UI)
            if (options.scrollRowIntoView) {
                this._grid.scrollRowIntoView(rowNumber);
            }
            // highlight the row we just updated, if defined
            if (options.highlightRow) {
                this.highlightRow(rowNumber);
            }
            // select the row in the grid
            if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
                this.setSelectedRow(rowNumber);
            }
            // do we want to trigger an event after updating the item
            if (options.triggerEvent) {
                this.onItemUpdated.next(item);
            }
        }
        return rowNumber;
    };
    /**
     * Insert a row into the grid if it doesn't already exist or update if it does.
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     */
    GridService.prototype.upsertItem = function (item, options) {
        options = tslib_1.__assign({}, GridServiceInsertOptionDefaults, options);
        var idPropName = this._gridOptions.datasetIdPropertyName || 'id';
        var itemId = (!item || !(idPropName in item)) ? undefined : item[idPropName];
        if (itemId === undefined) {
            throw new Error("Calling Upsert of an item requires the item to include an \"" + idPropName + "\" property");
        }
        return this.upsertItemById(itemId, item, options);
    };
    /**
     * Update an array of existing items with new properties inside the datagrid
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return row numbers in the grid
     */
    GridService.prototype.upsertItems = function (items, options) {
        var _this = this;
        options = tslib_1.__assign({}, GridServiceInsertOptionDefaults, options);
        // when it's not an array, we can call directly the single item update
        if (!Array.isArray(items)) {
            return [this.upsertItem(items, options)];
        }
        this._dataView.beginUpdate();
        var upsertedRows = [];
        items.forEach(function (item) {
            upsertedRows.push(_this.upsertItem(item, tslib_1.__assign({}, options, { highlightRow: false, resortGrid: false, selectRow: false, triggerEvent: false })));
        });
        this._dataView.endUpdate();
        var rowNumbers = upsertedRows.map(function (upsertRow) { return upsertRow.added !== undefined ? upsertRow.added : upsertRow.updated; });
        // only highlight at the end, all at once
        // we have to do this because doing highlight 1 by 1 would only re-select the last highlighted row which is wrong behavior
        if (options.highlightRow) {
            this.highlightRow(rowNumbers);
        }
        // select the row in the grid
        if (options.selectRow && this._gridOptions && (this._gridOptions.enableCheckboxSelector || this._gridOptions.enableRowSelection)) {
            this.setSelectedRows(rowNumbers);
        }
        // do we want to trigger an event after updating the item
        if (options.triggerEvent) {
            this.onItemUpserted.next(items);
            var addedItems = upsertedRows.filter(function (upsertRow) { return upsertRow.added !== undefined; });
            if (Array.isArray(addedItems) && addedItems.length > 0) {
                this.onItemAdded.next(addedItems);
            }
            var updatedItems = upsertedRows.filter(function (upsertRow) { return upsertRow.updated !== undefined; });
            if (Array.isArray(updatedItems) && updatedItems.length > 0) {
                this.onItemUpdated.next(updatedItems);
            }
        }
        return upsertedRows;
    };
    /**
     * Update an existing item in the datagrid by it's id and new properties
     * @param itemId: item unique id
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return grid row number in the grid
     */
    GridService.prototype.upsertItemById = function (itemId, item, options) {
        var isItemAdded = false;
        options = tslib_1.__assign({}, GridServiceInsertOptionDefaults, options);
        if (itemId === undefined) {
            throw new Error("Calling Upsert of an item requires the item to include a valid and unique \"id\" property");
        }
        var rowNumberAdded;
        var rowNumberUpdated;
        if (this._dataView.getRowById(itemId) === undefined) {
            rowNumberAdded = this.addItem(item, options);
            isItemAdded = true;
        }
        else {
            rowNumberUpdated = this.updateItem(item, { highlightRow: options.highlightRow, selectRow: options.selectRow, triggerEvent: options.triggerEvent });
            isItemAdded = false;
        }
        // do we want to trigger an event after updating the item
        if (options.triggerEvent) {
            this.onItemUpserted.next(item);
            isItemAdded ? this.onItemAdded.next(item) : this.onItemUpdated.next(item);
        }
        return { added: rowNumberAdded, updated: rowNumberUpdated };
    };
    GridService.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: FilterService },
        { type: GridStateService },
        { type: SharedService },
        { type: SortService }
    ]; };
GridService.Éµfac = function GridService_Factory(t) { return new (t || GridService)(Éµngcc0.ÉµÉµinject(ExtensionService), Éµngcc0.ÉµÉµinject(FilterService), Éµngcc0.ÉµÉµinject(GridStateService), Éµngcc0.ÉµÉµinject(SharedService), Éµngcc0.ÉµÉµinject(SortService)); };
GridService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: GridService, factory: function (t) { return GridService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(GridService, [{
        type: Injectable
    }], function () { return [{ type: ExtensionService }, { type: FilterService }, { type: GridStateService }, { type: SharedService }, { type: SortService }]; }, null); })();
    return GridService;
}());
export { GridService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,