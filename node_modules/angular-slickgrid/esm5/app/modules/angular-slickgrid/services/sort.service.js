import * as tslib_1 from "tslib";
import { isObservable, Subject } from 'rxjs';
import { EmitterType, FieldType, SortDirection, SortDirectionNumber, } from './../models/index';
import { executeBackendCallback, refreshBackendDataset } from './backend-utilities';
import { convertHierarchicalViewToParentChildArray, getDescendantProperty } from './utilities';
import { sortByFieldType } from '../sorters/sorterUtilities';
import { SharedService } from './shared.service';
import { Injectable } from '@angular/core';
import * as Éµngcc0 from '@angular/core';
var SortService = /** @class */ (function () {
    function SortService(sharedService) {
        this.sharedService = sharedService;
        this._currentLocalSorters = [];
        this._isBackendGrid = false;
        this.httpCancelRequests$ = new Subject(); // this will be used to cancel any pending http request
        this.onSortChanged = new Subject();
        this.onSortCleared = new Subject();
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(SortService.prototype, "eventHandler", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortService.prototype, "_columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortService.prototype, "_dataView", {
        /** Getter of SlickGrid DataView object */
        get: function () {
            return (this._grid && this._grid.getData) ? this._grid.getData() : {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Bind a backend sort (single/multi) hook to the grid
     * @param grid SlickGrid Grid object
     * @param dataView SlickGrid DataView object
     */
    SortService.prototype.bindBackendOnSort = function (grid) {
        this._isBackendGrid = true;
        this._grid = grid;
        // subscribe to the SlickGrid event and call the backend execution
        this._eventHandler.subscribe(grid.onSort, this.onBackendSortChanged.bind(this));
    };
    /**
     * Bind a local sort (single/multi) hook to the grid
     * @param grid SlickGrid Grid object
     * @param gridOptions Grid Options object
     * @param dataView
     */
    SortService.prototype.bindLocalOnSort = function (grid) {
        this._isBackendGrid = false;
        this._grid = grid;
        this.processTreeDataInitialSort();
        this._eventHandler.subscribe(grid.onSort, this.handleLocalOnSort.bind(this));
    };
    SortService.prototype.handleLocalOnSort = function (_e, args) {
        var _this = this;
        if (args && (args.sortCols || args.sortCol)) {
            // multiSort and singleSort are not exactly the same, but we want to structure it the same for the (for loop) after
            // also to avoid having to rewrite the for loop in the sort, we will make the singleSort an array of 1 object
            var sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortAsc: args.sortAsc, sortCol: args.sortCol });
            // keep current sorters
            this._currentLocalSorters = []; // reset current local sorters
            if (Array.isArray(sortColumns)) {
                sortColumns.forEach(function (sortColumn) {
                    if (sortColumn.sortCol) {
                        _this._currentLocalSorters.push({
                            columnId: sortColumn.sortCol.id,
                            direction: sortColumn.sortAsc ? SortDirection.ASC : SortDirection.DESC
                        });
                    }
                });
            }
            this.onLocalSortChanged(this._grid, sortColumns);
            this.emitSortChanged(EmitterType.local);
        }
    };
    SortService.prototype.clearSortByColumnId = function (event, columnId) {
        // get previously sorted columns
        var allSortedCols = this.getCurrentColumnSorts();
        var sortedColsWithoutCurrent = this.getCurrentColumnSorts("" + columnId);
        if (Array.isArray(allSortedCols) && Array.isArray(sortedColsWithoutCurrent) && allSortedCols.length !== sortedColsWithoutCurrent.length) {
            if (this._gridOptions.backendServiceApi) {
                this.onBackendSortChanged(event, { multiColumnSort: true, sortCols: sortedColsWithoutCurrent, grid: this._grid });
            }
            else if (this._dataView) {
                this.onLocalSortChanged(this._grid, sortedColsWithoutCurrent, true, true);
            }
            else {
                // when using customDataView, we will simply send it as a onSort event with notify
                var isMultiSort = this._gridOptions && this._gridOptions.multiColumnSort || false;
                var sortOutput = isMultiSort ? sortedColsWithoutCurrent : sortedColsWithoutCurrent[0];
                this._grid.onSort.notify(sortOutput);
            }
            // update the grid sortColumns array which will at the same add the visual sort icon(s) on the UI
            var updatedSortColumns = sortedColsWithoutCurrent.map(function (col) {
                return {
                    columnId: col && col.sortCol && col.sortCol.id,
                    sortAsc: col && col.sortAsc,
                    sortCol: col && col.sortCol,
                };
            });
            this._grid.setSortColumns(updatedSortColumns); // add sort icon in UI
        }
        // when there's no more sorting, we re-sort by the default sort field, user can customize it "defaultColumnSortFieldId", defaults to "id"
        if (Array.isArray(sortedColsWithoutCurrent) && sortedColsWithoutCurrent.length === 0) {
            this.sortLocalGridByDefaultSortFieldId();
        }
    };
    /**
     * Clear Sorting
     * - 1st, remove the SlickGrid sort icons (this setSortColumns function call really does only that)
     * - 2nd, we also need to trigger a sort change
     *   - for a backend grid, we will trigger a backend sort changed with an empty sort columns array
     *   - however for a local grid, we need to pass a sort column and so we will sort by the 1st column
     * @param trigger query event after executing clear filter?
     */
    SortService.prototype.clearSorting = function (triggerQueryEvent) {
        if (triggerQueryEvent === void 0) { triggerQueryEvent = true; }
        if (this._grid && this._gridOptions && this._dataView) {
            // remove any sort icons (this setSortColumns function call really does only that)
            this._grid.setSortColumns([]);
            // we also need to trigger a sort change
            // for a backend grid, we will trigger a backend sort changed with an empty sort columns array
            // however for a local grid, we need to pass a sort column and so we will sort by the 1st column
            if (triggerQueryEvent) {
                if (this._isBackendGrid) {
                    this.onBackendSortChanged(undefined, { grid: this._grid, sortCols: [], clearSortTriggered: true });
                }
                else {
                    if (this._columnDefinitions && Array.isArray(this._columnDefinitions)) {
                        this.sortLocalGridByDefaultSortFieldId();
                    }
                }
            }
            else if (this._isBackendGrid) {
                var backendService = this._gridOptions && this._gridOptions.backendServiceApi && this._gridOptions.backendServiceApi.service;
                if (backendService && backendService.clearSorters) {
                    backendService.clearSorters();
                }
            }
        }
        // set current sorter to empty & emit a sort changed event
        this._currentLocalSorters = [];
        // emit an event when sorts are all cleared
        this.onSortCleared.next(true);
    };
    SortService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        if (this._eventHandler && this._eventHandler.unsubscribeAll) {
            this._eventHandler.unsubscribeAll();
        }
        if (isObservable(this.httpCancelRequests$)) {
            this.httpCancelRequests$.next(); // this cancels any pending http requests
        }
    };
    /**
     * Toggle the Sorting Functionality
     * @param {boolean} isSortingDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True
     * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True
     */
    SortService.prototype.disableSortFunctionality = function (isSortingDisabled, clearSortingWhenDisabled) {
        var _this = this;
        if (isSortingDisabled === void 0) { isSortingDisabled = true; }
        if (clearSortingWhenDisabled === void 0) { clearSortingWhenDisabled = true; }
        var prevSorting = this._gridOptions.enableSorting;
        var newSorting = !prevSorting;
        this._gridOptions.enableSorting = newSorting;
        var updatedColumnDefinitions;
        if (isSortingDisabled) {
            if (clearSortingWhenDisabled) {
                this.clearSorting();
            }
            this._eventHandler.unsubscribeAll();
            updatedColumnDefinitions = this.disableAllSortingCommands(true);
        }
        else {
            updatedColumnDefinitions = this.disableAllSortingCommands(false);
            var onSortHandler = this._grid.onSort;
            this._eventHandler.subscribe(onSortHandler, function (e, args) { return _this.handleLocalOnSort(e, args); });
        }
        this._grid.setOptions({ enableSorting: this._gridOptions.enableSorting }, false, true);
        this.sharedService.gridOptions = this._gridOptions;
        // reset columns so that it recreate the column headers and remove/add the sort icon hints
        // basically without this, the sort icon hints were still showing up even after disabling the Sorting
        this._grid.setColumns(updatedColumnDefinitions);
    };
    /**
     * Toggle the Sorting functionality
     * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True
     */
    SortService.prototype.toggleSortFunctionality = function (clearSortingOnDisable) {
        if (clearSortingOnDisable === void 0) { clearSortingOnDisable = true; }
        var previousSorting = this._gridOptions.enableSorting;
        this.disableSortFunctionality(previousSorting, clearSortingOnDisable);
    };
    /**
     * A simple function that is binded to the subscriber and emit a change when the sort is called.
     * Other services, like Pagination, can then subscribe to it.
     * @param sender
     */
    SortService.prototype.emitSortChanged = function (sender, currentLocalSorters) {
        if (sender === EmitterType.remote && this._gridOptions && this._gridOptions.backendServiceApi) {
            var currentSorters = [];
            var backendService = this._gridOptions.backendServiceApi.service;
            if (backendService && backendService.getCurrentSorters) {
                currentSorters = backendService.getCurrentSorters();
            }
            this.onSortChanged.next(currentSorters);
        }
        else if (sender === EmitterType.local) {
            if (currentLocalSorters) {
                this._currentLocalSorters = currentLocalSorters;
            }
            this.onSortChanged.next(this.getCurrentLocalSorters());
        }
    };
    SortService.prototype.getCurrentLocalSorters = function () {
        return this._currentLocalSorters;
    };
    /**
     * Get current column sorts,
     * If a column is passed as an argument, that will be exclusion so we won't add this column to our output array since it is already in the array.
     * The usage of this method is that we want to know the sort prior to calling the next sorting command
     */
    SortService.prototype.getCurrentColumnSorts = function (excludedColumnId) {
        var _this = this;
        // getSortColumns() only returns sortAsc & columnId, we want the entire column definition
        var oldSortColumns = this._grid && this._grid.getSortColumns();
        // get the column definition but only keep column which are not equal to our current column
        if (Array.isArray(oldSortColumns)) {
            var sortedCols = oldSortColumns.reduce(function (cols, col) {
                if (!excludedColumnId || col.columnId !== excludedColumnId) {
                    cols.push({ sortCol: _this._columnDefinitions[_this._grid.getColumnIndex(col.columnId)], sortAsc: col.sortAsc });
                }
                return cols;
            }, []);
            return sortedCols;
        }
        return [];
    };
    /** Load defined Sorting (sorters) into the grid */
    SortService.prototype.loadGridSorters = function (sorters) {
        var _this = this;
        this._currentLocalSorters = []; // reset current local sorters
        var sortCols = [];
        if (Array.isArray(sorters)) {
            sorters.forEach(function (sorter) {
                var gridColumn = _this._columnDefinitions.find(function (col) { return col.id === sorter.columnId; });
                if (gridColumn) {
                    sortCols.push({
                        columnId: gridColumn.id,
                        sortAsc: ((sorter.direction.toUpperCase() === SortDirection.ASC) ? true : false),
                        sortCol: gridColumn
                    });
                    // keep current sorters
                    _this._currentLocalSorters.push({
                        columnId: gridColumn.id + '',
                        direction: sorter.direction.toUpperCase()
                    });
                }
            });
        }
        if (sortCols.length > 0) {
            this.onLocalSortChanged(this._grid, sortCols);
            this._grid.setSortColumns(sortCols); // use this to add sort icon(s) in UI
        }
        return sortCols;
    };
    /** Process the initial sort, typically it will sort ascending by the column that has the Tree Data unless user specifies a different initialSort */
    SortService.prototype.processTreeDataInitialSort = function () {
        // when a Tree Data view is defined, we must sort the data so that the UI works correctly
        if (this._gridOptions && this._gridOptions.enableTreeData && this._gridOptions.treeDataOptions) {
            // first presort it once by tree level
            var treeDataOptions_1 = this._gridOptions.treeDataOptions;
            var columnWithTreeData = this._columnDefinitions.find(function (col) { return col && col.id === treeDataOptions_1.columnId; });
            if (columnWithTreeData) {
                var sortDirection = SortDirection.ASC;
                var sortTreeLevelColumn = { columnId: treeDataOptions_1.columnId, sortCol: columnWithTreeData, sortAsc: true };
                // user could provide a custom sort field id, if so get that column and sort by it
                if (treeDataOptions_1 && treeDataOptions_1.initialSort && treeDataOptions_1.initialSort.columnId) {
                    var initialSortColumnId_1 = treeDataOptions_1.initialSort.columnId;
                    var initialSortColumn = this._columnDefinitions.find(function (col) { return col.id === initialSortColumnId_1; });
                    sortDirection = (treeDataOptions_1.initialSort.direction || SortDirection.ASC).toUpperCase();
                    sortTreeLevelColumn = { columnId: initialSortColumnId_1, sortCol: initialSortColumn, sortAsc: (sortDirection === SortDirection.ASC) };
                }
                // when we have a valid column with Tree Data, we can sort by that column
                if (sortTreeLevelColumn && sortTreeLevelColumn.columnId) {
                    this.updateSorting([{ columnId: sortTreeLevelColumn.columnId || '', direction: sortDirection }]);
                }
            }
        }
    };
    SortService.prototype.onBackendSortChanged = function (event, args) {
        if (!args || !args.grid) {
            throw new Error('Something went wrong when trying to bind the "onBackendSortChanged(event, args)" function, it seems that "args" is not populated correctly');
        }
        var gridOptions = (args.grid && args.grid.getOptions) ? args.grid.getOptions() : {};
        var backendApi = gridOptions.backendServiceApi;
        if (!backendApi || !backendApi.process || !backendApi.service) {
            throw new Error("BackendServiceApi requires at least a \"process\" function and a \"service\" defined");
        }
        // keep start time & end timestamps & return it after process execution
        var startTime = new Date();
        if (backendApi.preProcess) {
            backendApi.preProcess();
        }
        // query backend
        var query = backendApi.service.processOnSortChanged(event, args);
        var totalItems = gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems;
        executeBackendCallback(backendApi, query, args, startTime, totalItems, this.emitSortChanged.bind(this), this.httpCancelRequests$);
    };
    /** When a Sort Changes on a Local grid (JSON dataset) */
    SortService.prototype.onLocalSortChanged = function (grid, sortColumns, forceReSort, emitSortChanged) {
        if (forceReSort === void 0) { forceReSort = false; }
        if (emitSortChanged === void 0) { emitSortChanged = false; }
        var isTreeDataEnabled = this._gridOptions && this._gridOptions.enableTreeData || false;
        var dataView = grid && grid.getData && grid.getData();
        if (grid && dataView) {
            if (forceReSort && !isTreeDataEnabled) {
                dataView.reSort();
            }
            if (isTreeDataEnabled && this.sharedService && Array.isArray(this.sharedService.hierarchicalDataset)) {
                var hierarchicalDataset = this.sharedService.hierarchicalDataset;
                this.sortTreeData(hierarchicalDataset, sortColumns);
                var dataViewIdIdentifier = this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id';
                var treeDataOpt = this._gridOptions && this._gridOptions.treeDataOptions || { columnId: '' };
                var treeDataOptions = tslib_1.__assign({}, treeDataOpt, { identifierPropName: treeDataOpt.identifierPropName || dataViewIdIdentifier });
                var sortedFlatArray = convertHierarchicalViewToParentChildArray(hierarchicalDataset, treeDataOptions);
                dataView.setItems(sortedFlatArray, this._gridOptions && this._gridOptions.datasetIdPropertyName || 'id');
            }
            else {
                dataView.sort(this.sortComparers.bind(this, sortColumns));
            }
            grid.invalidate();
            grid.render();
            if (emitSortChanged) {
                this.emitSortChanged(EmitterType.local, sortColumns.map(function (col) {
                    return {
                        columnId: col.sortCol && col.sortCol.id || 'id',
                        direction: col.sortAsc ? SortDirection.ASC : SortDirection.DESC
                    };
                }));
            }
        }
    };
    /** Call a local grid sort by its default sort field id (user can customize default field by configuring "defaultColumnSortFieldId" in the grid options, defaults to "id") */
    SortService.prototype.sortLocalGridByDefaultSortFieldId = function () {
        var sortColFieldId = this._gridOptions && this._gridOptions.defaultColumnSortFieldId || this._gridOptions.datasetIdPropertyName || 'id';
        var sortCol = { id: sortColFieldId, field: sortColFieldId };
        this.onLocalSortChanged(this._grid, new Array({ sortAsc: true, sortCol: sortCol, clearSortTriggered: true }));
    };
    SortService.prototype.sortComparers = function (sortColumns, dataRow1, dataRow2) {
        var e_1, _a;
        if (Array.isArray(sortColumns)) {
            try {
                for (var sortColumns_1 = tslib_1.__values(sortColumns), sortColumns_1_1 = sortColumns_1.next(); !sortColumns_1_1.done; sortColumns_1_1 = sortColumns_1.next()) {
                    var sortColumn = sortColumns_1_1.value;
                    var result = this.sortComparer(sortColumn, dataRow1, dataRow2);
                    if (result !== undefined) {
                        return result;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (sortColumns_1_1 && !sortColumns_1_1.done && (_a = sortColumns_1.return)) _a.call(sortColumns_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return SortDirectionNumber.neutral;
    };
    SortService.prototype.sortComparer = function (sortColumn, dataRow1, dataRow2, querySortField) {
        if (sortColumn && sortColumn.sortCol) {
            var columnDef = sortColumn.sortCol;
            var sortDirection = sortColumn.sortAsc ? SortDirectionNumber.asc : SortDirectionNumber.desc;
            var queryFieldName1 = querySortField || columnDef.queryFieldSorter || columnDef.queryField || columnDef.field;
            var queryFieldName2 = queryFieldName1;
            var fieldType = columnDef.type || FieldType.string;
            // if user provided a query field name getter callback, we need to get the name on each item independently
            if (typeof columnDef.queryFieldNameGetterFn === 'function') {
                queryFieldName1 = columnDef.queryFieldNameGetterFn(dataRow1);
                queryFieldName2 = columnDef.queryFieldNameGetterFn(dataRow2);
            }
            var value1 = dataRow1[queryFieldName1];
            var value2 = dataRow2[queryFieldName2];
            // when item is a complex object (dot "." notation), we need to filter the value contained in the object tree
            if (queryFieldName1 && queryFieldName1.indexOf('.') >= 0) {
                value1 = getDescendantProperty(dataRow1, queryFieldName1);
            }
            if (queryFieldName2 && queryFieldName2.indexOf('.') >= 0) {
                value2 = getDescendantProperty(dataRow2, queryFieldName2);
            }
            // user could provide his own custom Sorter
            if (columnDef.sorter) {
                var customSortResult = columnDef.sorter(value1, value2, sortDirection, columnDef);
                if (customSortResult !== SortDirectionNumber.neutral) {
                    return customSortResult;
                }
            }
            else {
                var sortResult = sortByFieldType(fieldType, value1, value2, sortDirection, columnDef);
                if (sortResult !== SortDirectionNumber.neutral) {
                    return sortResult;
                }
            }
        }
        return undefined;
    };
    SortService.prototype.sortTreeData = function (hierarchicalArray, sortColumns) {
        var e_2, _a;
        if (Array.isArray(sortColumns)) {
            try {
                for (var sortColumns_2 = tslib_1.__values(sortColumns), sortColumns_2_1 = sortColumns_2.next(); !sortColumns_2_1.done; sortColumns_2_1 = sortColumns_2.next()) {
                    var sortColumn = sortColumns_2_1.value;
                    this.sortTreeChild(hierarchicalArray, sortColumn, 0);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (sortColumns_2_1 && !sortColumns_2_1.done && (_a = sortColumns_2.return)) _a.call(sortColumns_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /** Sort the Tree Children of a hierarchical dataset by recursion */
    SortService.prototype.sortTreeChild = function (hierarchicalArray, sortColumn, treeLevel) {
        var e_3, _a;
        var _this = this;
        var treeDataOptions = this._gridOptions && this._gridOptions.treeDataOptions;
        var childrenPropName = treeDataOptions && treeDataOptions.childrenPropName || 'children';
        hierarchicalArray.sort(function (a, b) { return _this.sortComparer(sortColumn, a, b) || SortDirectionNumber.neutral; });
        try {
            // when item has a child, we'll sort recursively
            for (var hierarchicalArray_1 = tslib_1.__values(hierarchicalArray), hierarchicalArray_1_1 = hierarchicalArray_1.next(); !hierarchicalArray_1_1.done; hierarchicalArray_1_1 = hierarchicalArray_1.next()) {
                var item = hierarchicalArray_1_1.value;
                if (item) {
                    var hasChildren = item.hasOwnProperty(childrenPropName) && Array.isArray(item[childrenPropName]);
                    // when item has a child, we'll sort recursively
                    if (hasChildren) {
                        treeLevel++;
                        this.sortTreeChild(item[childrenPropName], sortColumn, treeLevel);
                        treeLevel--;
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (hierarchicalArray_1_1 && !hierarchicalArray_1_1.done && (_a = hierarchicalArray_1.return)) _a.call(hierarchicalArray_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * Update Sorting (sorters) dynamically just by providing an array of sorter(s).
     * You can also choose emit (default) a Sort Changed event that will be picked by the Grid State Service.
     *
     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,
     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.
     * @param sorters array
     * @param triggerEvent defaults to True, do we want to emit a sort changed event?
     * @param triggerBackendQuery defaults to True, which will query the backend.
     */
    SortService.prototype.updateSorting = function (sorters, emitChangedEvent, triggerBackendQuery) {
        if (emitChangedEvent === void 0) { emitChangedEvent = true; }
        if (triggerBackendQuery === void 0) { triggerBackendQuery = true; }
        if (!this._gridOptions || !this._gridOptions.enableSorting) {
            throw new Error('[Angular-Slickgrid] in order to use "updateSorting" method, you need to have Sortable Columns defined in your grid and "enableSorting" set in your Grid Options');
        }
        if (Array.isArray(sorters)) {
            var backendApi = this._gridOptions && this._gridOptions.backendServiceApi;
            if (backendApi) {
                var backendApiService = backendApi && backendApi.service;
                if (backendApiService) {
                    backendApiService.updateSorters(undefined, sorters);
                    if (triggerBackendQuery) {
                        refreshBackendDataset(this._gridOptions);
                    }
                }
            }
            else {
                this.loadGridSorters(sorters);
            }
            if (emitChangedEvent) {
                var emitterType = backendApi ? EmitterType.remote : EmitterType.local;
                this.emitSortChanged(emitterType);
            }
        }
    };
    // --
    // private functions
    // -------------------
    /**
     * Loop through all column definitions and do the following 2 things
     * 1. disable/enable the "sortable" property of each column
     * 2. loop through each Header Menu commands and change the "hidden" commands to show/hide depending if it's enabled/disabled
     * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.
     * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)
     * @param {boolean} isDisabling - are we disabling the sort functionality? Defaults to true
     */
    SortService.prototype.disableAllSortingCommands = function (isDisabling) {
        if (isDisabling === void 0) { isDisabling = true; }
        var columnDefinitions = this._grid.getColumns();
        // loop through column definition to hide/show header menu commands
        columnDefinitions.forEach(function (col) {
            if (typeof col.sortable !== undefined) {
                col.sortable = !isDisabling;
            }
            if (col && col.header && col.header.menu) {
                col.header.menu.items.forEach(function (menuItem) {
                    if (menuItem && typeof menuItem !== 'string') {
                        var menuCommand = menuItem.command;
                        if (menuCommand === 'sort-asc' || menuCommand === 'sort-desc' || menuCommand === 'clear-sort') {
                            menuItem.hidden = isDisabling;
                        }
                    }
                });
            }
        });
        // loop through column definition to hide/show grid menu commands
        if (this._gridOptions && this._gridOptions.gridMenu && this._gridOptions.gridMenu.customItems) {
            this._gridOptions.gridMenu.customItems.forEach(function (menuItem) {
                if (menuItem && typeof menuItem !== 'string') {
                    var menuCommand = menuItem.command;
                    if (menuCommand === 'clear-sorting') {
                        menuItem.hidden = isDisabling;
                    }
                }
            });
        }
        return columnDefinitions;
    };
    SortService.ctorParameters = function () { return [
        { type: SharedService }
    ]; };
SortService.Éµfac = function SortService_Factory(t) { return new (t || SortService)(Éµngcc0.ÉµÉµinject(SharedService)); };
SortService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: SortService, factory: function (t) { return SortService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(SortService, [{
        type: Injectable
    }], function () { return [{ type: SharedService }]; }, null); })();
    return SortService;
}());
export { SortService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,