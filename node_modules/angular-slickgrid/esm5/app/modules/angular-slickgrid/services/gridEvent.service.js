import * as ɵngcc0 from '@angular/core';
var GridEventService = /** @class */ (function () {
    function GridEventService() {
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(GridEventService.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    GridEventService.prototype.dispose = function () {
        this._eventHandler.unsubscribeAll();
        this.handleOnCellChange = null;
        this.handleOnCellClick = null;
    };
    /* OnCellChange Event */
    GridEventService.prototype.bindOnCellChange = function (grid, dataView) {
        var _this = this;
        // subscribe to this Slickgrid event of onCellChange
        this._eventHandler.subscribe(grid.onCellChange, function (e, args) {
            _this.handleOnCellChange.call(_this, grid, dataView, e, args);
        });
    };
    /* OnClick Event */
    GridEventService.prototype.bindOnClick = function (grid, dataView) {
        var _this = this;
        this._eventHandler.subscribe(grid.onClick, function (e, args) {
            _this.handleOnCellClick.call(_this, grid, dataView, e, args);
        });
    };
    //
    // private functions
    // ------------------
    /* OnCellChange Event Handler */
    GridEventService.prototype.handleOnCellChange = function (grid, dataView, e, args) {
        if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
            return;
        }
        var column = grid.getColumns()[args.cell];
        // if the column definition has a onCellChange property (a callback function), then run it
        if (typeof column.onCellChange === 'function') {
            // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange
            var returnedArgs = {
                row: args.row,
                cell: args.cell,
                dataView: dataView,
                grid: grid,
                columnDef: column,
                dataContext: grid.getDataItem(args.row)
            };
            // finally call up the Slick.column.onCellChanges.... function
            column.onCellChange(e, returnedArgs);
        }
    };
    /* OnCellClick Event Handler */
    GridEventService.prototype.handleOnCellClick = function (grid, dataView, e, args) {
        if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
            return;
        }
        var column = grid && grid.getColumns && grid.getColumns()[args.cell];
        var gridOptions = grid && grid.getOptions && grid.getOptions() || {};
        // only when using autoCommitEdit, we will make the cell active (in focus) when clicked
        // setting the cell as active as a side effect and if autoCommitEdit is set to false then the Editors won't save correctly
        if (gridOptions.enableCellNavigation && (!gridOptions.editable || (gridOptions.editable && gridOptions.autoCommitEdit))) {
            grid.setActiveCell(args.row, args.cell);
        }
        // if the column definition has a onCellClick property (a callback function), then run it
        if (typeof column.onCellClick === 'function') {
            // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick
            var returnedArgs = {
                row: args.row,
                cell: args.cell,
                dataView: dataView,
                grid: grid,
                columnDef: column,
                dataContext: grid.getDataItem(args.row)
            };
            // finally call up the Slick.column.onCellClick.... function
            column.onCellClick(e, returnedArgs);
        }
    };
GridEventService.ɵfac = function GridEventService_Factory(t) { return new (t || GridEventService)(); };
GridEventService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridEventService, factory: function (t) { return GridEventService.ɵfac(t); } });

    return GridEventService;
}());
export { GridEventService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,