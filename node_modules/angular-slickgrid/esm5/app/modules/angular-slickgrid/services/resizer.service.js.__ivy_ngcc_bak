import { Subject } from 'rxjs';
// global constants, height/width are in pixels
var DATAGRID_MIN_HEIGHT = 180;
var DATAGRID_MIN_WIDTH = 300;
var DATAGRID_BOTTOM_PADDING = 20;
var DATAGRID_FOOTER_HEIGHT = 20;
var DATAGRID_PAGINATION_HEIGHT = 35;
var ResizerService = /** @class */ (function () {
    function ResizerService() {
        this._resizePaused = false;
        this.onGridAfterResize = new Subject();
        this.onGridBeforeResize = new Subject();
    }
    Object.defineProperty(ResizerService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResizerService.prototype, "_gridUid", {
        get: function () {
            return (this._grid && this._grid.getUID) ? this._grid.getUID() : this._gridOptions && this._gridOptions.gridId;
        },
        enumerable: true,
        configurable: true
    });
    ResizerService.prototype.init = function (grid, fixedDimensions) {
        if (!grid || !this._gridOptions) {
            throw new Error("\n      Angular-Slickgrid resizer requires a valid Grid object and Grid Options defined.\n      You can fix this by setting your gridOption to use \"enableAutoResize\" or create an instance of the ResizerService by calling bindAutoResizeDataGrid()");
        }
        this._grid = grid;
        var containerNode = grid && grid.getContainerNode && grid.getContainerNode() || '';
        this._gridDomElm = $(containerNode);
        var autoResizeOptions = this._gridOptions && this._gridOptions.autoResize || {};
        this._gridContainerElm = (autoResizeOptions && autoResizeOptions.containerId) ? $("#" + autoResizeOptions.containerId) : $("#" + this._gridOptions.gridContainerId);
        if (fixedDimensions) {
            this._fixedHeight = fixedDimensions.height;
            this._fixedWidth = fixedDimensions.width;
        }
    };
    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space
     * Options: we could also provide a % factor to resize on each height/width independently
     */
    ResizerService.prototype.bindAutoResizeDataGrid = function (newSizes) {
        // if we can't find the grid to resize, return without binding anything
        if (this._gridDomElm === undefined || this._gridDomElm.offset() === undefined) {
            return null;
        }
        // -- 1st resize the datagrid size at first load (we need this because the .on event is not triggered on first load)
        // -- also we add a slight delay (in ms) so that we resize after the grid render is done
        this.resizeGrid(10, newSizes);
        // -- 2nd bind a trigger on the Window DOM element, so that it happens also when resizing after first load
        // -- bind auto-resize to Window object only if it exist
        $(window).on("resize.grid." + this._gridUid, this.handleResizeGrid.bind(this, newSizes));
    };
    ResizerService.prototype.handleResizeGrid = function (newSizes, event) {
        this.onGridBeforeResize.next(event);
        if (!this._resizePaused) {
            // for some yet unknown reason, calling the resize twice removes any stuttering/flickering
            // when changing the height and makes it much smoother experience
            this.resizeGrid(0, newSizes);
            this.resizeGrid(0, newSizes);
        }
    };
    /**
     * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation
     * object gridOptions
     */
    ResizerService.prototype.calculateGridNewDimensions = function (gridOptions) {
        var autoResizeOptions = gridOptions && gridOptions.autoResize || {};
        if (!window || this._gridContainerElm === undefined || this._gridDomElm.offset() === undefined) {
            return null;
        }
        // calculate bottom padding
        // if using pagination, we need to add the pagination height to this bottom padding
        var bottomPadding = (autoResizeOptions && autoResizeOptions.bottomPadding !== undefined) ? autoResizeOptions.bottomPadding : DATAGRID_BOTTOM_PADDING;
        if (bottomPadding && gridOptions.enablePagination) {
            bottomPadding += DATAGRID_PAGINATION_HEIGHT;
        }
        // optionally show a custom footer with the data metrics (dataset length and last updated timestamp)
        if (bottomPadding && gridOptions.showCustomFooter) {
            bottomPadding += gridOptions.customFooterOptions && gridOptions.customFooterOptions.footerHeight || DATAGRID_FOOTER_HEIGHT;
        }
        var gridHeight = 0;
        var gridOffsetTop = 0;
        // which DOM element are we using to calculate the available size for the grid?
        if (autoResizeOptions.calculateAvailableSizeBy === 'container') {
            // uses the container's height to calculate grid height without any top offset
            gridHeight = this._gridContainerElm.height() || 0;
        }
        else {
            // uses the browser's window height with its top offset to calculate grid height
            gridHeight = window.innerHeight || 0;
            var coordOffsetTop = this._gridDomElm.offset();
            gridOffsetTop = (coordOffsetTop !== undefined) ? coordOffsetTop.top : 0;
        }
        var availableHeight = gridHeight - gridOffsetTop - bottomPadding;
        var availableWidth = this._gridContainerElm.width() || window.innerWidth || 0;
        var maxHeight = autoResizeOptions && autoResizeOptions.maxHeight || undefined;
        var minHeight = (autoResizeOptions && autoResizeOptions.minHeight !== undefined) ? autoResizeOptions.minHeight : DATAGRID_MIN_HEIGHT;
        var maxWidth = autoResizeOptions && autoResizeOptions.maxWidth || undefined;
        var minWidth = (autoResizeOptions && autoResizeOptions.minWidth !== undefined) ? autoResizeOptions.minWidth : DATAGRID_MIN_WIDTH;
        var newHeight = availableHeight;
        var newWidth = (autoResizeOptions && autoResizeOptions.sidePadding) ? availableWidth - autoResizeOptions.sidePadding : availableWidth;
        // optionally (when defined), make sure that grid height & width are within their thresholds
        if (newHeight < minHeight) {
            newHeight = minHeight;
        }
        if (maxHeight && newHeight > maxHeight) {
            newHeight = maxHeight;
        }
        if (newWidth < minWidth) {
            newWidth = minWidth;
        }
        if (maxWidth && newWidth > maxWidth) {
            newWidth = maxWidth;
        }
        // return the new dimensions unless a fixed height/width was defined
        return {
            height: this._fixedHeight || newHeight,
            width: this._fixedWidth || newWidth
        };
    };
    /**
     * Dispose function when element is destroyed
     */
    ResizerService.prototype.dispose = function () {
        $(window).off("resize.grid." + this._gridUid);
    };
    /**
     * Return the last resize dimensions used by the service
     * @return last dimensions
     */
    ResizerService.prototype.getLastResizeDimensions = function () {
        return this._lastDimensions;
    };
    /** Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to. */
    ResizerService.prototype.pauseResizer = function (isResizePaused) {
        this._resizePaused = isResizePaused;
    };
    /** Resize the datagrid to fit the browser height & width */
    ResizerService.prototype.resizeGrid = function (delay, newSizes) {
        var _this = this;
        if (delay === void 0) { delay = 10; }
        return new Promise(function (resolve) {
            // because of the javascript async nature, we might want to delay the resize a little bit
            delay = delay || 0;
            if (delay > 0) {
                clearTimeout(_this._timer);
                _this._timer = setTimeout(function () { return resolve(_this.resizeGridCallback(newSizes)); }, delay);
            }
            else {
                resolve(_this.resizeGridCallback(newSizes));
            }
        });
    };
    ResizerService.prototype.resizeGridCallback = function (newSizes) {
        var lastDimensions = this.resizeGridWithDimensions(newSizes);
        this.onGridAfterResize.next(lastDimensions);
        return lastDimensions;
    };
    ResizerService.prototype.resizeGridWithDimensions = function (newSizes) {
        // calculate the available sizes with minimum height defined as a constant
        var availableDimensions = this.calculateGridNewDimensions(this._gridOptions);
        var gridContainerElm = $("#" + this._gridOptions.gridContainerId) || {};
        if ((newSizes || availableDimensions) && this._gridDomElm.length > 0) {
            // get the new sizes, if new sizes are passed (not 0), we will use them else use available space
            // basically if user passes 1 of the dimension, let say he passes just the height,
            // we will use the height as a fixed height but the width will be resized by it's available space
            var newHeight = (newSizes && newSizes.height) ? newSizes.height : availableDimensions.height;
            var newWidth = (newSizes && newSizes.width) ? newSizes.width : availableDimensions.width;
            // apply these new height/width to the datagrid
            if (!this._gridOptions.autoHeight) {
                this._gridDomElm.height(newHeight);
                gridContainerElm.height(newHeight);
            }
            this._gridDomElm.width(newWidth);
            gridContainerElm.width(newWidth);
            // resize the slickgrid canvas on all browser except some IE versions
            // exclude all IE below IE11
            // IE11 wants to be a better standard (W3C) follower (finally) they even changed their appName output to also have 'Netscape'
            if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && this._grid && this._grid.resizeCanvas) {
                this._grid.resizeCanvas();
            }
            // also call the grid auto-size columns so that it takes available space when going bigger
            if (this._gridOptions && this._gridOptions.enableAutoSizeColumns && this._grid.autosizeColumns) {
                // make sure that the grid still exist (by looking if the Grid UID is found in the DOM tree) to avoid SlickGrid error "missing stylesheet"
                if (this._gridUid && $("." + this._gridUid).length > 0) {
                    this._grid.autosizeColumns();
                }
            }
            // keep last resized dimensions & resolve them to the Promise
            this._lastDimensions = {
                height: newHeight,
                width: newWidth
            };
            if ((this._gridOptions.enablePagination || this._gridOptions.backendServiceApi)) {
                this._lastDimensions.heightWithPagination = newHeight + DATAGRID_PAGINATION_HEIGHT;
            }
        }
        return this._lastDimensions;
    };
    return ResizerService;
}());
export { ResizerService };
//# sourceMappingURL=data:application/json;base64,