import * as tslib_1 from "tslib";
import { SharedService } from './shared.service';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var TreeDataService = /** @class */ (function () {
    function TreeDataService(sharedService) {
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(TreeDataService.prototype, "dataset", {
        get: function () {
            return this.dataView && this.dataView.getItems && this.dataView.getItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDataService.prototype, "datasetHierarchical", {
        get: function () {
            return this.sharedService.hierarchicalDataset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDataService.prototype, "dataView", {
        get: function () {
            return this._grid && this._grid.getData && this._grid.getData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDataService.prototype, "gridOptions", {
        get: function () {
            return this._grid && this._grid.getOptions && this._grid.getOptions() || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDataService.prototype, "eventHandler", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    TreeDataService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        if (this._eventHandler && this._eventHandler.unsubscribeAll) {
            this._eventHandler.unsubscribeAll();
        }
    };
    TreeDataService.prototype.init = function (grid) {
        this._grid = grid;
        // subscribe to the SlickGrid event and call the backend execution
        this._eventHandler.subscribe(grid.onClick, this.handleOnCellClick.bind(this));
    };
    TreeDataService.prototype.handleOnCellClick = function (event, args) {
        if (event && args) {
            var targetElm = event.target || {};
            var treeDataOptions = this.gridOptions.treeDataOptions;
            var collapsedPropName = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';
            var idPropName = this.gridOptions.datasetIdPropertyName || 'id';
            if (targetElm && targetElm.className) {
                var hasToggleClass = targetElm.className.indexOf('toggle') >= 0 || false;
                if (hasToggleClass) {
                    var item = this.dataView.getItem(args.row);
                    if (item) {
                        item[collapsedPropName] = !item[collapsedPropName] ? true : false;
                        this.dataView.updateItem(item[idPropName], item);
                        this._grid.invalidate();
                    }
                    event.stopImmediatePropagation();
                }
            }
        }
    };
    TreeDataService.prototype.toggleTreeDataCollapse = function (collapsing) {
        if (this.gridOptions) {
            var treeDataOptions = this.gridOptions.treeDataOptions;
            if (this.gridOptions.enableTreeData) {
                var items = this.dataView.getItems() || [];
                var collapsedPropName_1 = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';
                items.forEach(function (item) { return item[collapsedPropName_1] = collapsing; });
                this.dataView.setItems(items);
                this._grid.invalidate();
            }
        }
    };
    TreeDataService.ctorParameters = function () { return [
        { type: SharedService }
    ]; };
TreeDataService.ɵfac = function TreeDataService_Factory(t) { return new (t || TreeDataService)(ɵngcc0.ɵɵinject(SharedService)); };
TreeDataService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeDataService, factory: function (t) { return TreeDataService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeDataService, [{
        type: Injectable
    }], function () { return [{ type: SharedService }]; }, null); })();
    return TreeDataService;
}());
export { TreeDataService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,