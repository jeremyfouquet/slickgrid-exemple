import * as tslib_1 from "tslib";
// import common 3rd party SlickGrid plugins/libs
import 'slickgrid/plugins/slick.cellrangedecorator';
import 'slickgrid/plugins/slick.cellrangeselector';
import 'slickgrid/plugins/slick.cellselectionmodel';
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ExtensionName, } from '../models/index';
import { AutoTooltipExtension, CellExternalCopyManagerExtension, CellMenuExtension, CheckboxSelectorExtension, ColumnPickerExtension, ContextMenuExtension, DraggableGroupingExtension, GridMenuExtension, GroupItemMetaProviderExtension, HeaderButtonExtension, HeaderMenuExtension, RowDetailViewExtension, RowMoveManagerExtension, RowSelectionExtension, } from '../extensions/index';
import { SharedService } from './shared.service';
var ExtensionService = /** @class */ (function () {
    function ExtensionService(autoTooltipExtension, cellExternalCopyExtension, cellMenuExtension, checkboxSelectorExtension, columnPickerExtension, contextMenuExtension, draggableGroupingExtension, gridMenuExtension, groupItemMetaExtension, headerButtonExtension, headerMenuExtension, rowDetailViewExtension, rowMoveManagerExtension, rowSelectionExtension, sharedService, translate) {
        this.autoTooltipExtension = autoTooltipExtension;
        this.cellExternalCopyExtension = cellExternalCopyExtension;
        this.cellMenuExtension = cellMenuExtension;
        this.checkboxSelectorExtension = checkboxSelectorExtension;
        this.columnPickerExtension = columnPickerExtension;
        this.contextMenuExtension = contextMenuExtension;
        this.draggableGroupingExtension = draggableGroupingExtension;
        this.gridMenuExtension = gridMenuExtension;
        this.groupItemMetaExtension = groupItemMetaExtension;
        this.headerButtonExtension = headerButtonExtension;
        this.headerMenuExtension = headerMenuExtension;
        this.rowDetailViewExtension = rowDetailViewExtension;
        this.rowMoveManagerExtension = rowMoveManagerExtension;
        this.rowSelectionExtension = rowSelectionExtension;
        this.sharedService = sharedService;
        this.translate = translate;
        this._extensionCreatedList = {};
        this._extensionList = {};
    }
    Object.defineProperty(ExtensionService.prototype, "extensionList", {
        get: function () {
            return this._extensionList;
        },
        enumerable: true,
        configurable: true
    });
    /** Dispose of all the controls & plugins */
    ExtensionService.prototype.dispose = function () {
        var e_1, _a, e_2, _b;
        this.sharedService.grid = null;
        this.sharedService.visibleColumns = [];
        try {
            // dispose of each control/plugin & reset the list
            for (var _c = tslib_1.__values(Object.keys(this._extensionList)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var extensionName = _d.value;
                if (this._extensionList.hasOwnProperty(extensionName)) {
                    var extension = this._extensionList[extensionName];
                    if (extension && extension.class && extension.class.dispose) {
                        extension.class.dispose();
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = tslib_1.__values(Object.keys(this._extensionList)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                delete this._extensionList[key];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /** Get all columns (includes visible and non-visible) */
    ExtensionService.prototype.getAllColumns = function () {
        return this.sharedService.allColumns || [];
    };
    /** Get only visible columns */
    ExtensionService.prototype.getVisibleColumns = function () {
        return this.sharedService.visibleColumns || [];
    };
    /**
     * Get an Extension by it's name
     *  @param name
     */
    ExtensionService.prototype.getExtensionByName = function (name) {
        if (this._extensionList && this._extensionList[name]) {
            return this._extensionList[name];
        }
        return undefined;
    };
    /**
     * Get the instance of the SlickGrid addon (control or plugin).
     * This is the raw addon coming directly from SlickGrid itself, not to confuse with Angular-Slickgrid extension
     *  @param name
     */
    ExtensionService.prototype.getSlickgridAddonInstance = function (name) {
        var extension = this.getExtensionByName(name);
        if (extension && extension.class && (extension.instance || extension.addon)) {
            if (extension.class && extension.class.getAddonInstance) {
                return extension.class.getAddonInstance();
            }
            return extension.instance;
        }
        return null;
    };
    /** Auto-resize all the column in the grid to fit the grid width */
    ExtensionService.prototype.autoResizeColumns = function () {
        this.sharedService.grid.autosizeColumns();
    };
    /** Bind/Create different Controls or Plugins after the Grid is created */
    ExtensionService.prototype.bindDifferentExtensions = function () {
        var _this = this;
        if (this.sharedService && this.sharedService.gridOptions) {
            // make sure all columns are translated before creating ColumnPicker/GridMenu Controls
            // this is to avoid having hidden columns not being translated on first load
            if (this.sharedService.gridOptions.enableTranslate) {
                // eventually deprecate the "headerKey" and use only the "nameKey"
                this.translateItems(this.sharedService.allColumns, 'headerKey', 'name');
                this.translateItems(this.sharedService.allColumns, 'nameKey', 'name');
            }
            // Auto Tooltip Plugin
            if (this.sharedService.gridOptions.enableAutoTooltip) {
                if (this.autoTooltipExtension && this.autoTooltipExtension.register) {
                    var instance = this.autoTooltipExtension.register();
                    this._extensionList[ExtensionName.autoTooltip] = { name: ExtensionName.autoTooltip, class: this.autoTooltipExtension, addon: instance, instance: instance };
                }
            }
            // Cell External Copy Manager Plugin (Excel Like)
            if (this.sharedService.gridOptions.enableExcelCopyBuffer) {
                if (this.cellExternalCopyExtension && this.cellExternalCopyExtension.register) {
                    var instance = this.cellExternalCopyExtension.register();
                    this._extensionList[ExtensionName.cellExternalCopyManager] = { name: ExtensionName.cellExternalCopyManager, class: this.cellExternalCopyExtension, addon: instance, instance: instance };
                }
            }
            // (Action) Cell Menu Plugin
            if (this.sharedService.gridOptions.enableCellMenu) {
                if (this.cellMenuExtension && this.cellMenuExtension.register) {
                    var instance = this.cellMenuExtension.register();
                    this._extensionList[ExtensionName.cellMenu] = { name: ExtensionName.cellMenu, class: this.cellMenuExtension, addon: instance, instance: instance };
                }
            }
            // Row Selection Plugin
            // this extension should be registered BEFORE the CheckboxSelector, RowDetail or RowMoveManager since it can be use by these 2 plugins
            if (!this.getExtensionByName(ExtensionName.rowSelection) && (this.sharedService.gridOptions.enableRowSelection || this.sharedService.gridOptions.enableCheckboxSelector || this.sharedService.gridOptions.enableRowDetailView || this.sharedService.gridOptions.enableRowMoveManager)) {
                if (this.rowSelectionExtension && this.rowSelectionExtension.register) {
                    var instance = this.rowSelectionExtension.register();
                    this._extensionList[ExtensionName.rowSelection] = { name: ExtensionName.rowSelection, class: this.rowSelectionExtension, addon: instance, instance: instance };
                }
            }
            // Checkbox Selector Plugin
            if (this.sharedService.gridOptions.enableCheckboxSelector) {
                if (this.checkboxSelectorExtension && this.checkboxSelectorExtension.register) {
                    var rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);
                    this.checkboxSelectorExtension.register(rowSelectionExtension);
                    var createdExtension = this.getCreatedExtensionByName(ExtensionName.checkboxSelector); // get the instance from when it was really created earlier
                    var instance = createdExtension && createdExtension.instance;
                    this._extensionList[ExtensionName.checkboxSelector] = { name: ExtensionName.checkboxSelector, class: this.checkboxSelectorExtension, addon: instance, instance: instance };
                }
            }
            // Column Picker Control
            if (this.sharedService.gridOptions.enableColumnPicker) {
                if (this.columnPickerExtension && this.columnPickerExtension.register) {
                    var instance = this.columnPickerExtension.register();
                    this._extensionList[ExtensionName.columnPicker] = { name: ExtensionName.columnPicker, class: this.columnPickerExtension, addon: instance, instance: instance };
                }
            }
            // Context Menu Control
            if (this.sharedService.gridOptions.enableContextMenu) {
                if (this.contextMenuExtension && this.contextMenuExtension.register) {
                    var instance = this.contextMenuExtension.register();
                    this._extensionList[ExtensionName.contextMenu] = { name: ExtensionName.contextMenu, class: this.contextMenuExtension, addon: instance, instance: instance };
                }
            }
            // Draggable Grouping Plugin
            if (this.sharedService.gridOptions.enableDraggableGrouping) {
                if (this.draggableGroupingExtension && this.draggableGroupingExtension.register) {
                    var instance = this.draggableGroupingExtension.register();
                    this._extensionList[ExtensionName.draggableGrouping] = { name: ExtensionName.draggableGrouping, class: this.draggableGroupingExtension, addon: instance, instance: instance };
                }
            }
            // Grid Menu Control
            if (this.sharedService.gridOptions.enableGridMenu) {
                if (this.gridMenuExtension && this.gridMenuExtension.register) {
                    var instance = this.gridMenuExtension.register();
                    this._extensionList[ExtensionName.gridMenu] = { name: ExtensionName.gridMenu, class: this.gridMenuExtension, addon: instance, instance: instance };
                }
            }
            // Grouping Plugin
            // register the group item metadata provider to add expand/collapse group handlers
            if (this.sharedService.gridOptions.enableDraggableGrouping || this.sharedService.gridOptions.enableGrouping) {
                if (this.groupItemMetaExtension && this.groupItemMetaExtension.register) {
                    var instance = this.groupItemMetaExtension.register();
                    this._extensionList[ExtensionName.groupItemMetaProvider] = { name: ExtensionName.groupItemMetaProvider, class: this.groupItemMetaExtension, addon: instance, instance: instance };
                }
            }
            // Header Button Plugin
            if (this.sharedService.gridOptions.enableHeaderButton) {
                if (this.headerButtonExtension && this.headerButtonExtension.register) {
                    var instance = this.headerButtonExtension.register();
                    this._extensionList[ExtensionName.headerButton] = { name: ExtensionName.headerButton, class: this.headerButtonExtension, addon: instance, instance: instance };
                }
            }
            // Header Menu Plugin
            if (this.sharedService.gridOptions.enableHeaderMenu) {
                if (this.headerMenuExtension && this.headerMenuExtension.register) {
                    var instance = this.headerMenuExtension.register();
                    this._extensionList[ExtensionName.headerMenu] = { name: ExtensionName.headerMenu, class: this.headerMenuExtension, addon: instance, instance: instance };
                }
            }
            // Row Detail View Plugin
            if (this.sharedService.gridOptions.enableRowDetailView) {
                if (this.rowDetailViewExtension && this.rowDetailViewExtension.register) {
                    var rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);
                    this.rowDetailViewExtension.register(rowSelectionExtension);
                    var createdExtension = this.getCreatedExtensionByName(ExtensionName.rowDetailView); // get the plugin from when it was really created earlier
                    var instance = createdExtension && createdExtension.instance;
                    this._extensionList[ExtensionName.rowDetailView] = { name: ExtensionName.rowDetailView, class: this.rowDetailViewExtension, addon: instance, instance: instance };
                }
            }
            // Row Move Manager Plugin
            if (this.sharedService.gridOptions.enableRowMoveManager && this.rowMoveManagerExtension && this.rowMoveManagerExtension.register) {
                var rowSelectionExtension = this.getExtensionByName(ExtensionName.rowSelection);
                this.rowMoveManagerExtension.register(rowSelectionExtension);
                var createdExtension = this.getCreatedExtensionByName(ExtensionName.rowMoveManager); // get the instance from when it was really created earlier
                var instance = createdExtension && createdExtension.instance;
                this._extensionList[ExtensionName.rowMoveManager] = { name: ExtensionName.rowMoveManager, class: this.rowMoveManagerExtension, addon: instance, instance: instance };
            }
            // manually register other plugins
            if (this.sharedService.gridOptions.registerPlugins !== undefined) {
                var grid_1 = this.sharedService.grid;
                var gridOptions = this.sharedService.gridOptions;
                if (Array.isArray(gridOptions.registerPlugins)) {
                    gridOptions.registerPlugins.forEach(function (plugin) {
                        grid_1.registerPlugin(plugin);
                        var instance = grid_1.getPluginByName(plugin && plugin.name || '');
                        _this._extensionList[ExtensionName.noname] = { name: ExtensionName.noname, class: null, addon: instance, instance: instance };
                    });
                }
                else {
                    var plugin = gridOptions.registerPlugins;
                    grid_1.registerPlugin(plugin);
                    var instance = grid_1.getPluginByName(plugin && plugin.name || '');
                    this._extensionList[ExtensionName.noname] = { name: ExtensionName.noname, class: null, addon: instance, instance: instance };
                }
            }
        }
    };
    /**
     * Bind/Create certain plugins before the Grid creation to avoid having odd behaviors.
     * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then
     * @param columnDefinitions
     * @param options
     */
    ExtensionService.prototype.createExtensionsBeforeGridCreation = function (columnDefinitions, options) {
        if (options.enableCheckboxSelector) {
            if (!this.getCreatedExtensionByName(ExtensionName.checkboxSelector)) {
                var checkboxInstance = this.checkboxSelectorExtension.create(columnDefinitions, options);
                this._extensionCreatedList[ExtensionName.checkboxSelector] = { name: ExtensionName.checkboxSelector, addon: checkboxInstance, instance: checkboxInstance, class: this.checkboxSelectorExtension };
            }
        }
        if (options.enableRowMoveManager) {
            if (!this.getCreatedExtensionByName(ExtensionName.rowMoveManager)) {
                var rowMoveInstance = this.rowMoveManagerExtension.create(columnDefinitions, options);
                this._extensionCreatedList[ExtensionName.rowMoveManager] = { name: ExtensionName.rowMoveManager, addon: rowMoveInstance, instance: rowMoveInstance, class: this.rowMoveManagerExtension };
            }
        }
        if (options.enableRowDetailView) {
            if (!this.getCreatedExtensionByName(ExtensionName.rowDetailView)) {
                var rowDetailInstance = this.rowDetailViewExtension.create(columnDefinitions, options);
                this._extensionCreatedList[ExtensionName.rowDetailView] = { name: ExtensionName.rowDetailView, addon: rowDetailInstance, instance: rowDetailInstance, class: this.rowDetailViewExtension };
            }
        }
        if (options.enableDraggableGrouping) {
            if (!this.getCreatedExtensionByName(ExtensionName.draggableGrouping)) {
                var draggableInstance = this.draggableGroupingExtension.create(options);
                options.enableColumnReorder = draggableInstance.getSetupColumnReorder;
                this._extensionCreatedList[ExtensionName.draggableGrouping] = { name: ExtensionName.draggableGrouping, addon: draggableInstance, instance: draggableInstance, class: draggableInstance.getSetupColumnReorder };
            }
        }
    };
    /** Hide a column from the grid */
    ExtensionService.prototype.hideColumn = function (column) {
        if (this.sharedService && this.sharedService.grid && this.sharedService.grid.getColumns && this.sharedService.grid.setColumns) {
            var columnIndex = this.sharedService.grid.getColumnIndex(column.id);
            this.sharedService.visibleColumns = this.removeColumnByIndex(this.sharedService.grid.getColumns(), columnIndex);
            this.sharedService.grid.setColumns(this.sharedService.visibleColumns);
        }
    };
    /** Refresh the dataset through the Backend Service */
    ExtensionService.prototype.refreshBackendDataset = function (gridOptions) {
        this.gridMenuExtension.refreshBackendDataset(gridOptions);
    };
    /**
     * Remove a column from the grid by it's index in the grid
     * @param columns input
     * @param index
     */
    ExtensionService.prototype.removeColumnByIndex = function (columns, index) {
        if (Array.isArray(columns)) {
            return columns.filter(function (el, i) { return index !== i; });
        }
        return columns;
    };
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    ExtensionService.prototype.translateCellMenu = function () {
        if (this.cellMenuExtension && this.cellMenuExtension.translateCellMenu) {
            this.cellMenuExtension.translateCellMenu();
        }
    };
    /** Translate the Column Picker and it's last 2 checkboxes */
    ExtensionService.prototype.translateColumnPicker = function () {
        if (this.columnPickerExtension && this.columnPickerExtension.translateColumnPicker) {
            this.columnPickerExtension.translateColumnPicker();
        }
    };
    /** Translate the Context Menu titles, we need to loop through all column definition to re-translate them */
    ExtensionService.prototype.translateContextMenu = function () {
        if (this.contextMenuExtension && this.contextMenuExtension.translateContextMenu) {
            this.contextMenuExtension.translateContextMenu();
        }
    };
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    ExtensionService.prototype.translateGridMenu = function () {
        if (this.gridMenuExtension && this.gridMenuExtension.translateGridMenu) {
            this.gridMenuExtension.translateGridMenu();
        }
    };
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    ExtensionService.prototype.translateHeaderMenu = function () {
        if (this.headerMenuExtension && this.headerMenuExtension.translateHeaderMenu) {
            this.headerMenuExtension.translateHeaderMenu();
        }
    };
    /**
     * Translate manually the header titles.
     * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale
     * @param locale to use
     * @param new column definitions (optional)
     */
    ExtensionService.prototype.translateColumnHeaders = function (locale, newColumnDefinitions) {
        if (this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        if (locale) {
            this.translate.use(locale);
        }
        var columnDefinitions = newColumnDefinitions;
        if (!columnDefinitions) {
            columnDefinitions = this.sharedService.columnDefinitions;
        }
        // eventually deprecate the "headerKey" and use only the "nameKey"
        this.translateItems(columnDefinitions, 'headerKey', 'name');
        this.translateItems(this.sharedService.allColumns, 'headerKey', 'name');
        this.translateItems(columnDefinitions, 'nameKey', 'name');
        this.translateItems(this.sharedService.allColumns, 'nameKey', 'name');
        // re-render the column headers
        this.renderColumnHeaders(columnDefinitions, Array.isArray(newColumnDefinitions));
        this.gridMenuExtension.translateGridMenu();
    };
    /**
     * Render (or re-render) the column headers from column definitions.
     * calling setColumns() will trigger a grid re-render
     */
    ExtensionService.prototype.renderColumnHeaders = function (newColumnDefinitions, forceColumnDefinitionsOverwrite) {
        if (forceColumnDefinitionsOverwrite === void 0) { forceColumnDefinitionsOverwrite = false; }
        var collection = newColumnDefinitions;
        if (!collection) {
            collection = this.sharedService.columnDefinitions;
        }
        if (Array.isArray(collection) && this.sharedService.grid && this.sharedService.grid.setColumns) {
            if (collection.length > this.sharedService.allColumns.length || forceColumnDefinitionsOverwrite) {
                this.sharedService.allColumns = collection;
            }
            this.sharedService.grid.setColumns(collection);
        }
        // dispose of previous Column Picker instance, then re-register it and don't forget to overwrite previous instance ref
        if (this.sharedService.gridOptions.enableColumnPicker) {
            this.columnPickerExtension.dispose();
            var instance = this.columnPickerExtension.register();
            var extension = this.getExtensionByName(ExtensionName.columnPicker);
            if (extension) {
                extension.addon = instance;
                extension.instance = instance;
            }
        }
        // dispose of previous Grid Menu instance, then re-register it and don't forget to overwrite previous instance ref
        if (this.sharedService.gridOptions.enableGridMenu) {
            this.gridMenuExtension.dispose();
            var instance = this.gridMenuExtension.register();
            var extension = this.getExtensionByName(ExtensionName.gridMenu);
            if (extension) {
                extension.addon = instance;
                extension.instance = instance;
            }
        }
    };
    //
    // private functions
    // -------------------
    /**
     * Get an Extension that was created by calling its "create" method (there are only 3 extensions which uses this method)
     *  @param name
     */
    ExtensionService.prototype.getCreatedExtensionByName = function (name) {
        if (this._extensionCreatedList && this._extensionCreatedList.hasOwnProperty(name)) {
            return this._extensionCreatedList[name];
        }
        return undefined;
    };
    /** Translate an array of items from an input key and assign translated value to the output key */
    ExtensionService.prototype.translateItems = function (items, inputKey, outputKey) {
        var e_3, _a;
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        if (Array.isArray(items)) {
            try {
                for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                    var item = items_1_1.value;
                    if (item[inputKey]) {
                        item[outputKey] = this.translate && this.translate.currentLang && this.translate.instant(item[inputKey]);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    ExtensionService.ctorParameters = function () { return [
        { type: AutoTooltipExtension },
        { type: CellExternalCopyManagerExtension },
        { type: CellMenuExtension },
        { type: CheckboxSelectorExtension },
        { type: ColumnPickerExtension },
        { type: ContextMenuExtension },
        { type: DraggableGroupingExtension },
        { type: GridMenuExtension },
        { type: GroupItemMetaProviderExtension },
        { type: HeaderButtonExtension },
        { type: HeaderMenuExtension },
        { type: RowDetailViewExtension },
        { type: RowMoveManagerExtension },
        { type: RowSelectionExtension },
        { type: SharedService },
        { type: TranslateService, decorators: [{ type: Optional }] }
    ]; };
    ExtensionService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(15, Optional())
    ], ExtensionService);
    return ExtensionService;
}());
export { ExtensionService };
//# sourceMappingURL=data:application/json;base64,