import * as tslib_1 from "tslib";
import { mapOperatorType, mapOperatorByFieldType } from './utilities';
import { FieldType, OperatorType, SortDirection } from './../models/index';
import QueryBuilder from './graphqlQueryBuilder';
import * as Éµngcc0 from '@angular/core';
var DEFAULT_ITEMS_PER_PAGE = 25;
var DEFAULT_PAGE_SIZE = 20;
var GraphqlService = /** @class */ (function () {
    function GraphqlService() {
        this._currentFilters = [];
        this._currentSorters = [];
        this._datasetIdPropName = 'id';
        this.defaultPaginationOptions = {
            first: DEFAULT_ITEMS_PER_PAGE,
            offset: 0
        };
    }
    Object.defineProperty(GraphqlService.prototype, "columnDefinitions", {
        /** Getter for the Column Definitions */
        get: function () {
            return this._columnDefinitions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GraphqlService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    /** Initialization of the service, which acts as a constructor */
    GraphqlService.prototype.init = function (serviceOptions, pagination, grid) {
        this._grid = grid;
        this.options = serviceOptions || { datasetName: '', columnDefinitions: [] };
        this.pagination = pagination;
        this._datasetIdPropName = this._gridOptions.datasetIdPropertyName || 'id';
        if (grid && grid.getColumns) {
            this._columnDefinitions = (serviceOptions && serviceOptions.columnDefinitions) || grid.getColumns();
        }
    };
    /**
     * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.
     * @param serviceOptions GraphqlServiceOption
     */
    GraphqlService.prototype.buildQuery = function () {
        var e_1, _a, e_2, _b;
        if (!this.options || !this.options.datasetName || (!this._columnDefinitions && !Array.isArray(this.options.columnDefinitions))) {
            throw new Error('GraphQL Service requires the "datasetName" property to properly build the GraphQL query');
        }
        // get the column definitions and exclude some if they were tagged as excluded
        var columnDefinitions = this._columnDefinitions || this.options.columnDefinitions;
        columnDefinitions = columnDefinitions.filter(function (column) { return !column.excludeFromQuery; });
        var queryQb = new QueryBuilder('query');
        var datasetQb = new QueryBuilder(this.options.datasetName);
        var nodesQb = new QueryBuilder('nodes');
        // get all the columnds Ids for the filters to work
        var columnIds = [];
        if (columnDefinitions && Array.isArray(columnDefinitions)) {
            try {
                for (var columnDefinitions_1 = tslib_1.__values(columnDefinitions), columnDefinitions_1_1 = columnDefinitions_1.next(); !columnDefinitions_1_1.done; columnDefinitions_1_1 = columnDefinitions_1.next()) {
                    var column = columnDefinitions_1_1.value;
                    columnIds.push(column.field);
                    // if extra "fields" are passed, also push them to columnIds
                    if (column.fields) {
                        columnIds.push.apply(columnIds, tslib_1.__spread(column.fields));
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (columnDefinitions_1_1 && !columnDefinitions_1_1.done && (_a = columnDefinitions_1.return)) _a.call(columnDefinitions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // Slickgrid also requires the "id" (or the dataset defined unique ide) field to be part of DataView
        // add it to the GraphQL query if it wasn't already part of the list
        if (columnIds.indexOf(this._datasetIdPropName) === -1) {
            columnIds.unshift(this._datasetIdPropName);
        }
        var columnsQuery = this.buildFilterQuery(columnIds);
        var graphqlNodeFields = [];
        if (this._gridOptions.enablePagination !== false) {
            if (this.options.isWithCursor) {
                // ...pageInfo { hasNextPage, endCursor }, edges { cursor, node { _columns_ } }, totalCount: 100
                var edgesQb = new QueryBuilder('edges');
                var pageInfoQb = new QueryBuilder('pageInfo');
                pageInfoQb.find('hasNextPage', 'hasPreviousPage', 'endCursor', 'startCursor');
                nodesQb.find(columnsQuery);
                edgesQb.find(['cursor']);
                graphqlNodeFields = ['totalCount', nodesQb, pageInfoQb, edgesQb];
            }
            else {
                // ...nodes { _columns_ }, totalCount: 100
                nodesQb.find(columnsQuery);
                graphqlNodeFields = ['totalCount', nodesQb];
            }
            // all properties to be returned by the query
            datasetQb.find(graphqlNodeFields);
        }
        else {
            // include all columns to be returned
            datasetQb.find(columnsQuery);
        }
        // add dataset filters, could be Pagination and SortingFilters and/or FieldFilters
        var datasetFilters = {};
        // only add pagination if it's enabled in the grid options
        if (this._gridOptions.enablePagination !== false) {
            datasetFilters = tslib_1.__assign({}, this.options.paginationOptions, { first: ((this.options.paginationOptions && this.options.paginationOptions.first) ? this.options.paginationOptions.first : ((this.pagination && this.pagination.pageSize) ? this.pagination.pageSize : null)) || this.defaultPaginationOptions.first });
            if (!this.options.isWithCursor) {
                datasetFilters.offset = ((this.options.paginationOptions && this.options.paginationOptions.hasOwnProperty('offset')) ? +this.options.paginationOptions['offset'] : 0);
            }
        }
        if (this.options.sortingOptions && Array.isArray(this.options.sortingOptions) && this.options.sortingOptions.length > 0) {
            // orderBy: [{ field:x, direction: 'ASC' }]
            datasetFilters.orderBy = this.options.sortingOptions;
        }
        if (this.options.filteringOptions && Array.isArray(this.options.filteringOptions) && this.options.filteringOptions.length > 0) {
            // filterBy: [{ field: date, operator: '>', value: '2000-10-10' }]
            datasetFilters.filterBy = this.options.filteringOptions;
        }
        if (this.options.addLocaleIntoQuery) {
            // first: 20, ... locale: "en-CA"
            datasetFilters.locale = this._gridOptions && this._gridOptions.i18n && this._gridOptions.i18n.currentLang || this._gridOptions.locale || 'en';
        }
        if (this.options.extraQueryArguments) {
            try {
                // first: 20, ... userId: 123
                for (var _c = tslib_1.__values(this.options.extraQueryArguments), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var queryArgument = _d.value;
                    datasetFilters[queryArgument.field] = queryArgument.value;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        // with pagination:: query { users(first: 20, offset: 0, orderBy: [], filterBy: []) { totalCount: 100, nodes: { _columns_ }}}
        // without pagination:: query { users(orderBy: [], filterBy: []) { _columns_ }}
        datasetQb.filter(datasetFilters);
        queryQb.find(datasetQb);
        var enumSearchProperties = ['direction:', 'field:', 'operator:'];
        return this.trimDoubleQuotesOnEnumField(queryQb.toString(), enumSearchProperties, this.options.keepArgumentFieldDoubleQuotes || false);
    };
    /**
     * From an input array of strings, we want to build a GraphQL query string.
     * The process has to take the dot notation and parse it into a valid GraphQL query
     * Following this SO answer https://stackoverflow.com/a/47705476/1212166
     *
     * INPUT
     *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']
     * OUTPUT
     * firstName, lastName, billing{address{street, zip}}
     * @param inputArray
     */
    GraphqlService.prototype.buildFilterQuery = function (inputArray) {
        var set = function (o, a) {
            if (o === void 0) { o = {}; }
            var k = a.shift();
            o[k] = a.length ? set(o[k], a) : null;
            return o;
        };
        var output = inputArray.reduce(function (o, a) { return set(o, a.split('.')); }, {});
        return JSON.stringify(output)
            .replace(/\"|\:|null/g, '')
            .replace(/^\{/, '')
            .replace(/\}$/, '');
    };
    GraphqlService.prototype.clearFilters = function () {
        this._currentFilters = [];
        this.updateOptions({ filteringOptions: [] });
    };
    GraphqlService.prototype.clearSorters = function () {
        this._currentSorters = [];
        this.updateOptions({ sortingOptions: [] });
    };
    /**
     * Get an initialization of Pagination options
     * @return Pagination Options
     */
    GraphqlService.prototype.getInitPaginationOptions = function () {
        var paginationFirst = this.pagination ? this.pagination.pageSize : DEFAULT_ITEMS_PER_PAGE;
        return (this.options && this.options.isWithCursor) ? { first: paginationFirst } : { first: paginationFirst, offset: 0 };
    };
    /** Get the GraphQL dataset name */
    GraphqlService.prototype.getDatasetName = function () {
        return this.options.datasetName || '';
    };
    /** Get the Filters that are currently used by the grid */
    GraphqlService.prototype.getCurrentFilters = function () {
        return this._currentFilters;
    };
    /** Get the Pagination that is currently used by the grid */
    GraphqlService.prototype.getCurrentPagination = function () {
        return this._currentPagination;
    };
    /** Get the Sorters that are currently used by the grid */
    GraphqlService.prototype.getCurrentSorters = function () {
        return this._currentSorters;
    };
    /*
     * Reset the pagination options
     */
    GraphqlService.prototype.resetPaginationOptions = function () {
        var paginationOptions;
        if (this.options && this.options.isWithCursor) {
            // first, last, after, before
            paginationOptions = {
                after: '',
                before: undefined,
                last: undefined
            };
        }
        else {
            // first, last, offset
            paginationOptions = ((this.options && this.options.paginationOptions) || this.getInitPaginationOptions());
            paginationOptions.offset = 0;
        }
        // save current pagination as Page 1 and page size as "first" set size
        this._currentPagination = {
            pageNumber: 1,
            pageSize: paginationOptions.first || DEFAULT_PAGE_SIZE,
        };
        this.updateOptions({ paginationOptions: paginationOptions });
    };
    GraphqlService.prototype.updateOptions = function (serviceOptions) {
        this.options = tslib_1.__assign({}, this.options, serviceOptions);
    };
    /*
     * FILTERING
     */
    GraphqlService.prototype.processOnFilterChanged = function (event, args) {
        var gridOptions = this._gridOptions;
        var backendApi = gridOptions.backendServiceApi;
        if (backendApi === undefined) {
            throw new Error('Something went wrong in the GraphqlService, "backendServiceApi" is not initialized');
        }
        // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)
        this._currentFilters = this.castFilterToColumnFilters(args.columnFilters);
        if (!args || !args.grid) {
            throw new Error('Something went wrong when trying create the GraphQL Backend Service, it seems that "args" is not populated correctly');
        }
        // loop through all columns to inspect filters & set the query
        this.updateFilters(args.columnFilters, false);
        this.resetPaginationOptions();
        return this.buildQuery();
    };
    /*
     * PAGINATION
     * With cursor, the query can have 4 arguments (first, after, last, before), for example:
     *   users (first:20, after:"YXJyYXljb25uZWN0aW9uOjM=") {
     *     totalCount
     *     pageInfo {
     *       hasNextPage
     *       hasPreviousPage
     *       endCursor
     *       startCursor
     *     }
     *     edges {
     *       cursor
     *       node {
     *         name
     *         gender
     *       }
     *     }
     *   }
     * Without cursor, the query can have 3 arguments (first, last, offset), for example:
     *   users (first:20, offset: 10) {
     *     totalCount
     *     nodes {
     *       name
     *       gender
     *     }
     *   }
     */
    GraphqlService.prototype.processOnPaginationChanged = function (event, args) {
        var pageSize = +(args.pageSize || ((this.pagination) ? this.pagination.pageSize : DEFAULT_PAGE_SIZE));
        this.updatePagination(args.newPage, pageSize);
        // build the GraphQL query which we will use in the WebAPI callback
        return this.buildQuery();
    };
    /*
     * SORTING
     * we will use sorting as per a Facebook suggestion on a Github issue (with some small changes)
     * https://github.com/graphql/graphql-relay-js/issues/20#issuecomment-220494222
     *
     *  users (first: 20, offset: 10, orderBy: [{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]) {
     *    totalCount
     *    nodes {
     *      name
     *      gender
     *    }
     *  }
     */
    // @deprecated note, we should remove "SortChangedArgs" and only use: ColumnSort | MultiColumnSort
    GraphqlService.prototype.processOnSortChanged = function (event, args) {
        var sortColumns = (args.multiColumnSort) ? args.sortCols : new Array({ sortCol: args.sortCol, sortAsc: args.sortAsc });
        // loop through all columns to inspect sorters & set the query
        this.updateSorters(sortColumns);
        // build the GraphQL query which we will use in the WebAPI callback
        return this.buildQuery();
    };
    /**
     * loop through all columns to inspect filters & update backend service filteringOptions
     * @param columnFilters
     */
    GraphqlService.prototype.updateFilters = function (columnFilters, isUpdatedByPresetOrDynamically) {
        var searchByArray = [];
        var searchValue;
        // on filter preset load, we need to keep current filters
        if (isUpdatedByPresetOrDynamically) {
            this._currentFilters = this.castFilterToColumnFilters(columnFilters);
        }
        var _loop_1 = function (columnId) {
            if (columnFilters.hasOwnProperty(columnId)) {
                var columnFilter_1 = columnFilters[columnId];
                // if user defined some "presets", then we need to find the filters from the column definitions instead
                var columnDef = void 0;
                if (isUpdatedByPresetOrDynamically && Array.isArray(this_1._columnDefinitions)) {
                    columnDef = this_1._columnDefinitions.find(function (column) { return column.id === columnFilter_1.columnId; });
                }
                else {
                    columnDef = columnFilter_1.columnDef;
                }
                if (!columnDef) {
                    throw new Error('[GraphQL Service]: Something went wrong in trying to get the column definition of the specified filter (or preset filters). Did you make a typo on the filter columnId?');
                }
                var fieldName = (columnDef.filter && columnDef.filter.queryField) || columnDef.queryFieldFilter || columnDef.queryField || columnDef.field || columnDef.name || '';
                var searchTerms = columnFilter_1 && columnFilter_1.searchTerms || [];
                var fieldSearchValue = (Array.isArray(searchTerms) && searchTerms.length === 1) ? searchTerms[0] : '';
                if (typeof fieldSearchValue === 'undefined') {
                    fieldSearchValue = '';
                }
                if (!fieldName) {
                    throw new Error("GraphQL filter could not find the field name to query the search, your column definition must include a valid \"field\" or \"name\" (optionally you can also use the \"queryfield\").");
                }
                fieldSearchValue = '' + fieldSearchValue; // make sure it's a string
                var matches = fieldSearchValue.match(/^([<>!=\*]{0,2})(.*[^<>!=\*])([\*]?)$/); // group 1: Operator, 2: searchValue, 3: last char is '*' (meaning starts with, ex.: abc*)
                var operator = columnFilter_1.operator || ((matches) ? matches[1] : '');
                searchValue = (!!matches) ? matches[2] : '';
                var lastValueChar = (!!matches) ? matches[3] : (operator === '*z' ? '*' : '');
                // no need to query if search value is empty
                if (fieldName && searchValue === '' && searchTerms.length === 0) {
                    return "continue";
                }
                if (Array.isArray(searchTerms) && searchTerms.length === 1 && typeof searchTerms[0] === 'string' && searchTerms[0].indexOf('..') > 0) {
                    searchTerms = searchTerms[0].split('..');
                    if (!operator) {
                        operator = OperatorType.rangeExclusive;
                    }
                }
                if (typeof searchValue === 'string') {
                    // escaping the search value
                    searchValue = searchValue.replace("'", "''"); // escape single quotes by doubling them
                    if (operator === '*' || operator === 'a*' || operator === '*z' || lastValueChar === '*') {
                        operator = ((operator === '*' || operator === '*z') ? 'EndsWith' : 'StartsWith');
                    }
                }
                // if we didn't find an Operator but we have a Column Operator inside the Filter (DOM Element), we should use its default Operator
                // multipleSelect is "IN", while singleSelect is "EQ", else don't map any operator
                if (!operator && columnDef.filter) {
                    operator = columnDef.filter.operator;
                }
                // when having more than 1 search term (we need to create a CSV string for GraphQL "IN" or "NOT IN" filter search)
                if (searchTerms && searchTerms.length > 1 && (operator === 'IN' || operator === 'NIN' || operator === 'NOTIN' || operator === 'NOT IN' || operator === 'NOT_IN')) {
                    searchValue = searchTerms.join(',');
                }
                else if (searchTerms && searchTerms.length === 2 && (!operator || operator === OperatorType.rangeExclusive || operator === OperatorType.rangeInclusive)) {
                    if (!operator) {
                        operator = OperatorType.rangeExclusive;
                    }
                    searchByArray.push({ field: fieldName, operator: (operator === OperatorType.rangeInclusive ? 'GE' : 'GT'), value: searchTerms[0] });
                    searchByArray.push({ field: fieldName, operator: (operator === OperatorType.rangeInclusive ? 'LE' : 'LT'), value: searchTerms[1] });
                    return "continue";
                }
                // if we still don't have an operator find the proper Operator to use by it's field type
                if (!operator) {
                    operator = mapOperatorByFieldType(columnDef.type || FieldType.string);
                }
                // build the search array
                searchByArray.push({ field: fieldName, operator: mapOperatorType(operator), value: searchValue });
            }
        };
        var this_1 = this;
        for (var columnId in columnFilters) {
            _loop_1(columnId);
        }
        // update the service options with filters for the buildQuery() to work later
        this.updateOptions({ filteringOptions: searchByArray });
    };
    /**
     * Update the pagination component with it's new page number and size
     * @param newPage
     * @param pageSize
     */
    GraphqlService.prototype.updatePagination = function (newPage, pageSize) {
        this._currentPagination = {
            pageNumber: newPage,
            pageSize: pageSize,
        };
        var paginationOptions;
        if (this.options && this.options.isWithCursor) {
            paginationOptions = {
                first: pageSize
            };
        }
        else {
            paginationOptions = {
                first: pageSize,
                offset: (newPage > 1) ? ((newPage - 1) * pageSize) : 0 // recalculate offset but make sure the result is always over 0
            };
        }
        // unless user specifically set "enablePagination" to False, we'll update pagination options in every other cases
        if (this._gridOptions && (this._gridOptions.enablePagination || !this._gridOptions.hasOwnProperty('enablePagination'))) {
            this.updateOptions({ paginationOptions: paginationOptions });
        }
    };
    /**
     * loop through all columns to inspect sorters & update backend service sortingOptions
     * @param columnFilters
     */
    GraphqlService.prototype.updateSorters = function (sortColumns, presetSorters) {
        var e_3, _a;
        var _this = this;
        var currentSorters = [];
        var graphqlSorters = [];
        if (!sortColumns && presetSorters) {
            // make the presets the current sorters, also make sure that all direction are in uppercase for GraphQL
            currentSorters = presetSorters;
            currentSorters.forEach(function (sorter) { return sorter.direction = sorter.direction.toUpperCase(); });
            // display the correct sorting icons on the UI, for that it requires (columnId, sortAsc) properties
            var tmpSorterArray = currentSorters.map(function (sorter) {
                var columnDef = _this._columnDefinitions.find(function (column) { return column.id === sorter.columnId; });
                graphqlSorters.push({
                    field: columnDef ? ((columnDef.queryFieldSorter || columnDef.queryField || columnDef.field) + '') : (sorter.columnId + ''),
                    direction: sorter.direction
                });
                // return only the column(s) found in the Column Definitions ELSE null
                if (columnDef) {
                    return {
                        columnId: sorter.columnId,
                        sortAsc: sorter.direction.toUpperCase() === SortDirection.ASC
                    };
                }
                return null;
            });
            // set the sort icons, but also make sure to filter out null values (that happens when columnDef is not found)
            if (Array.isArray(tmpSorterArray)) {
                this._grid.setSortColumns(tmpSorterArray.filter(function (sorter) { return sorter; }));
            }
        }
        else if (sortColumns && !presetSorters) {
            // build the orderBy array, it could be multisort, example
            // orderBy:[{field: lastName, direction: ASC}, {field: firstName, direction: DESC}]
            if (Array.isArray(sortColumns) && sortColumns.length > 0) {
                try {
                    for (var sortColumns_1 = tslib_1.__values(sortColumns), sortColumns_1_1 = sortColumns_1.next(); !sortColumns_1_1.done; sortColumns_1_1 = sortColumns_1.next()) {
                        var column = sortColumns_1_1.value;
                        if (column && column.sortCol) {
                            currentSorters.push({
                                columnId: column.sortCol.id + '',
                                direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC
                            });
                            var fieldName = (column.sortCol.queryFieldSorter || column.sortCol.queryField || column.sortCol.field || '') + '';
                            if (fieldName) {
                                graphqlSorters.push({
                                    field: fieldName,
                                    direction: column.sortAsc ? SortDirection.ASC : SortDirection.DESC
                                });
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (sortColumns_1_1 && !sortColumns_1_1.done && (_a = sortColumns_1.return)) _a.call(sortColumns_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        // keep current Sorters and update the service options with the new sorting
        this._currentSorters = currentSorters;
        this.updateOptions({ sortingOptions: graphqlSorters });
    };
    /**
     * A function which takes an input string and removes double quotes only
     * on certain fields are identified as GraphQL enums (except fields with dot notation)
     * For example let say we identified ("direction:", "sort") as word which are GraphQL enum fields
     * then the result will be:
     * FROM
     * query { users (orderBy:[{field:"firstName", direction:"ASC"} }]) }
     * TO
     * query { users (orderBy:[{field: firstName, direction: ASC}})}
     *
     * EXCEPTIONS (fields with dot notation "." which are inside a "field:")
     * these fields will keep double quotes while everything else will be stripped of double quotes
     * query { users (orderBy:[{field:"billing.street.name", direction: "ASC"} }
     * TO
     * query { users (orderBy:[{field:"billing.street.name", direction: ASC}}
     * @param inputStr input string
     * @param enumSearchWords array of enum words to filter
     * @returns outputStr output string
     */
    GraphqlService.prototype.trimDoubleQuotesOnEnumField = function (inputStr, enumSearchWords, keepArgumentFieldDoubleQuotes) {
        var patternWordInQuotes = "s?((field:s*)?\".*?\")";
        var patternRegex = enumSearchWords.join(patternWordInQuotes + '|');
        patternRegex += patternWordInQuotes; // the last one should also have the pattern but without the pipe "|"
        // example with (field: & direction:):  /field:s?(".*?")|direction:s?(".*?")/
        var reg = new RegExp(patternRegex, 'g');
        return inputStr.replace(reg, function (group1, group2, group3) {
            // remove double quotes except when the string starts with a "field:"
            var removeDoubleQuotes = true;
            if (group1.startsWith('field:') && keepArgumentFieldDoubleQuotes) {
                removeDoubleQuotes = false;
            }
            var rep = removeDoubleQuotes ? group1.replace(/"/g, '') : group1;
            return rep;
        });
    };
    //
    // private functions
    // -------------------
    /**
     * Cast provided filters (could be in multiple formats) into an array of CurrentFilter
     * @param columnFilters
     */
    GraphqlService.prototype.castFilterToColumnFilters = function (columnFilters) {
        // keep current filters & always save it as an array (columnFilters can be an object when it is dealt by SlickGrid Filter)
        var filtersArray = (typeof columnFilters === 'object') ? Object.keys(columnFilters).map(function (key) { return columnFilters[key]; }) : columnFilters;
        if (!Array.isArray(filtersArray)) {
            return [];
        }
        return filtersArray.map(function (filter) {
            var tmpFilter = { columnId: filter.columnId || '' };
            if (filter.operator) {
                tmpFilter.operator = filter.operator;
            }
            if (Array.isArray(filter.searchTerms)) {
                tmpFilter.searchTerms = filter.searchTerms;
            }
            return tmpFilter;
        });
    };
GraphqlService.Éµfac = function GraphqlService_Factory(t) { return new (t || GraphqlService)(); };
GraphqlService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: GraphqlService, factory: function (t) { return GraphqlService.Éµfac(t); } });

    return GraphqlService;
}());
export { GraphqlService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,