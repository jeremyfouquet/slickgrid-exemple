import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName } from './../models/index';
import { ExtensionUtility } from '../extensions/extensionUtility';
import { ExtensionService } from './extension.service';
import { ResizerService } from './resizer.service';
import { unsubscribeAllObservables } from './utilities';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
var GroupingAndColspanService = /** @class */ (function () {
    function GroupingAndColspanService(extensionUtility, extensionService, resizerService, sharedService) {
        this.extensionUtility = extensionUtility;
        this.extensionService = extensionService;
        this.resizerService = resizerService;
        this.sharedService = sharedService;
        this.subscriptions = [];
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(GroupingAndColspanService.prototype, "eventHandler", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupingAndColspanService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupingAndColspanService.prototype, "_columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    GroupingAndColspanService.prototype.init = function (grid, dataView) {
        var _this = this;
        this._grid = grid;
        if (grid && this._gridOptions) {
            // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions
            // for all these events, we have to trigger a re-create
            if (this._gridOptions.createPreHeaderPanel) {
                // on all following events, call the
                this._eventHandler.subscribe(grid.onSort, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(grid.onColumnsResized, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(grid.onColumnsReordered, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(dataView.onRowCountChanged, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this.subscriptions.push(this.resizerService.onGridAfterResize.subscribe(function () { return _this.renderPreHeaderRowGroupingTitles(); }), this.sharedService.onHeaderMenuHideColumns.subscribe(function () { return _this.delayRenderPreHeaderRowGroupingTitles(0); }));
                this._eventHandler.subscribe(grid.onSetOptions, function (_e, args) {
                    // when user changes frozen columns dynamically (e.g. from header menu), we need to re-render the pre-header of the grouping titles
                    if (args && args.optionsBefore && args.optionsAfter && args.optionsBefore.frozenColumn !== args.optionsAfter.frozenColumn) {
                        _this.delayRenderPreHeaderRowGroupingTitles(0);
                    }
                });
                // for both picker (columnPicker/gridMenu) we also need to re-create after hiding/showing columns
                var columnPickerExtension = this.extensionService.getExtensionByName(ExtensionName.columnPicker);
                if (columnPickerExtension && columnPickerExtension.instance && columnPickerExtension.instance.onColumnsChanged) {
                    this._eventHandler.subscribe(columnPickerExtension.instance.onColumnsChanged, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                }
                var gridMenuExtension = this.extensionService.getExtensionByName(ExtensionName.gridMenu);
                if (gridMenuExtension && gridMenuExtension.instance && gridMenuExtension.instance.onColumnsChanged && gridMenuExtension.instance.onMenuClose) {
                    this._eventHandler.subscribe(gridMenuExtension.instance.onColumnsChanged, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                    this._eventHandler.subscribe(gridMenuExtension.instance.onMenuClose, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                }
                // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution
                // probably some kind of timing issues and delaying it until the grid is fully ready fixes this problem
                this.delayRenderPreHeaderRowGroupingTitles(50);
            }
        }
    };
    GroupingAndColspanService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        // also unsubscribe all Angular Subscriptions
        this.subscriptions = unsubscribeAllObservables(this.subscriptions);
    };
    /** call "renderPreHeaderRowGroupingTitles()" with a setTimeout delay */
    GroupingAndColspanService.prototype.delayRenderPreHeaderRowGroupingTitles = function (delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        setTimeout(function () { return _this.renderPreHeaderRowGroupingTitles(); }, delay);
    };
    /** Create or Render the Pre-Header Row Grouping Titles */
    GroupingAndColspanService.prototype.renderPreHeaderRowGroupingTitles = function () {
        if (this._gridOptions && this._gridOptions.frozenColumn !== undefined && this._gridOptions.frozenColumn >= 0) {
            // Add column groups to left panel
            var $preHeaderPanel = $(this._grid.getPreHeaderPanelLeft());
            this.renderHeaderGroups($preHeaderPanel, 0, this._gridOptions.frozenColumn + 1);
            // Add column groups to right panel
            $preHeaderPanel = $(this._grid.getPreHeaderPanelRight());
            this.renderHeaderGroups($preHeaderPanel, this._gridOptions.frozenColumn + 1, this._columnDefinitions.length);
        }
        else {
            // regular grid (not a frozen grid)
            var $preHeaderPanel = $(this._grid.getPreHeaderPanel());
            this.renderHeaderGroups($preHeaderPanel, 0, this._columnDefinitions.length);
        }
    };
    GroupingAndColspanService.prototype.renderHeaderGroups = function (preHeaderPanel, start, end) {
        preHeaderPanel.empty()
            .addClass('slick-header-columns')
            .css('left', '-1000px')
            .width(this._grid.getHeadersWidth());
        preHeaderPanel.parent().addClass('slick-header');
        var headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();
        var colDef;
        var header;
        var lastColumnGroup = '';
        var widthTotal = 0;
        var frozenHeaderWidthCalcDifferential = this._gridOptions && this._gridOptions.frozenHeaderWidthCalcDifferential || 0;
        var isFrozenGrid = (this._gridOptions && (this._gridOptions.frozenColumn !== undefined && this._gridOptions.frozenColumn >= 0));
        for (var i = start; i < end; i++) {
            colDef = this._columnDefinitions[i];
            if (colDef) {
                if (lastColumnGroup === colDef.columnGroup && i > 0) {
                    widthTotal += colDef.width || 0;
                    if (header && header.width) {
                        header.width(widthTotal - headerColumnWidthDiff - frozenHeaderWidthCalcDifferential); // remove possible frozen border
                    }
                }
                else {
                    widthTotal = colDef.width || 0;
                    header = $("<div class=\"ui-state-default slick-header-column " + (isFrozenGrid ? 'frozen' : '') + "\" />")
                        .html("<span class=\"slick-column-name\">" + (colDef.columnGroup || '') + "</span>")
                        .width(widthTotal - headerColumnWidthDiff)
                        .appendTo(preHeaderPanel);
                }
                lastColumnGroup = colDef.columnGroup || '';
            }
        }
    };
    /** Translate Column Group texts and re-render them afterward. */
    GroupingAndColspanService.prototype.translateGroupingAndColSpan = function () {
        var currentColumnDefinitions = this._grid.getColumns();
        this.extensionUtility.translateItems(currentColumnDefinitions, 'columnGroupKey', 'columnGroup');
        this._grid.setColumns(currentColumnDefinitions);
        this.renderPreHeaderRowGroupingTitles();
    };
    GroupingAndColspanService.ctorParameters = function () { return [
        { type: ExtensionUtility },
        { type: ExtensionService },
        { type: ResizerService },
        { type: SharedService }
    ]; };
GroupingAndColspanService.ɵfac = function GroupingAndColspanService_Factory(t) { return new (t || GroupingAndColspanService)(ɵngcc0.ɵɵinject(ExtensionUtility), ɵngcc0.ɵɵinject(ExtensionService), ɵngcc0.ɵɵinject(ResizerService), ɵngcc0.ɵɵinject(SharedService)); };
GroupingAndColspanService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GroupingAndColspanService, factory: function (t) { return GroupingAndColspanService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupingAndColspanService, [{
        type: Injectable
    }], function () { return [{ type: ExtensionUtility }, { type: ExtensionService }, { type: ResizerService }, { type: SharedService }]; }, null); })();
    return GroupingAndColspanService;
}());
export { GroupingAndColspanService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,