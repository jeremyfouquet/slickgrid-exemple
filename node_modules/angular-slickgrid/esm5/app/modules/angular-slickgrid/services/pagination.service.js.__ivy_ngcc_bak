import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isObservable, Subject } from 'rxjs';
import * as isequal_ from 'lodash.isequal';
var isequal = isequal_; // patch to fix rollup to work
import { FilterService } from './filter.service';
import { GridService } from './grid.service';
import { SharedService } from './shared.service';
import { executeBackendProcessesCallback, onBackendError } from './backend-utilities';
import { unsubscribeAllObservables } from './utilities';
var PaginationService = /** @class */ (function () {
    /** Constructor */
    function PaginationService(filterService, gridService, sharedService) {
        this.filterService = filterService;
        this.gridService = gridService;
        this.sharedService = sharedService;
        this._initialized = false;
        this._isLocalGrid = true;
        this._dataFrom = 1;
        this._dataTo = 1;
        this._pageCount = 1;
        this._pageNumber = 1;
        this._totalItems = 0;
        this._eventHandler = new Slick.EventHandler();
        this._subscriptions = [];
        this.onPaginationChanged = new Subject();
        this.onPaginationVisibilityChanged = new Subject();
    }
    Object.defineProperty(PaginationService.prototype, "paginationOptions", {
        get: function () {
            return this._paginationOptions;
        },
        set: function (paginationOptions) {
            this._paginationOptions = paginationOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "availablePageSizes", {
        get: function () {
            return this._availablePageSizes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "dataFrom", {
        get: function () {
            return this._dataFrom;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "dataTo", {
        get: function () {
            return this._dataTo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "itemsPerPage", {
        get: function () {
            return this._itemsPerPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "pageCount", {
        get: function () {
            return this._pageCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "pageNumber", {
        get: function () {
            return this._pageNumber;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginationService.prototype, "totalItems", {
        get: function () {
            return this._totalItems;
        },
        set: function (totalItems) {
            this._totalItems = totalItems;
            if (this._initialized) {
                this.refreshPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    PaginationService.prototype.init = function (grid, dataView, paginationOptions, backendServiceApi) {
        var _this = this;
        this._availablePageSizes = paginationOptions.pageSizes;
        this.dataView = dataView;
        this.grid = grid;
        this._backendServiceApi = backendServiceApi;
        this._paginationOptions = paginationOptions;
        this._isLocalGrid = !backendServiceApi;
        this._pageNumber = paginationOptions.pageNumber || 1;
        if (backendServiceApi && (!backendServiceApi.service || !backendServiceApi.process)) {
            throw new Error("BackendServiceApi requires the following 2 properties \"process\" and \"service\" to be defined.");
        }
        if (this._isLocalGrid && this.dataView) {
            this._eventHandler.subscribe(this.dataView.onPagingInfoChanged, function (e, pagingInfo) {
                if (_this._totalItems !== pagingInfo.totalRows) {
                    _this.updateTotalItems(pagingInfo.totalRows);
                }
            });
            dataView.setRefreshHints({ isFilterUnchanged: true });
            dataView.setPagingOptions({ pageSize: this.paginationOptions.pageSize, pageNum: (this._pageNumber - 1) }); // dataView page starts at 0 instead of 1
        }
        // Subscribe to Filter Clear & Changed and go back to page 1 when that happen
        this._subscriptions.push(this.filterService.onFilterChanged.subscribe(function () { return _this.resetPagination(); }));
        this._subscriptions.push(this.filterService.onFilterCleared.subscribe(function () { return _this.resetPagination(); }));
        // Subscribe to any dataview row count changed so that when Adding/Deleting item(s) through the DataView
        // that would trigger a refresh of the pagination numbers
        if (this.dataView) {
            this._subscriptions.push(this.gridService.onItemAdded.subscribe(function (items) { return _this.processOnItemAddedOrRemoved(items, true); }));
            this._subscriptions.push(this.gridService.onItemDeleted.subscribe(function (items) { return _this.processOnItemAddedOrRemoved(items, false); }));
        }
        this.refreshPagination(false, false);
        this._initialized = true;
    };
    PaginationService.prototype.dispose = function () {
        this._initialized = false;
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        // also unsubscribe all Angular Subscriptions
        this._subscriptions = unsubscribeAllObservables(this._subscriptions);
    };
    PaginationService.prototype.getCurrentPageNumber = function () {
        return this._pageNumber;
    };
    PaginationService.prototype.getCurrentPagination = function () {
        return {
            pageNumber: this._pageNumber,
            pageSize: this._itemsPerPage,
            pageSizes: this._availablePageSizes,
        };
    };
    PaginationService.prototype.getFullPagination = function () {
        return {
            pageCount: this._pageCount,
            pageNumber: this._pageNumber,
            pageSize: this._itemsPerPage,
            pageSizes: this._availablePageSizes,
            totalItems: this._totalItems,
            dataFrom: this._dataFrom,
            dataTo: this._dataTo,
        };
    };
    PaginationService.prototype.getCurrentItemPerPage = function () {
        return this._itemsPerPage;
    };
    PaginationService.prototype.changeItemPerPage = function (itemsPerPage, event) {
        this._pageNumber = 1;
        this._pageCount = Math.ceil(this._totalItems / itemsPerPage);
        this._itemsPerPage = itemsPerPage;
        return this.processOnPageChanged(this._pageNumber, event);
    };
    PaginationService.prototype.goToFirstPage = function (event) {
        this._pageNumber = 1;
        return this.processOnPageChanged(this._pageNumber, event);
    };
    PaginationService.prototype.goToLastPage = function (event) {
        this._pageNumber = this._pageCount || 1;
        return this.processOnPageChanged(this._pageNumber, event);
    };
    PaginationService.prototype.goToNextPage = function (event) {
        if (this._pageNumber < this._pageCount) {
            this._pageNumber++;
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(function (resolve) { return resolve(false); });
        }
    };
    PaginationService.prototype.goToPageNumber = function (pageNumber, event) {
        var previousPageNumber = this._pageNumber;
        if (pageNumber < 1) {
            this._pageNumber = 1;
        }
        else if (pageNumber > this._pageCount) {
            this._pageNumber = this._pageCount;
        }
        else {
            this._pageNumber = pageNumber;
        }
        if (this._pageNumber !== previousPageNumber) {
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(function (resolve) { return resolve(false); });
        }
    };
    PaginationService.prototype.goToPreviousPage = function (event) {
        if (this._pageNumber > 1) {
            this._pageNumber--;
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(function (resolve) { return resolve(false); });
        }
    };
    PaginationService.prototype.refreshPagination = function (isPageNumberReset, triggerChangedEvent) {
        if (isPageNumberReset === void 0) { isPageNumberReset = false; }
        if (triggerChangedEvent === void 0) { triggerChangedEvent = true; }
        var previousPagination = tslib_1.__assign({}, this.getCurrentPagination());
        if (this._paginationOptions) {
            var pagination = this._paginationOptions;
            // set the number of items per page if not already set
            if (!this._itemsPerPage) {
                if (this._isLocalGrid) {
                    this._itemsPerPage = pagination.pageSize;
                }
                else {
                    this._itemsPerPage = +((this._backendServiceApi && this._backendServiceApi.options && this._backendServiceApi.options.paginationOptions && this._backendServiceApi.options.paginationOptions.first) ? this._backendServiceApi.options.paginationOptions.first : pagination.pageSize);
                }
            }
            // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes
            if (isPageNumberReset || this._totalItems !== pagination.totalItems) {
                if (isPageNumberReset) {
                    this._pageNumber = 1;
                    this.paginationOptions.pageNumber = 1;
                }
                else if (!this._initialized && pagination.pageNumber && pagination.pageNumber > 1) {
                    this._pageNumber = pagination.pageNumber || 1;
                }
                // when page number is set to 1 then also reset the "offset" of backend service
                if (this._pageNumber === 1 && this._backendServiceApi) {
                    this._backendServiceApi.service.resetPaginationOptions();
                }
            }
            // calculate and refresh the multiple properties of the pagination UI
            this._availablePageSizes = pagination.pageSizes;
            if (!this._totalItems && pagination.totalItems) {
                this._totalItems = pagination.totalItems;
            }
            this.recalculateFromToIndexes();
        }
        this._pageCount = Math.ceil(this._totalItems / this._itemsPerPage);
        var currentPagination = this.getCurrentPagination();
        this.sharedService.currentPagination = currentPagination;
        if (triggerChangedEvent && !isequal(previousPagination, currentPagination)) {
            this.onPaginationChanged.next(currentPagination);
        }
    };
    PaginationService.prototype.processOnPageChanged = function (pageNumber, event) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.recalculateFromToIndexes();
            if (_this._isLocalGrid && _this.dataView) {
                _this.dataView.setPagingOptions({ pageSize: _this._itemsPerPage, pageNum: (pageNumber - 1) }); // dataView page starts at 0 instead of 1
                _this.onPaginationChanged.next(_this.getFullPagination());
            }
            else {
                var itemsPerPage = +_this._itemsPerPage;
                // keep start time & end timestamps & return it after process execution
                var startTime_1 = new Date();
                // run any pre-process, if defined, for example a spinner
                if (_this._backendServiceApi.preProcess) {
                    _this._backendServiceApi.preProcess();
                }
                var query = _this._backendServiceApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });
                // the processes can be Promises or an Observables (like HttpClient)
                var process_1 = _this._backendServiceApi.process(query);
                if (process_1 instanceof Promise) {
                    process_1
                        .then(function (processResult) {
                        resolve(executeBackendProcessesCallback(startTime_1, processResult, _this._backendServiceApi, _this._totalItems));
                    })
                        .catch(function (error) {
                        onBackendError(error, _this._backendServiceApi);
                        reject(process_1);
                    });
                }
                else if (isObservable(process_1)) {
                    _this._subscriptions.push(process_1.subscribe(function (processResult) {
                        resolve(executeBackendProcessesCallback(startTime_1, processResult, _this._backendServiceApi, _this._totalItems));
                    }, function (error) {
                        onBackendError(error, _this._backendServiceApi);
                        reject(process_1);
                    }));
                }
                _this.onPaginationChanged.next(_this.getFullPagination());
            }
        });
    };
    PaginationService.prototype.recalculateFromToIndexes = function () {
        if (this._totalItems === 0) {
            this._dataFrom = 0;
            this._dataTo = 1;
            this._pageNumber = 0;
        }
        else {
            this._dataFrom = this._pageNumber > 1 ? ((this._pageNumber * this._itemsPerPage) - this._itemsPerPage + 1) : 1;
            this._dataTo = (this._totalItems < this._itemsPerPage) ? this._totalItems : ((this._pageNumber || 1) * this._itemsPerPage);
            if (this._dataTo > this._totalItems) {
                this._dataTo = this._totalItems;
            }
        }
        this._pageNumber = (this._totalItems > 0 && this._pageNumber === 0) ? 1 : this._pageNumber;
        // do a final check on the From/To and make sure they are not over or below min/max acceptable values
        if (this._dataTo > this._totalItems) {
            this._dataTo = this._totalItems;
        }
        else if (this._totalItems < this._itemsPerPage) {
            this._dataTo = this._totalItems;
        }
    };
    /** Reset the Pagination to first page and recalculate necessary numbers */
    PaginationService.prototype.resetPagination = function (triggerChangedEvent) {
        if (triggerChangedEvent === void 0) { triggerChangedEvent = true; }
        if (this._isLocalGrid) {
            // on a local grid we also need to reset the DataView paging to 1st page
            this.dataView.setPagingOptions({ pageSize: this._itemsPerPage, pageNum: 0 });
        }
        this.refreshPagination(true, triggerChangedEvent);
    };
    /**
     * Toggle the Pagination (show/hide), it will use the visible if defined else it will automatically inverse when called without argument
     *
     * IMPORTANT NOTE:
     * The Pagination must be created on initial page load, then only after can you toggle it.
     * Basically this method WILL NOT WORK to show the Pagination if it was not there from the start.
     */
    PaginationService.prototype.togglePaginationVisibility = function (visible) {
        if (this.grid && this.sharedService && this.sharedService.gridOptions) {
            var isVisible = visible !== undefined ? visible : !this.sharedService.gridOptions.enablePagination;
            this.sharedService.gridOptions.enablePagination = isVisible;
            this.onPaginationVisibilityChanged.next({ visible: isVisible });
            // make sure to reset the Pagination and go back to first page to avoid any issues with Pagination being offset
            if (isVisible) {
                this.goToFirstPage();
            }
            // when using a local grid, we can reset the DataView pagination by changing its page size
            // page size of 0 would show all, hence cancel the pagination
            if (this._isLocalGrid) {
                var pageSize = visible ? this._itemsPerPage : 0;
                this.dataView.setPagingOptions({ pageSize: pageSize, pageNum: 0 });
            }
        }
    };
    // --
    // private functions
    // --------------------
    PaginationService.prototype.updateTotalItems = function (totalItems, triggerChangedEvent) {
        if (triggerChangedEvent === void 0) { triggerChangedEvent = false; }
        this._totalItems = totalItems;
        if (this._paginationOptions) {
            this._paginationOptions.totalItems = totalItems;
            this.refreshPagination(false, triggerChangedEvent);
        }
    };
    /**
     * When item is added or removed, we will refresh the numbers on the pagination however we won't trigger a backend change
     * This will have a side effect though, which is that the "To" count won't be matching the "items per page" count,
     * that is a necessary side effect to avoid triggering a backend query just to refresh the paging,
     * basically we assume that this offset is fine for the time being,
     * until user does an action which will refresh the data hence the pagination which will then become normal again
     */
    PaginationService.prototype.processOnItemAddedOrRemoved = function (items, isItemAdded) {
        if (isItemAdded === void 0) { isItemAdded = true; }
        if (items !== null) {
            var previousDataTo = this._dataTo;
            var itemCount = Array.isArray(items) ? items.length : 1;
            var itemCountWithDirection = isItemAdded ? +itemCount : -itemCount;
            // refresh the total count in the pagination and in the UI
            this._totalItems += itemCountWithDirection;
            this.recalculateFromToIndexes();
            // finally refresh the "To" count and we know it might be different than the "items per page" count
            // but this is necessary since we don't want an actual backend refresh
            this._dataTo = previousDataTo + itemCountWithDirection;
            this.onPaginationChanged.next(this.getFullPagination());
        }
    };
    PaginationService.ctorParameters = function () { return [
        { type: FilterService },
        { type: GridService },
        { type: SharedService }
    ]; };
    PaginationService = tslib_1.__decorate([
        Injectable()
    ], PaginationService);
    return PaginationService;
}());
export { PaginationService };
//# sourceMappingURL=data:application/json;base64,