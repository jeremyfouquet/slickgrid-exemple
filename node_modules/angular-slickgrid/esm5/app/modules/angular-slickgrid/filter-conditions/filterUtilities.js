/**
 * Compare 2 objects,
 * we will loop through all properties of the object to compare the entire content of both objects
 * Optionally we can compare by a property key, when that is provided we will compare the object content
 * @param o1
 * @param o2
 * @param compareKey optional
 * @return boolean are objects equals?
 */
export function compareObjects(o1, o2, compareKey) {
    // if user provided an object compare key then compare directly both objects by that key
    if (compareKey && ((o1 && o1.hasOwnProperty(compareKey)) || (o2 && o2.hasOwnProperty(compareKey)))) {
        return o1[compareKey] === o2 || o1 === o2[compareKey] || o1[compareKey] === o2[compareKey];
    }
    // loop through all object properties to compare the full content of the object
    // we'll return false as soon as a difference is detected
    for (var p in o1) {
        if (o1.hasOwnProperty(p)) {
            if (o1[p] !== o2[p]) {
                return false;
            }
        }
    }
    return true;
}
export var testFilterCondition = function (operator, value1, value2) {
    switch (operator) {
        case '<':
        case 'LT': return (value1 < value2);
        case '<=':
        case 'LE': return (value1 <= value2);
        case '>':
        case 'GT': return (value1 > value2);
        case '>=':
        case 'GE': return (value1 >= value2);
        case '!=':
        case '<>':
        case 'NE': return (value1 !== value2);
        case '=':
        case '==':
        case 'EQ': return (value1 === value2);
        case 'IN': return ((value2 && value2.indexOf) ? (value2.indexOf(value1) > -1) : false);
        case 'NIN':
        case 'NOT_IN':
            return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);
        case 'IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return ((value2.findIndex(function (val) { return value1.indexOf(val) > -1; })) > -1);
            }
            return false;
        case 'NIN_CONTAINS':
        case 'NOT_IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return !((value2.findIndex(function (val) { return value1.indexOf(val) > -1; })) > -1);
            }
            return false;
    }
    return true;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9maWx0ZXJVdGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQU8sRUFBRSxFQUFPLEVBQUUsVUFBbUI7SUFDbEUsd0ZBQXdGO0lBQ3hGLElBQUksVUFBVSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2xHLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDNUY7SUFFRCwrRUFBK0U7SUFDL0UseURBQXlEO0lBQ3pELEtBQUssSUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2xCLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4QixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsVUFBQyxRQUF3QixFQUFFLE1BQVcsRUFBRSxNQUFXO0lBQ3BGLFFBQVEsUUFBUSxFQUFFO1FBQ2hCLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDdEMsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RixLQUFLLEtBQUssQ0FBQztRQUNYLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVFLEtBQUssYUFBYTtZQUNoQixJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixLQUFLLGNBQWMsQ0FBQztRQUNwQixLQUFLLGlCQUFpQjtZQUNwQixJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEU7WUFDRCxPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlcmF0b3JTdHJpbmcgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5cclxuLyoqXHJcbiAqIENvbXBhcmUgMiBvYmplY3RzLFxyXG4gKiB3ZSB3aWxsIGxvb3AgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0IHRvIGNvbXBhcmUgdGhlIGVudGlyZSBjb250ZW50IG9mIGJvdGggb2JqZWN0c1xyXG4gKiBPcHRpb25hbGx5IHdlIGNhbiBjb21wYXJlIGJ5IGEgcHJvcGVydHkga2V5LCB3aGVuIHRoYXQgaXMgcHJvdmlkZWQgd2Ugd2lsbCBjb21wYXJlIHRoZSBvYmplY3QgY29udGVudFxyXG4gKiBAcGFyYW0gbzFcclxuICogQHBhcmFtIG8yXHJcbiAqIEBwYXJhbSBjb21wYXJlS2V5IG9wdGlvbmFsXHJcbiAqIEByZXR1cm4gYm9vbGVhbiBhcmUgb2JqZWN0cyBlcXVhbHM/XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZU9iamVjdHMobzE6IGFueSwgbzI6IGFueSwgY29tcGFyZUtleT86IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIC8vIGlmIHVzZXIgcHJvdmlkZWQgYW4gb2JqZWN0IGNvbXBhcmUga2V5IHRoZW4gY29tcGFyZSBkaXJlY3RseSBib3RoIG9iamVjdHMgYnkgdGhhdCBrZXlcclxuICBpZiAoY29tcGFyZUtleSAmJiAoKG8xICYmIG8xLmhhc093blByb3BlcnR5KGNvbXBhcmVLZXkpKSB8fCAobzIgJiYgbzIuaGFzT3duUHJvcGVydHkoY29tcGFyZUtleSkpKSkge1xyXG4gICAgcmV0dXJuIG8xW2NvbXBhcmVLZXldID09PSBvMiB8fCBvMSA9PT0gbzJbY29tcGFyZUtleV0gfHwgbzFbY29tcGFyZUtleV0gPT09IG8yW2NvbXBhcmVLZXldO1xyXG4gIH1cclxuXHJcbiAgLy8gbG9vcCB0aHJvdWdoIGFsbCBvYmplY3QgcHJvcGVydGllcyB0byBjb21wYXJlIHRoZSBmdWxsIGNvbnRlbnQgb2YgdGhlIG9iamVjdFxyXG4gIC8vIHdlJ2xsIHJldHVybiBmYWxzZSBhcyBzb29uIGFzIGEgZGlmZmVyZW5jZSBpcyBkZXRlY3RlZFxyXG4gIGZvciAoY29uc3QgcCBpbiBvMSkge1xyXG4gICAgaWYgKG8xLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgIGlmIChvMVtwXSAhPT0gbzJbcF0pIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0ZXN0RmlsdGVyQ29uZGl0aW9uID0gKG9wZXJhdG9yOiBPcGVyYXRvclN0cmluZywgdmFsdWUxOiBhbnksIHZhbHVlMjogYW55KTogYm9vbGVhbiA9PiB7XHJcbiAgc3dpdGNoIChvcGVyYXRvcikge1xyXG4gICAgY2FzZSAnPCc6XHJcbiAgICBjYXNlICdMVCc6IHJldHVybiAodmFsdWUxIDwgdmFsdWUyKTtcclxuICAgIGNhc2UgJzw9JzpcclxuICAgIGNhc2UgJ0xFJzogcmV0dXJuICh2YWx1ZTEgPD0gdmFsdWUyKTtcclxuICAgIGNhc2UgJz4nOlxyXG4gICAgY2FzZSAnR1QnOiByZXR1cm4gKHZhbHVlMSA+IHZhbHVlMik7XHJcbiAgICBjYXNlICc+PSc6XHJcbiAgICBjYXNlICdHRSc6IHJldHVybiAodmFsdWUxID49IHZhbHVlMik7XHJcbiAgICBjYXNlICchPSc6XHJcbiAgICBjYXNlICc8Pic6XHJcbiAgICBjYXNlICdORSc6IHJldHVybiAodmFsdWUxICE9PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnPSc6XHJcbiAgICBjYXNlICc9PSc6XHJcbiAgICBjYXNlICdFUSc6IHJldHVybiAodmFsdWUxID09PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnSU4nOiByZXR1cm4gKCh2YWx1ZTIgJiYgdmFsdWUyLmluZGV4T2YpID8gKHZhbHVlMi5pbmRleE9mKHZhbHVlMSkgPiAtMSkgOiBmYWxzZSk7XHJcbiAgICBjYXNlICdOSU4nOlxyXG4gICAgY2FzZSAnTk9UX0lOJzpcclxuICAgICAgcmV0dXJuICgodmFsdWUyICYmIHZhbHVlMi5pbmNsdWRlcykgPyAoIXZhbHVlMi5pbmNsdWRlcyh2YWx1ZTEpKSA6IGZhbHNlKTtcclxuICAgIGNhc2UgJ0lOX0NPTlRBSU5TJzpcclxuICAgICAgaWYgKHZhbHVlMiAmJiBBcnJheS5pc0FycmF5KHZhbHVlMikgJiYgdmFsdWUyLmZpbmRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiAoKHZhbHVlMi5maW5kSW5kZXgoKHZhbCkgPT4gdmFsdWUxLmluZGV4T2YodmFsKSA+IC0xKSkgPiAtMSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgY2FzZSAnTklOX0NPTlRBSU5TJzpcclxuICAgIGNhc2UgJ05PVF9JTl9DT05UQUlOUyc6XHJcbiAgICAgIGlmICh2YWx1ZTIgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZTIpICYmIHZhbHVlMi5maW5kSW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gISgodmFsdWUyLmZpbmRJbmRleCgodmFsKSA9PiB2YWx1ZTEuaW5kZXhPZih2YWwpID4gLTEpKSA+IC0xKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG4iXX0=