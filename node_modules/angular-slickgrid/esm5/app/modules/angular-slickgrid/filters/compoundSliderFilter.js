import { OperatorType, } from './../models/index';
import { Constants } from '../constants';
import { buildSelectOperatorHtmlString } from './filterUtilities';
import { getTranslationPrefix, mapOperatorToShorthandDesignation } from '../services/utilities';
var DEFAULT_MIN_VALUE = 0;
var DEFAULT_MAX_VALUE = 100;
var DEFAULT_STEP = 1;
var CompoundSliderFilter = /** @class */ (function () {
    function CompoundSliderFilter(translate) {
        this.translate = translate;
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
    Object.defineProperty(CompoundSliderFilter.prototype, "columnFilter", {
        /** Getter for the Filter Operator */
        get: function () {
            return this.columnDef && this.columnDef.filter || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "defaultOperator", {
        /** Getter to know what would be the default operator when none is specified */
        get: function () {
            return OperatorType.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "filterParams", {
        /** Getter for the Filter Generic Params */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "filterProperties", {
        /** Getter for the `filter` properties */
        get: function () {
            return this.columnDef && this.columnDef.filter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "locales", {
        /** Getter for the single Locale texts provided by the user in main file or else use default English locales via the Constants */
        get: function () {
            return this.gridOptions.locales || Constants.locales;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompoundSliderFilter.prototype, "operator", {
        /** Getter for the Filter Operator */
        get: function () {
            return this._operator || this.columnFilter.operator || this.defaultOperator;
        },
        /** Setter for the Filter Operator */
        set: function (op) {
            this._operator = op;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the Filter
     */
    CompoundSliderFilter.prototype.init = function (args) {
        var _this = this;
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.operator = args.operator || '';
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // define the input & slider number IDs
        this._elementRangeInputId = "rangeInput_" + this.columnDef.field;
        this._elementRangeOutputId = "rangeOutput_" + this.columnDef.field;
        // filter input can only have 1 search term, so we will use the 1st array index if it exist
        var searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';
        // step 1, create the DOM Element of the filter which contain the compound Operator+Input
        // and initialize it if searchTerm is filled
        this.$filterElm = this.createDomElement(searchTerm);
        // step 3, subscribe to the input change event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this.$filterInputElm.on('change', this.onTriggerEvent.bind(this));
        this.$selectOperatorElm.on('change', this.onTriggerEvent.bind(this));
        // if user chose to display the slider number on the right side, then update it every time it changes
        // we need to use both "input" and "change" event to be all cross-browser
        if (!this.filterParams.hideSliderNumber) {
            this.$filterInputElm.on('input change', function (e) {
                var value = e && e.target && e.target.value || '';
                if (value) {
                    var elements = document.getElementsByClassName(_this._elementRangeOutputId);
                    if (elements.length) {
                        elements[0].innerHTML = value;
                    }
                }
            });
        }
    };
    /**
     * Clear the filter value
     */
    CompoundSliderFilter.prototype.clear = function (shouldTriggerQuery) {
        if (shouldTriggerQuery === void 0) { shouldTriggerQuery = true; }
        if (this.$filterElm && this.$selectOperatorElm) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            var clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;
            this._currentValue = +clearedValue;
            this.$selectOperatorElm.val(0);
            this.$filterInputElm.val(clearedValue);
            if (!this.filterParams.hideSliderNumber) {
                this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(clearedValue);
            }
            this.onTriggerEvent(undefined);
            this.$filterElm.removeClass('filled');
        }
    };
    /**
     * destroy the filter
     */
    CompoundSliderFilter.prototype.destroy = function () {
        if (this.$filterInputElm) {
            this.$filterInputElm.off('input change').remove();
            this.$selectOperatorElm.off('change').remove();
        }
        this.$filterInputElm = null;
        this.$filterElm = null;
        this.$selectOperatorElm = null;
        this.callback = null;
        this.onTriggerEvent = null;
    };
    /**
     * Get selected value retrieved from the slider element
     * @params selected items
     */
    CompoundSliderFilter.prototype.getValues = function () {
        return this._currentValue;
    };
    /** Set value(s) on the DOM element */
    CompoundSliderFilter.prototype.setValues = function (values, operator) {
        var newValue = Array.isArray(values) ? values[0] : values;
        this._currentValue = +newValue;
        this.$filterInputElm.val(newValue);
        this.$containerInputGroupElm.children('div.input-group-addon.input-group-append').children().last().html(newValue);
        // set the operator, in the DOM as well, when defined
        this.operator = operator || this.defaultOperator;
        if (operator && this.$selectOperatorElm) {
            var operatorShorthand = mapOperatorToShorthandDesignation(this.operator);
            this.$selectOperatorElm.val(operatorShorthand);
        }
    };
    //
    // private functions
    // ------------------
    /** Build HTML Template for the input range (slider) */
    CompoundSliderFilter.prototype.buildTemplateHtmlString = function () {
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;
        var defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;
        var step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;
        return "<input type=\"range\" name=\"" + this._elementRangeInputId + "\"\n              defaultValue=\"" + defaultValue + "\" min=\"" + minValue + "\" max=\"" + maxValue + "\" step=\"" + step + "\"\n              class=\"form-control slider-filter-input range compound-slider " + this._elementRangeInputId + "\" />";
    };
    /** Build HTML Template for the text (number) that is shown appended to the slider */
    CompoundSliderFilter.prototype.buildTemplateSliderTextHtmlString = function () {
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;
        return "<div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text " + this._elementRangeOutputId + "\">" + defaultValue + "</span></div>";
    };
    /** Get the available operator option values */
    CompoundSliderFilter.prototype.getOptionValues = function () {
        return [
            { operator: '', description: '' },
            { operator: '=', description: this.getOutputText('EQUAL_TO', 'TEXT_EQUAL_TO', 'Equal to') },
            { operator: '<', description: this.getOutputText('LESS_THAN', 'TEXT_LESS_THAN', 'Less than') },
            { operator: '<=', description: this.getOutputText('LESS_THAN_OR_EQUAL_TO', 'TEXT_LESS_THAN_OR_EQUAL_TO', 'Less than or equal to') },
            { operator: '>', description: this.getOutputText('GREATER_THAN', 'TEXT_GREATER_THAN', 'Greater than') },
            { operator: '>=', description: this.getOutputText('GREATER_THAN_OR_EQUAL_TO', 'TEXT_GREATER_THAN_OR_EQUAL_TO', 'Greater than or equal to') },
            { operator: '<>', description: this.getOutputText('NOT_EQUAL_TO', 'TEXT_NOT_EQUAL_TO', 'Not equal to') }
        ];
    };
    /** Get Locale, Translated or a Default Text if first two aren't detected */
    CompoundSliderFilter.prototype.getOutputText = function (translationKey, localeText, defaultText) {
        if (this.gridOptions && this.gridOptions.enableTranslate && this.translate && this.translate.instant) {
            var translationPrefix = getTranslationPrefix(this.gridOptions);
            return this.translate.instant("" + translationPrefix + translationKey);
        }
        return this.locales && this.locales[localeText] || defaultText;
    };
    /**
     * Create the DOM element
     */
    CompoundSliderFilter.prototype.createDomElement = function (searchTerm) {
        var fieldId = this.columnDef && this.columnDef.id;
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var startValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;
        var $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);
        $($headerElm).empty();
        var searchTermInput = (searchTerm || '0');
        if (+searchTermInput < minValue) {
            searchTermInput = "" + minValue;
        }
        if (+searchTermInput < startValue) {
            searchTermInput = "" + startValue;
        }
        this._currentValue = +searchTermInput;
        // create the DOM Select dropdown for the Operator
        var selectOperatorHtmlString = buildSelectOperatorHtmlString(this.getOptionValues());
        this.$selectOperatorElm = $(selectOperatorHtmlString);
        this.$filterInputElm = $(this.buildTemplateHtmlString());
        var $filterContainerElm = $("<div class=\"form-group slider-container search-filter filter-" + fieldId + "\"></div>");
        this.$containerInputGroupElm = $("<div class=\"input-group search-filter filter-" + fieldId + "\"></div>");
        var $operatorInputGroupAddon = $("<span class=\"input-group-addon input-group-prepend operator\"></span>");
        /* the DOM element final structure will be
          <div class="input-group">
            <div class="input-group-addon input-group-prepend operator">
              <select class="form-control"></select>
            </div>
            <input class="form-control" type="text" />
            <div class="input-group-addon input-group-prepend rangeOuput_percentComplete"><span class="input-group-text">0</span></div>
          </div>
        */
        $operatorInputGroupAddon.append(this.$selectOperatorElm);
        this.$containerInputGroupElm.append($operatorInputGroupAddon);
        this.$containerInputGroupElm.append(this.$filterInputElm);
        if (!this.filterParams.hideSliderNumber) {
            var $sliderTextInputAppendAddon = $(this.buildTemplateSliderTextHtmlString());
            $sliderTextInputAppendAddon.children().html(searchTermInput);
            this.$containerInputGroupElm.append($sliderTextInputAppendAddon);
        }
        // create the DOM element & add an ID and filter class
        $filterContainerElm.append(this.$containerInputGroupElm);
        this.$filterInputElm.val(searchTermInput);
        this.$filterInputElm.data('columnId', fieldId);
        if (this.operator) {
            var operatorShorthand = mapOperatorToShorthandDesignation(this.operator);
            this.$selectOperatorElm.val(operatorShorthand);
        }
        // if there's a search term, we will add the "filled" class for styling purposes
        if (searchTerm !== '') {
            $filterContainerElm.addClass('filled');
        }
        // append the new DOM element to the header row
        if ($filterContainerElm && typeof $filterContainerElm.appendTo === 'function') {
            $filterContainerElm.appendTo($headerElm);
        }
        return $filterContainerElm;
    };
    CompoundSliderFilter.prototype.onTriggerEvent = function (e) {
        var value = this.$filterInputElm.val();
        this._currentValue = +value;
        if (this._clearFilterTriggered) {
            this.$filterElm.removeClass('filled');
            this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });
        }
        else {
            this.$filterElm.addClass('filled');
            var selectedOperator = this.$selectOperatorElm.find('option:selected').val();
            this.callback(e, { columnDef: this.columnDef, searchTerms: (value ? [value || '0'] : null), operator: selectedOperator || '', shouldTriggerQuery: this._shouldTriggerQuery });
        }
        // reset both flags for next use
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    };
    return CompoundSliderFilter;
}());
export { CompoundSliderFilter };
//# sourceMappingURL=data:application/json;base64,