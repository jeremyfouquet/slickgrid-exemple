import * as tslib_1 from "tslib";
import { OperatorType, } from '../models/index';
var DEFAULT_MIN_VALUE = 0;
var DEFAULT_MAX_VALUE = 100;
var DEFAULT_STEP = 1;
/** A Slider Range Filter which uses jQuery UI, this is only meant to be used as a range filter (with 2 handles lowest & highest values) */
var SliderRangeFilter = /** @class */ (function () {
    function SliderRangeFilter() {
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
    Object.defineProperty(SliderRangeFilter.prototype, "filterParams", {
        /** Getter for the Filter Generic Params */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "filterProperties", {
        /** Getter for the `filter` properties */
        get: function () {
            return this.columnDef && this.columnDef.filter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "columnFilter", {
        /** Getter for the Column Filter */
        get: function () {
            return this.columnDef && this.columnDef.filter || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "currentValues", {
        /** Getter for the Current Slider Values */
        get: function () {
            return this._currentValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "defaultOperator", {
        /** Getter to know what would be the default operator when none is specified */
        get: function () {
            return this.gridOptions.defaultFilterRangeOperator || OperatorType.rangeExclusive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "sliderOptions", {
        /** Getter for the JQuery UI Slider Options */
        get: function () {
            return this._sliderOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderRangeFilter.prototype, "operator", {
        /** Getter of the Operator to use when doing the filter comparing */
        get: function () {
            return this.columnFilter && this.columnFilter.operator || this.defaultOperator;
        },
        /** Setter for the filter operator */
        set: function (operator) {
            if (this.columnFilter) {
                this.columnFilter.operator = operator;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the Filter
     */
    SliderRangeFilter.prototype.init = function (args) {
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // step 1, create the DOM Element of the filter & initialize it if searchTerm is filled
        this.$filterElm = this.createDomElement(this.searchTerms);
    };
    /**
     * Clear the filter value
     */
    SliderRangeFilter.prototype.clear = function (shouldTriggerQuery) {
        if (shouldTriggerQuery === void 0) { shouldTriggerQuery = true; }
        if (this.$filterElm) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            var lowestValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;
            var highestValue = this.filterParams.hasOwnProperty('sliderEndValue') ? this.filterParams.sliderEndValue : DEFAULT_MAX_VALUE;
            this._currentValues = [lowestValue, highestValue];
            this.$filterElm.slider('values', [lowestValue, highestValue]);
            if (!this.filterParams.hideSliderNumbers) {
                this.renderSliderValues(lowestValue, highestValue);
            }
            this.callback(null, { columnDef: this.columnDef, clearFilterTriggered: true, shouldTriggerQuery: shouldTriggerQuery });
            this.$filterContainerElm.removeClass('filled');
        }
    };
    /**
     * destroy the filter
     */
    SliderRangeFilter.prototype.destroy = function () {
        if (this.$filterElm) {
            this.$filterElm.off('change').remove();
            this.$filterContainerElm.remove();
        }
        this.$filterElm = null;
        this.$filterContainerElm = null;
        this.callback = null;
        this.onValueChanged = null;
    };
    /**
     * Render both slider values (low/high) on screen
     * @param lowestValue number
     * @param highestValue number
     */
    SliderRangeFilter.prototype.renderSliderValues = function (lowestValue, highestValue) {
        var columndId = this.columnDef && this.columnDef.id;
        var lowerElm = document.querySelector(".lowest-range-" + columndId);
        var highestElm = document.querySelector(".highest-range-" + columndId);
        if (lowerElm && lowerElm.innerHTML) {
            lowerElm.innerHTML = lowestValue.toString();
        }
        if (highestElm && highestElm.innerHTML) {
            highestElm.innerHTML = highestValue.toString();
        }
    };
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    SliderRangeFilter.prototype.setValues = function (searchTerms, operator) {
        if (searchTerms) {
            var sliderValues = [];
            // get the slider values, if it's a string with the "..", we'll do the split else we'll use the array of search terms
            if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && searchTerms[0].indexOf('..') > 0) {
                sliderValues = (typeof searchTerms === 'string') ? [searchTerms] : searchTerms[0].split('..');
            }
            else if (Array.isArray(searchTerms)) {
                sliderValues = searchTerms;
            }
            if (Array.isArray(sliderValues) && sliderValues.length === 2) {
                this.$filterElm.slider('values', sliderValues);
                if (!this.filterParams.hideSliderNumbers) {
                    this.renderSliderValues(sliderValues[0], sliderValues[1]);
                }
            }
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    };
    //
    // private functions
    // ------------------
    /**
     * From the html template string, create a DOM element
     * @param searchTerm optional preset search terms
     */
    SliderRangeFilter.prototype.createDomElement = function (searchTerms) {
        var _this = this;
        if (this.columnFilter && this.columnFilter.filterOptions && (this.columnFilter.filterOptions.change || this.columnFilter.filterOptions.slide)) {
            throw new Error("[Angular-Slickgrid] You cannot override the \"change\" and/or the \"slide\" callback methods\n        since they are used in SliderRange Filter itself, however any other methods can be used for example the \"create\", \"start\", \"stop\" methods.");
        }
        var fieldId = this.columnDef && this.columnDef.id;
        var $headerElm = this.grid.getHeaderRowColumn(fieldId);
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;
        var step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;
        var defaultStartValue = DEFAULT_MIN_VALUE;
        var defaultEndValue = DEFAULT_MAX_VALUE;
        if (Array.isArray(searchTerms) && searchTerms.length > 1) {
            defaultStartValue = +searchTerms[0];
            defaultEndValue = +searchTerms[1];
        }
        else {
            defaultStartValue = +(this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue);
            defaultEndValue = +(this.filterParams.hasOwnProperty('sliderEndValue') ? this.filterParams.sliderEndValue : maxValue);
        }
        $($headerElm).empty();
        // create the DOM element & add an ID and filter class
        var $lowestSliderValueElm = $("\n    <div class=\"input-group-addon input-group-prepend slider-range-value\">\n      <span class=\"input-group-text lowest-range-" + fieldId + "\">" + defaultStartValue + "</span>\n    </div>");
        var $highestSliderValueElm = $("\n    <div class=\"input-group-addon input-group-append slider-range-value\">\n      <span class=\"input-group-text highest-range-" + fieldId + "\">" + defaultEndValue + "</span>\n    </div>");
        this.$filterElm = $("<div class=\"filter-input filter-" + fieldId + "\"></div>");
        this.$filterContainerElm = $("<div class=\"input-group form-control search-filter slider-range-container slider-values filter-" + fieldId + "\">");
        if (this.filterParams.hideSliderNumbers) {
            this.$filterContainerElm.append(this.$filterElm);
        }
        else {
            this.$filterContainerElm.append($lowestSliderValueElm);
            this.$filterContainerElm.append(this.$filterElm);
            this.$filterContainerElm.append($highestSliderValueElm);
        }
        // if we are preloading searchTerms, we'll keep them for reference
        this._currentValues = [defaultStartValue, defaultEndValue];
        var definedOptions = {
            range: true,
            min: +minValue,
            max: +maxValue,
            step: +step,
            values: [defaultStartValue, defaultEndValue],
            change: function (e, ui) { return _this.onValueChanged(e, ui); },
            slide: function (e, ui) {
                var values = ui.values;
                if (!_this.filterParams.hideSliderNumbers && Array.isArray(values)) {
                    _this.renderSliderValues(values[0], values[1]);
                }
            }
        };
        // merge options with optional user's custom options
        this._sliderOptions = tslib_1.__assign({}, definedOptions, this.columnFilter.filterOptions);
        this.$filterElm.slider(this._sliderOptions);
        // if there's a search term, we will add the "filled" class for styling purposes
        if (Array.isArray(searchTerms) && searchTerms.length > 0 && searchTerms[0] !== '') {
            this.$filterContainerElm.addClass('filled');
        }
        // append the new DOM element to the header row
        if (this.$filterContainerElm && typeof this.$filterContainerElm.appendTo === 'function') {
            this.$filterContainerElm.appendTo($headerElm);
        }
        return this.$filterElm;
    };
    /** On a value change event triggered */
    SliderRangeFilter.prototype.onValueChanged = function (e, ui) {
        var values = ui && Array.isArray(ui.values) ? ui.values : [];
        var value = values.join('..');
        if (this._clearFilterTriggered) {
            this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });
            this.$filterContainerElm.removeClass('filled');
        }
        else {
            value === '' ? this.$filterContainerElm.removeClass('filled') : this.$filterContainerElm.addClass('filled');
            this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: values, shouldTriggerQuery: this._shouldTriggerQuery });
        }
        // reset both flags for next use
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    };
    return SliderRangeFilter;
}());
export { SliderRangeFilter };
//# sourceMappingURL=data:application/json;base64,