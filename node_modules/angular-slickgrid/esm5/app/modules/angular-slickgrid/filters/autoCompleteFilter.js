import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import * as DOMPurify_ from 'dompurify';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
import { FieldType, OperatorType, } from './../models/index';
import { CollectionService } from '../services/collection.service';
import { castToPromise, getDescendantProperty, toKebabCase, unsubscribeAllObservables } from '../services/utilities';
var AutoCompleteFilter = /** @class */ (function () {
    /**
     * Initialize the Filter
     */
    function AutoCompleteFilter(translate, collectionService) {
        this.translate = translate;
        this.collectionService = collectionService;
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
        this.isFilled = false;
        /** The property name for values in the collection */
        this.valueName = 'label';
        this.enableTranslateLabel = false;
        this.subscriptions = [];
    }
    Object.defineProperty(AutoCompleteFilter.prototype, "autoCompleteOptions", {
        /** Getter for the Autocomplete Option */
        get: function () {
            return this._autoCompleteOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "collectionOptions", {
        /** Getter for the Collection Options */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "collection", {
        /** Getter for the Collection Used by the Filter */
        get: function () {
            return this._collection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "columnFilter", {
        /** Getter for the Column Filter */
        get: function () {
            return this.columnDef && this.columnDef.filter || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "filterDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this.$filterElm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "filterOptions", {
        get: function () {
            return this.columnFilter && this.columnFilter.filterOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "customStructure", {
        /** Getter for the Custom Structure if exist */
        get: function () {
            var customStructure = this.columnFilter && this.columnFilter.customStructure;
            var columnType = this.columnFilter && this.columnFilter.type || this.columnDef && this.columnDef.type;
            if (!customStructure && (columnType === FieldType.object && this.columnDef && this.columnDef.dataKey && this.columnDef.labelKey)) {
                customStructure = {
                    label: this.columnDef.labelKey,
                    value: this.columnDef.dataKey,
                };
            }
            return customStructure;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "defaultOperator", {
        /** Getter to know what would be the default operator when none is specified */
        get: function () {
            return OperatorType.equal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "instance", {
        /** jQuery UI AutoComplete instance */
        get: function () {
            return this.$filterElm.autocomplete('instance');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteFilter.prototype, "operator", {
        /** Getter of the Operator to use when doing the filter comparing */
        get: function () {
            return this.columnFilter && this.columnFilter.operator || this.defaultOperator;
        },
        /** Setter for the filter operator */
        set: function (operator) {
            if (this.columnFilter) {
                this.columnFilter.operator = operator;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the filter template
     */
    AutoCompleteFilter.prototype.init = function (args) {
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        if (!this.grid || !this.columnDef || !this.columnFilter || (!this.columnFilter.collection && !this.columnFilter.collectionAsync && !this.columnFilter.filterOptions)) {
            throw new Error("[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") for the AutoComplete Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.autoComplete, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }");
        }
        this.enableTranslateLabel = this.columnFilter && this.columnFilter.enableTranslateLabel || false;
        this.labelName = this.customStructure && this.customStructure.label || 'label';
        this.valueName = this.customStructure && this.customStructure.value || 'value';
        this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';
        this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';
        // always render the DOM element, even if user passed a "collectionAsync",
        var newCollection = this.columnFilter.collection || [];
        this._collection = newCollection;
        this.renderDomElement(newCollection);
        // on every Filter which have a "collection" or a "collectionAsync"
        // we will add (or replace) a Subject to the "collectionAsync" property so that user has possibility to change the collection
        // if "collectionAsync" is already set by the user, it will resolve it first then after it will replace it with a Subject
        var collectionAsync = this.columnFilter && this.columnFilter.collectionAsync;
        if (collectionAsync) {
            return this.renderOptionsAsync(collectionAsync); // create Subject after resolve (createCollectionAsyncSubject)
        }
        else {
            return new Promise(function (resolve) { return resolve(true); });
        }
    };
    /**
     * Clear the filter value
     */
    AutoCompleteFilter.prototype.clear = function (shouldTriggerQuery) {
        if (shouldTriggerQuery === void 0) { shouldTriggerQuery = true; }
        if (this.$filterElm) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            this.$filterElm.val('');
            this.$filterElm.trigger('input');
        }
    };
    /**
     * destroy the filter
     */
    AutoCompleteFilter.prototype.destroy = function () {
        // also unsubscribe all RxJS subscriptions
        this.subscriptions = unsubscribeAllObservables(this.subscriptions);
        if (this.$filterElm) {
            this.$filterElm.off('input').remove();
        }
        this.$filterElm = null;
        this._collection = null;
    };
    /** Set value(s) on the DOM element */
    AutoCompleteFilter.prototype.setValues = function (values, operator) {
        if (values) {
            this.$filterElm.val(values);
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    };
    //
    // protected functions
    // ------------------
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    AutoCompleteFilter.prototype.filterCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to filter certain items of the collection
        if (this.columnFilter && this.columnFilter.collectionFilterBy) {
            var filterBy = this.columnFilter.collectionFilterBy;
            var filterCollectionBy = this.columnFilter.collectionOptions && this.columnFilter.collectionOptions.filterResultAfterEachPass || null;
            outputCollection = this.collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);
        }
        return outputCollection;
    };
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    AutoCompleteFilter.prototype.sortCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to sort the collection
        if (this.columnFilter && this.columnFilter.collectionSortBy) {
            var sortBy = this.columnFilter.collectionSortBy;
            outputCollection = this.collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);
        }
        return outputCollection;
    };
    AutoCompleteFilter.prototype.renderOptionsAsync = function (collectionAsync) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var awaitedCollection;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!collectionAsync) return [3 /*break*/, 2];
                        return [4 /*yield*/, castToPromise(collectionAsync)];
                    case 1:
                        awaitedCollection = _a.sent();
                        this.renderDomElementFromCollectionAsync(awaitedCollection);
                        // because we accept Promises & HttpClient Observable only execute once
                        // we will re-create an RxJs Subject which will replace the "collectionAsync" which got executed once anyway
                        // doing this provide the user a way to call a "collectionAsync.next()"
                        this.createCollectionAsyncSubject();
                        _a.label = 2;
                    case 2: return [2 /*return*/, true];
                }
            });
        });
    };
    /** Create or recreate an Observable Subject and reassign it to the "collectionAsync" object so user can call a "collectionAsync.next()" on it */
    AutoCompleteFilter.prototype.createCollectionAsyncSubject = function () {
        var _this = this;
        var newCollectionAsync = new Subject();
        this.columnFilter.collectionAsync = newCollectionAsync;
        this.subscriptions.push(newCollectionAsync.subscribe(function (collection) { return _this.renderDomElementFromCollectionAsync(collection); }));
    };
    /**
     * When user use a CollectionAsync we will use the returned collection to render the filter DOM element
     * and reinitialize filter collection with this new collection
     */
    AutoCompleteFilter.prototype.renderDomElementFromCollectionAsync = function (collection) {
        this._collection = collection;
        if (this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {
            var collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;
            collection = getDescendantProperty(collection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(collection)) {
            throw new Error('Something went wrong while trying to pull the collection from the "collectionAsync" call in the AutoComplete Filter, the collection is not a valid array.');
        }
        // copy over the array received from the async call to the "collection" as the new collection to use
        // this has to be BEFORE the `collectionObserver().subscribe` to avoid going into an infinite loop
        this.columnFilter.collection = collection;
        // recreate Filter DOM element after getting async collection
        this.renderDomElement(collection);
    };
    AutoCompleteFilter.prototype.renderDomElement = function (collection) {
        var _this = this;
        if (!Array.isArray(collection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {
            var collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;
            collection = getDescendantProperty(collection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(collection)) {
            throw new Error('The "collection" passed to the Autocomplete Filter is not a valid array.');
        }
        // assign the collection to a temp variable before filtering/sorting the collection
        var newCollection = collection;
        // user might want to filter and/or sort certain items of the collection
        newCollection = this.filterCollection(newCollection);
        newCollection = this.sortCollection(newCollection);
        // filter input can only have 1 search term, so we will use the 1st array index if it exist
        var searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';
        // step 1, create HTML string template
        var filterTemplate = this.buildTemplateHtmlString();
        // step 2, create the DOM Element of the filter & pre-load search term
        // also subscribe to the onSelect event
        this._collection = newCollection;
        this.$filterElm = this.createDomElement(filterTemplate, newCollection, searchTerm);
        // step 3, subscribe to the input change event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this.$filterElm.on('input', function (e) {
            var value = e && e.target && e.target.value || '';
            var enableWhiteSpaceTrim = _this.gridOptions.enableFilterTrimWhiteSpace || _this.columnFilter.enableTrimWhiteSpace;
            if (typeof value === 'string' && enableWhiteSpaceTrim) {
                value = value.trim();
            }
            if (_this._clearFilterTriggered) {
                _this.callback(e, { columnDef: _this.columnDef, clearFilterTriggered: _this._clearFilterTriggered, shouldTriggerQuery: _this._shouldTriggerQuery });
                _this.$filterElm.removeClass('filled');
            }
            else {
                value === '' ? _this.$filterElm.removeClass('filled') : _this.$filterElm.addClass('filled');
                _this.callback(e, { columnDef: _this.columnDef, operator: _this.operator, searchTerms: [value], shouldTriggerQuery: _this._shouldTriggerQuery });
            }
            // reset both flags for next use
            _this._clearFilterTriggered = false;
            _this._shouldTriggerQuery = true;
        });
    };
    /**
     * Create the HTML template as a string
     */
    AutoCompleteFilter.prototype.buildTemplateHtmlString = function () {
        var columnId = this.columnDef && this.columnDef.id;
        var placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';
        if (this.columnFilter && this.columnFilter.placeholder) {
            placeholder = this.columnFilter.placeholder;
        }
        return "<input type=\"text\" role=\"presentation\" autocomplete=\"off\" class=\"form-control autocomplete search-filter filter-" + columnId + "\" placeholder=\"" + placeholder + "\">";
    };
    /**
     * From the html template string, create a DOM element
     * @param filterTemplate
     */
    AutoCompleteFilter.prototype.createDomElement = function (filterTemplate, collection, searchTerm) {
        var e_1, _a;
        var _this = this;
        var columnId = this.columnDef && this.columnDef.id;
        var $headerElm = this.grid.getHeaderRowColumn(columnId);
        $($headerElm).empty();
        // create the DOM element & add an ID and filter class
        this.$filterElm = $(filterTemplate);
        var searchTermInput = searchTerm;
        // user might provide his own custom structure
        // jQuery UI autocomplete requires a label/value pair, so we must remap them when user provide different ones
        if (Array.isArray(collection)) {
            collection = collection.map(function (item) {
                return { label: item[_this.labelName], value: item[_this.valueName], labelPrefix: item[_this.labelPrefixName] || '', labelSuffix: item[_this.labelSuffixName] || '' };
            });
        }
        // user might pass his own autocomplete options
        var autoCompleteOptions = this.filterOptions;
        // when user passes it's own autocomplete options
        // we still need to provide our own "select" callback implementation
        if (autoCompleteOptions && autoCompleteOptions.source) {
            autoCompleteOptions.select = function (event, ui) { return _this.onSelect(event, ui); };
            this._autoCompleteOptions = tslib_1.__assign({}, autoCompleteOptions);
            // when renderItem is defined, we need to add our custom style CSS class
            if (this._autoCompleteOptions.renderItem) {
                this._autoCompleteOptions.classes = {
                    'ui-autocomplete': "autocomplete-custom-" + toKebabCase(this._autoCompleteOptions.renderItem.layout)
                };
            }
            // create the jQueryUI AutoComplete
            this.$filterElm.autocomplete(this._autoCompleteOptions);
            // when "renderItem" is defined, we need to call the user's custom renderItem template callback
            if (this._autoCompleteOptions.renderItem) {
                this.$filterElm.autocomplete('instance')._renderItem = this.renderCustomItem.bind(this);
            }
        }
        else {
            var definedOptions = {
                minLength: 0,
                source: collection,
                select: function (event, ui) { return _this.onSelect(event, ui); },
            };
            this._autoCompleteOptions = tslib_1.__assign({}, definedOptions, this.filterOptions);
            this.$filterElm.autocomplete(this._autoCompleteOptions);
            // we'll use our own renderer so that it works with label prefix/suffix and also with html rendering when enabled
            this.$filterElm.autocomplete('instance')._renderItem = this.renderCollectionItem.bind(this);
        }
        this.$filterElm.val(searchTermInput);
        this.$filterElm.data('columnId', columnId);
        // if there's a search term, we will add the "filled" class for styling purposes
        if (searchTerm) {
            this.$filterElm.addClass('filled');
        }
        // append the new DOM element to the header row
        if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {
            var $container = $("<div class=\"autocomplete-container\"></div>");
            $container.appendTo($headerElm);
            this.$filterElm.appendTo($container);
            // add a <span> in order to add spinner styling
            $("<span></span>").appendTo($container);
        }
        // we could optionally trigger a search when clicking on the AutoComplete
        if (this.filterOptions.openSearchListOnFocus) {
            this.$filterElm.click(function () { return _this.$filterElm.autocomplete('search', _this.$filterElm.val()); });
        }
        // user might override any of the jQueryUI callback methods
        if (this.columnFilter.callbacks) {
            try {
                for (var _b = tslib_1.__values(Object.keys(this.columnFilter.callbacks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var callback = _c.value;
                    if (typeof this.columnFilter.callbacks[callback] === 'function') {
                        this.$filterElm.autocomplete('instance')[callback] = this.columnFilter.callbacks[callback];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return this.$filterElm;
    };
    //
    // private functions
    // ------------------
    // this function should be PRIVATE but for unit tests purposes we'll make it public until a better solution is found
    // a better solution would be to get the autocomplete DOM element to work with selection but I couldn't find how to do that in Jest
    AutoCompleteFilter.prototype.onSelect = function (event, ui) {
        if (ui && ui.item) {
            var item = ui.item;
            // when the user defines a "renderItem" (or "_renderItem") template, then we assume the user defines his own custom structure of label/value pair
            // otherwise we know that jQueryUI always require a label/value pair, we can pull them directly
            var hasCustomRenderItemCallback = this.columnFilter && this.columnFilter.callbacks && this.columnFilter.callbacks.hasOwnProperty('_renderItem') || (this.columnFilter && this.columnFilter.filterOptions && this.columnFilter.filterOptions.renderItem) || false;
            var itemLabel = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.labelName] : item.label);
            var itemValue = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.valueName] : item.value);
            this.setValues(itemLabel);
            itemValue === '' ? this.$filterElm.removeClass('filled') : this.$filterElm.addClass('filled');
            this.callback(event, { columnDef: this.columnDef, operator: this.operator, searchTerms: [itemValue], shouldTriggerQuery: this._shouldTriggerQuery });
            // reset both flags for next use
            this._clearFilterTriggered = false;
            this._shouldTriggerQuery = true;
        }
        return false;
    };
    AutoCompleteFilter.prototype.renderCustomItem = function (ul, item) {
        var templateString = this._autoCompleteOptions && this._autoCompleteOptions.renderItem && this._autoCompleteOptions.renderItem.templateCallback(item) || '';
        // sanitize any unauthorized html tags like script and others
        // for the remaining allowed tags we'll permit all attributes
        var sanitizedTemplateText = (DOMPurify.sanitize(templateString, {}) || '').toString();
        return $('<li></li>')
            .data('item.autocomplete', item)
            .append(sanitizedTemplateText)
            .appendTo(ul);
    };
    AutoCompleteFilter.prototype.renderCollectionItem = function (ul, item) {
        var isRenderHtmlEnabled = this.columnFilter && this.columnFilter.enableRenderHtml || false;
        var prefixText = item.labelPrefix || '';
        var labelText = item.label || '';
        var suffixText = item.labelSuffix || '';
        var finalText = prefixText + labelText + suffixText;
        // sanitize any unauthorized html tags like script and others
        // for the remaining allowed tags we'll permit all attributes
        var sanitizedText = (DOMPurify.sanitize(finalText, {}) || '').toString();
        var $liDiv = $('<div></div>')[isRenderHtmlEnabled ? 'html' : 'text'](sanitizedText);
        return $('<li></li>')
            .data('item.autocomplete', item)
            .append($liDiv)
            .appendTo(ul);
    };
    AutoCompleteFilter.ctorParameters = function () { return [
        { type: TranslateService },
        { type: CollectionService }
    ]; };
AutoCompleteFilter.ɵfac = function AutoCompleteFilter_Factory(t) { return new (t || AutoCompleteFilter)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService), ɵngcc0.ɵɵinject(CollectionService)); };
AutoCompleteFilter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AutoCompleteFilter, factory: function (t) { return AutoCompleteFilter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteFilter, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.TranslateService }, { type: CollectionService }]; }, null); })();
    return AutoCompleteFilter;
}());
export { AutoCompleteFilter };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,