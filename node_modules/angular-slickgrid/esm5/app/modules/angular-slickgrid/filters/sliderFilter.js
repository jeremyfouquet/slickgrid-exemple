import { OperatorType, } from './../models/index';
var DEFAULT_MIN_VALUE = 0;
var DEFAULT_MAX_VALUE = 100;
var DEFAULT_STEP = 1;
var SliderFilter = /** @class */ (function () {
    function SliderFilter() {
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
    Object.defineProperty(SliderFilter.prototype, "columnFilter", {
        /** Getter for the Column Filter */
        get: function () {
            return this.columnDef && this.columnDef.filter || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderFilter.prototype, "defaultOperator", {
        /** Getter to know what would be the default operator when none is specified */
        get: function () {
            return OperatorType.equal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderFilter.prototype, "filterParams", {
        /** Getter for the Filter Generic Params */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.params || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderFilter.prototype, "filterProperties", {
        /** Getter for the `filter` properties */
        get: function () {
            return this.columnDef && this.columnDef.filter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderFilter.prototype, "operator", {
        get: function () {
            return this.columnFilter && this.columnFilter.operator || this.defaultOperator;
        },
        /** Setter for the filter operator */
        set: function (operator) {
            if (this.columnFilter) {
                this.columnFilter.operator = operator;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the Filter
     */
    SliderFilter.prototype.init = function (args) {
        var _this = this;
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // define the input & slider number IDs
        this._elementRangeInputId = "rangeInput_" + this.columnDef.field;
        this._elementRangeOutputId = "rangeOutput_" + this.columnDef.field;
        // filter input can only have 1 search term, so we will use the 1st array index if it exist
        var searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';
        // step 1, create HTML string template
        var filterTemplate = this.buildTemplateHtmlString();
        // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled
        this.$filterElm = this.createDomElement(filterTemplate, searchTerm);
        // step 3, subscribe to the change event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this.$filterInputElm.change(function (e) {
            var value = e && e.target && e.target.value;
            _this._currentValue = +value;
            if (_this._clearFilterTriggered) {
                _this.$filterElm.removeClass('filled');
                _this.callback(e, { columnDef: _this.columnDef, clearFilterTriggered: _this._clearFilterTriggered, searchTerms: [], shouldTriggerQuery: _this._shouldTriggerQuery });
            }
            else {
                _this.$filterElm.addClass('filled');
                _this.callback(e, { columnDef: _this.columnDef, operator: _this.operator, searchTerms: [value || '0'], shouldTriggerQuery: _this._shouldTriggerQuery });
            }
            // reset both flags for next use
            _this._clearFilterTriggered = false;
            _this._shouldTriggerQuery = true;
        });
        // if user chose to display the slider number on the right side, then update it every time it changes
        // we need to use both "input" and "change" event to be all cross-browser
        if (!this.filterParams.hideSliderNumber) {
            this.$filterInputElm.on('input change', function (e) {
                var value = e && e.target && e.target.value;
                if (value !== undefined && value !== null) {
                    var elements = document.getElementsByClassName(_this._elementRangeOutputId);
                    if (elements.length) {
                        elements[0].innerHTML = value;
                    }
                }
            });
        }
    };
    /**
     * Clear the filter value
     */
    SliderFilter.prototype.clear = function (shouldTriggerQuery) {
        if (shouldTriggerQuery === void 0) { shouldTriggerQuery = true; }
        if (this.$filterElm) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            var clearedValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : DEFAULT_MIN_VALUE;
            this._currentValue = +clearedValue;
            this.$filterInputElm.val(clearedValue);
            this.$filterNumberElm.html(clearedValue);
            this.$filterInputElm.trigger('change');
        }
    };
    /**
     * destroy the filter
     */
    SliderFilter.prototype.destroy = function () {
        if (this.$filterInputElm) {
            this.$filterInputElm.off('input change').remove();
        }
        this.$filterInputElm = null;
        this.$filterElm = null;
        this.callback = null;
    };
    /**
     * Get selected value retrieved from the slider element
     * @params selected items
     */
    SliderFilter.prototype.getValues = function () {
        return this._currentValue;
    };
    /** Set value(s) on the DOM element */
    SliderFilter.prototype.setValues = function (values, operator) {
        if (Array.isArray(values)) {
            this.$filterInputElm.val("" + values[0]);
            this.$filterNumberElm.html("" + values[0]);
            this._currentValue = +values[0];
        }
        else if (values) {
            this.$filterInputElm.val(values);
            this._currentValue = +values;
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    };
    //
    // private functions
    // ------------------
    /**
     * Create the HTML template as a string
     */
    SliderFilter.prototype.buildTemplateHtmlString = function () {
        var fieldId = this.columnDef && this.columnDef.id;
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var maxValue = this.filterProperties.hasOwnProperty('maxValue') ? this.filterProperties.maxValue : DEFAULT_MAX_VALUE;
        var defaultValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;
        var step = this.filterProperties.hasOwnProperty('valueStep') ? this.filterProperties.valueStep : DEFAULT_STEP;
        if (this.filterParams.hideSliderNumber) {
            return "\n      <div class=\"search-filter slider-container filter-" + fieldId + "\">\n        <input type=\"range\" name=\"" + this._elementRangeInputId + "\"\n          defaultValue=\"" + defaultValue + "\" value=\"" + defaultValue + "\"\n          min=\"" + minValue + "\" max=\"" + maxValue + "\" step=\"" + step + "\"\n          class=\"form-control slider-filter-input range " + this._elementRangeInputId + "\" />\n      </div>";
        }
        return "\n      <div class=\"input-group slider-container search-filter filter-" + fieldId + "\">\n        <input type=\"range\" name=\"" + this._elementRangeInputId + "\"\n          defaultValue=\"" + defaultValue + "\" value=\"" + defaultValue + "\"\n          min=\"" + minValue + "\" max=\"" + maxValue + "\" step=\"" + step + "\"\n          class=\"form-control slider-filter-input range " + this._elementRangeInputId + "\" />\n        <div class=\"input-group-addon input-group-append slider-value\">\n          <span class=\"input-group-text " + this._elementRangeOutputId + "\">" + defaultValue + "</span>\n        </div>\n      </div>";
    };
    /**
     * From the html template string, create a DOM element
     * @param filterTemplate string
     * @param searchTerm optional preset search terms
     */
    SliderFilter.prototype.createDomElement = function (filterTemplate, searchTerm) {
        var columnId = this.columnDef && this.columnDef.id;
        var minValue = this.filterProperties.hasOwnProperty('minValue') ? this.filterProperties.minValue : DEFAULT_MIN_VALUE;
        var startValue = this.filterParams.hasOwnProperty('sliderStartValue') ? this.filterParams.sliderStartValue : minValue;
        var $headerElm = this.grid.getHeaderRowColumn(columnId);
        $($headerElm).empty();
        // create the DOM element & add an ID and filter class
        var $filterElm = $(filterTemplate);
        var searchTermInput = (searchTerm || '0');
        if (+searchTermInput < minValue) {
            searchTermInput = "" + minValue;
        }
        if (+searchTermInput < startValue) {
            searchTermInput = "" + startValue;
        }
        this._currentValue = +searchTermInput;
        this.$filterInputElm = $filterElm.children('input');
        this.$filterNumberElm = $filterElm.children('div.input-group-addon.input-group-append').children();
        this.$filterInputElm.val(searchTermInput);
        this.$filterNumberElm.html(searchTermInput);
        $filterElm.data('columnId', columnId);
        // if there's a search term, we will add the "filled" class for styling purposes
        if (searchTerm) {
            $filterElm.addClass('filled');
        }
        // append the new DOM element to the header row
        if ($filterElm && typeof $filterElm.appendTo === 'function') {
            $filterElm.appendTo($headerElm);
        }
        return $filterElm;
    };
    return SliderFilter;
}());
export { SliderFilter };
//# sourceMappingURL=data:application/json;base64,