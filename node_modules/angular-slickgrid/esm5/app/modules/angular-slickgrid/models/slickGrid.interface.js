//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"slickGrid.interface.js","sourceRoot":"ng://angular-slickgrid/","sources":["app/modules/angular-slickgrid/models/slickGrid.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { GridOption } from './gridOption.interface';\r\nimport { Column } from './column.interface';\r\nimport { ColumnSort } from './columnSort.interface';\r\nimport { Editor } from './editor.interface';\r\nimport { ElementPosition } from './elementPosition.interface';\r\nimport { FormatterResultObject } from './formatterResultObject.interface';\r\nimport { PagingInfo } from './pagingInfo.interface';\r\nimport { SlickDataView } from './slickDataView.interface';\r\nimport { SlickEditorLock } from './slickEditorLock.interface';\r\nimport { SlickEvent } from './slickEvent.interface';\r\n\r\nexport interface SlickGrid {\r\n  /**\r\n   * Adds an \"overlay\" of CSS classes to cell DOM elements. SlickGrid can have many such overlays associated with different keys and they are frequently used by plugins. For example, SlickGrid uses this method internally to decorate selected cells with selectedCellCssClass (see options).\r\n   * @param key A unique key you can use in calls to setCellCssStyles and removeCellCssStyles. If a hash with that key has already been set, an exception will be thrown.\r\n   * @param hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\r\n   * @example\r\n   * {\r\n   * \t0:    {\r\n   * \t\tnumber_column: SlickEvent;\r\n   * \t\ttitle_column: SlickEvent;\r\n   * \t},\r\n   * \t4:    {\r\n   * \t\tpercent_column: SlickEvent;\r\n   * \t}\r\n   * }\r\n   */\r\n  addCellCssStyles(key: string, hash: any): void;\r\n\r\n  /** Apply a Formatter Result to a Cell DOM Node */\r\n  applyFormatResultToCellNode(formatterResult?: FormatterResultObject, cellNode?: HTMLElement, suppressRemove?: boolean): void;\r\n\r\n  /** Proportionally resize a specific column by its name, index or Id */\r\n  autosizeColumn(columnOrIndexOrId: string | number, isInit: boolean): void;\r\n\r\n  /** Proportionately resizes all columns to fill available horizontal space. This does not take the cell contents into consideration. */\r\n  autosizeColumns(): void;\r\n\r\n  /**\r\n   * Returns true if you can click on a given cell and make it the active focus.\r\n   * @param row A row index.\r\n   * @param col A column index.\r\n   */\r\n  canCellBeActive(row: number, col: number): boolean;\r\n\r\n  /**\r\n   * Returns true if selecting the row causes this particular cell to have the selectedCellCssClass applied to it. A cell can be selected if it exists and if it isn't on an empty / \"Add New\" row and if it is not marked as \"unselectable\" in the column definition.\r\n   * @param row A row index.\r\n   * @param col A column index.\r\n   */\r\n  canCellBeSelected(row: number, col: number): boolean;\r\n\r\n  /** Destroy (dispose) of SlickGrid */\r\n  destroy(): void;\r\n\r\n  /**\r\n   * Attempts to switch the active cell into edit mode. Will throw an error if the cell is set to be not editable. Uses the specified editor, otherwise defaults to any default editor for that given cell.\r\n   * @param {object} editor A SlickGrid editor (see examples in slick.editors.js).\r\n   * @param {boolean} preClickModeOn Pre-Click Mode is Enabled?\r\n   * @param {object} event\r\n   */\r\n  editActiveCell(editor: Editor, preClickModeOn?: boolean, event?: Event): void;\r\n\r\n  /**\r\n   * Flashes the cell twice by toggling the CSS class 4 times.\r\n   * @param row A row index.\r\n   * @param cell A column index.\r\n   * @param speed (optional) - The milliseconds delay between the toggling calls. Defaults to 100 ms.\r\n   */\r\n  flashCell(row: number, cell: number, speed?: number): void;\r\n\r\n  /** Set focus */\r\n  focus(): void;\r\n\r\n  /** Get the canvas DOM element */\r\n  getActiveCanvasNode(): HTMLElement;\r\n\r\n  /**\r\n   * Returns an object representing the coordinates of the currently active cell:\r\n   * @example\r\n   * \t{\r\n   * \t  row: activeRow,\r\n   * \t  cell: activeCell\r\n   * \t}\r\n   */\r\n  getActiveCell(): { row: number; cell: number; };\r\n\r\n  /** Returns the DOM element containing the currently active cell. If no cell is active, null is returned. */\r\n  getActiveCellNode(): HTMLElement;\r\n\r\n  /** Returns an object representing information about the active cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors. */\r\n  getActiveCellPosition(): ElementPosition;\r\n\r\n  /** Get the active Viewport DOM node element */\r\n  getActiveViewportNode(): HTMLElement;\r\n\r\n  /** Get the canvas DOM element */\r\n  getCanvases(): HTMLElement;\r\n\r\n  /** Get Grid Canvas Node DOM Element */\r\n  getCanvasNode(): HTMLCanvasElement;\r\n\r\n  /** Get the grid canvas width */\r\n  getCanvasWidth(): number;\r\n\r\n  /**\r\n   * Accepts a key name, returns the group of CSS styles defined under that name. See setCellCssStyles for more info.\r\n   * @param key A string.\r\n   */\r\n  getCellCssStyles(key: string): any;\r\n\r\n  /** Returns the active cell editor. If there is no actively edited cell, null is returned.   */\r\n  getCellEditor(): Editor;\r\n\r\n  /**\r\n   * Returns a hash containing row and cell indexes from a standard W3C/jQuery event.\r\n   * @param e A standard W3C/jQuery event.\r\n   */\r\n  getCellFromEvent(e: Event): any;\r\n\r\n  /**\r\n   * Returns a hash containing row and cell indexes. Coordinates are relative to the top left corner of the grid beginning with the first row (not including the column headers).\r\n   * @param x An x coordinate.\r\n   * @param y A y coordinate.\r\n   */\r\n  getCellFromPoint(x: number, y: number): any;\r\n\r\n  /**\r\n   * Returns a DOM element containing a cell at a given row and cell.\r\n   * @param row A row index.\r\n   * @param cell A column index.\r\n   */\r\n  getCellNode(row: number, cell: number): HTMLElement;\r\n\r\n  /**\r\n   * Returns an object representing information about a cell's position. All coordinates are absolute and take into consideration the visibility and scrolling position of all ancestors.\r\n   * @param row A row index.\r\n   * @param cell A column index.\r\n   */\r\n  getCellNodeBox(row: number, cell: number): ElementPosition;\r\n\r\n  /**\r\n   * Returns the index of a column with a given id. Since columns can be reordered by the user, this can be used to get the column definition independent of the order:\r\n   * @param id A column id.\r\n   */\r\n  getColumnIndex(id: string | number): number;\r\n\r\n  /** Returns an array of column definitions, containing the option settings for each individual column. */\r\n  getColumns(): Column[];\r\n\r\n  /** Get Grid Canvas Node DOM Element */\r\n  getContainerNode(): HTMLElement;\r\n\r\n  /** Returns an array of every data object, unless you're using DataView in which case it returns a DataView object. */\r\n  getData<T = SlickDataView>(): T;\r\n\r\n  /**\r\n   * Returns the databinding item at a given position.\r\n   * @param index Item row index.\r\n   */\r\n  getDataItem<T = any>(rowIndex: number): T;\r\n\r\n  /** Returns the size of the databinding source. */\r\n  getDataLength(): number;\r\n\r\n  /** Get Editor lock */\r\n  getEditorLock(): SlickEditorLock;\r\n\r\n  /** Get Editor Controller */\r\n  getEditController(): {\r\n    /** Commit Current Editor command */\r\n    commitCurrentEdit(): boolean;\r\n\r\n    /** Cancel Current Editor command */\r\n    cancelCurrentEdit(): boolean;\r\n  };\r\n\r\n  /** Get the Footer DOM element */\r\n  getFooterRow(): HTMLElement;\r\n\r\n  /** Get the Footer Row Column DOM element */\r\n  getFooterRowColumn(columnIdOrIdx: string | number): HTMLElement;\r\n\r\n  /** Get frozen (pinned) row offset */\r\n  getFrozenRowOffset(row: number): number;\r\n\r\n  /** Get the Grid Position */\r\n  getGridPosition(): ElementPosition;\r\n\r\n  /** Get the Header DOM element */\r\n  getHeader(columnDef: Column): HTMLElement;\r\n\r\n  /** Get a specific Header Column DOM element */\r\n  getHeaderColumn(columnIdOrIdx: string | number): HTMLElement;\r\n\r\n  /** Get Header Column Width Difference in pixel */\r\n  getHeaderColumnWidthDiff(): number;\r\n\r\n  /** Get the Header Row DOM element */\r\n  getHeaderRow(): HTMLElement;\r\n\r\n  /** Get Header Row Column DOM element by its column Id */\r\n  getHeaderRowColumn(columnId: string | number): HTMLElement;\r\n\r\n  /** Get the headers width in pixel */\r\n  getHeadersWidth(): number;\r\n\r\n  /** Returns an object containing all of the Grid options set on the grid. See a list of Grid Options here.  */\r\n  getOptions(): GridOption;\r\n\r\n  /** Get a Plugin (addon) by its name */\r\n  getPluginByName(name: string): any;\r\n\r\n  /** Get the Pre-Header Panel DOM node element */\r\n  getPreHeaderPanel(): HTMLElement;\r\n\r\n  /** Get the Pre-Header Panel Left DOM node element */\r\n  getPreHeaderPanelLeft(): HTMLElement;\r\n\r\n  /** Get the Pre-Header Panel Right DOM node element */\r\n  getPreHeaderPanelRight(): HTMLElement;\r\n\r\n  /** Get rendered range */\r\n  getRenderedRange(viewportTop: number, viewportLeft: number): { top: number; bottom: number; leftPx: number; rightPx: number; };\r\n\r\n  /** Get scrollbar dimensions */\r\n  getScrollbarDimensions(): { height: number; width: number; };\r\n\r\n  /** Returns an array of row indices corresponding to the currently selected rows. */\r\n  getSelectedRows(): number[];\r\n\r\n  /** Returns the current SelectionModel. See here for more information about SelectionModels. */\r\n  getSelectionModel(): any;\r\n\r\n  /** Get sorted columns */\r\n  getSortColumns(): ColumnSort[];\r\n\r\n  /** Get Top Panel DOM element */\r\n  getTopPanel(): HTMLElement;\r\n\r\n  /** Get grid unique identifier */\r\n  getUID(): string;\r\n\r\n  /** Get Viewport position */\r\n  getViewport(viewportTop?: number, viewportLeft?: number): { top: number; bottom: number; leftPx: number; rightPx: number; };\r\n\r\n  /** Get the Viewport DOM node element */\r\n  getViewportNode(): HTMLElement;\r\n\r\n  /**\r\n   * Accepts a row integer and a cell integer, scrolling the view to the row where row is its row index, and cell is its cell index. Optionally accepts a forceEdit boolean which, if true, will attempt to initiate the edit dialogue for the field in the specified cell.\r\n   * Unlike setActiveCell, this scrolls the row into the viewport and sets the keyboard focus.\r\n   * @param row A row index.\r\n   * @param cell A column index.\r\n   * @param forceEdit If true, will attempt to initiate the edit dialogue for the field in the specified cell.\r\n   */\r\n  gotoCell(row: number, cell: number, forceEdit?: boolean): void;\r\n\r\n  /** Initializes the grid. Called after plugins are registered. Normally, this is called by the constructor, so you don't need to call it. However, in certain cases you may need to delay the initialization until some other process has finished. In that case, set the explicitInitialization option to true and call the grid.init() manually. */\r\n  init(): void;\r\n\r\n  /** Invalidate all rows and re-render the grid rows */\r\n  invalidate(): void;\r\n\r\n  /** Invalidate all rows */\r\n  invalidateAllRows(): void;\r\n\r\n  /** Invalidate a specific row number */\r\n  invalidateRow(row: number): void;\r\n\r\n  /** Invalidate a specific set of row numbers */\r\n  invalidateRows(rows: number[]): void;\r\n\r\n  /** Navigate to the bottom of the grid */\r\n  navigateBottom(): void;\r\n\r\n  /** Switches the active cell one row down skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateDown(): boolean;\r\n\r\n  /** Switches the active cell one cell left skipping unselectable cells. Unline navigatePrev, navigateLeft stops at the first cell of the row. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateLeft(): boolean;\r\n\r\n  /** Tabs over active cell to the next selectable cell. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateNext(): boolean;\r\n\r\n  /** Navigate (scroll) by a page up */\r\n  navigatePageUp(): void;\r\n\r\n  /** Navigate (scroll) by a page down */\r\n  navigatePageDown(): void;\r\n\r\n  /**  Tabs over active cell to the previous selectable cell. Returns a boolean saying whether it was able to complete or not. */\r\n  navigatePrev(): boolean;\r\n\r\n  /** Switches the active cell one cell right skipping unselectable cells. Unline navigateNext, navigateRight stops at the last cell of the row. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateRight(): boolean;\r\n\r\n  /** Navigate to the start row in the grid */\r\n  navigateRowStart(): boolean;\r\n\r\n  /** Navigate to the end row in the grid */\r\n  navigateRowEnd(): boolean;\r\n\r\n  /** Navigate to the top of the grid */\r\n  navigateTop(): void;\r\n\r\n  /** Switches the active cell one row up skipping unselectable cells. Returns a boolean saying whether it was able to complete or not. */\r\n  navigateUp(): boolean;\r\n\r\n  /** (re)Render the grid */\r\n  render(): void;\r\n\r\n  /** Register an external Plugin (addon) */\r\n  registerPlugin(plugin: any): void;\r\n\r\n  /**\r\n   * Removes an \"overlay\" of CSS classes from cell DOM elements. See setCellCssStyles for more.\r\n   * @param key A string key.\r\n   */\r\n  removeCellCssStyles(key: string): void;\r\n\r\n  /**  Resets active cell. */\r\n  resetActiveCell(): void;\r\n\r\n  /** Execute a Resize of the Canvas */\r\n  resizeCanvas(): void;\r\n\r\n  /** Scroll to a specific cell and make it into the view */\r\n  scrollCellIntoView(row: number, cell: number, doPaging: boolean): void;\r\n\r\n  /** Scroll to a specific column and show it into the viewport */\r\n  scrollColumnIntoView(cell: number): void;\r\n\r\n  /** Scroll to a specific row and make it into the view */\r\n  scrollRowIntoView(row: number, doPaging?: boolean): void;\r\n\r\n  /** Scroll to the top row and make it into the view */\r\n  scrollRowToTop(row: number): void;\r\n\r\n  /** Scroll to an Y position in the grid */\r\n  scrollTo(yPos: number): void;\r\n\r\n  /** Sets an active canvas node */\r\n  setActiveCanvasNode(element: HTMLElement): void;\r\n\r\n  /**\r\n   * Sets an active cell.\r\n   * @param {number} row - A row index.\r\n   * @param {number} cell - A column index.\r\n   * @param {boolean} optionEditMode Option Edit Mode is Auto-Edit?\r\n   * @param {boolean} preClickModeOn Pre-Click Mode is Enabled?\r\n   * @param {boolean} suppressActiveCellChangedEvent Are we suppressing Active Cell Changed Event (defaults to false)\r\n   */\r\n  setActiveCell(row: number, cell: number, optionEditMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean): void;\r\n\r\n  /**\r\n   * Sets an active cell.\r\n   * @param {number} row - A row index.\r\n   * @param {number} cell - A column index.\r\n   * @param {boolean} suppressScrollIntoView - optionally suppress the ScrollIntoView that happens by default (defaults to false)\r\n   */\r\n  setActiveRow(row: number, cell?: number, suppressScrollIntoView?: boolean): void;\r\n\r\n  /** Sets an active viewport node */\r\n  setActiveViewportNode(element: HTMLElement): void;\r\n\r\n  /**\r\n   * Sets CSS classes to specific grid cells by calling removeCellCssStyles(key) followed by addCellCssStyles(key, hash). key is name for this set of styles so you can reference it later - to modify it or remove it, for example. hash is a per-row-index, per-column-name nested hash of CSS classes to apply.\r\n   * Suppose you have a grid with columns:\r\n   * [\"login\", \"name\", \"birthday\", \"age\", \"likes_icecream\", \"favorite_cake\"]\r\n   * ...and you'd like to highlight the \"birthday\" and \"age\" columns for people whose birthday is today, in this case, rows at index 0 and 9. (The first and tenth row in the grid).\r\n   * @param key A string key. Will overwrite any data already associated with this key.\r\n   * @param hash A hash of additional cell CSS classes keyed by row number and then by column id. Multiple CSS classes can be specified and separated by space.\r\n   */\r\n  setCellCssStyles(key: string, hash: any): void;\r\n\r\n  /** Set the Column Header Visibility and optionally enable/disable animation (enabled by default) */\r\n  setColumnHeaderVisibility(visible: boolean, animate?: boolean): void;\r\n\r\n  /**\r\n   * Sets grid columns. Column headers will be recreated and all rendered rows will be removed. To rerender the grid (if necessary), call render().\r\n   * @param columnDefinitions An array of column definitions.\r\n   */\r\n  setColumns(columnDefinitions: Column[]): void;\r\n\r\n  /**\r\n   * Sets a new source for databinding and removes all rendered rows. Note that this doesn't render the new rows - you can follow it with a call to render() to do that.\r\n   * @param newData New databinding source using a regular JavaScript array.. or a custom object exposing getItem(index) and getLength() functions.\r\n   * @param scrollToTop If true, the grid will reset the vertical scroll position to the top of the grid.\r\n   */\r\n  setData(newData: any | any[], scrollToTop: boolean): void;\r\n\r\n  /** Set the Footer Visibility and optionally enable/disable animation (enabled by default) */\r\n  setFooterRowVisibility(visible: boolean, animate?: boolean): void;\r\n\r\n  /** Set the Header Row Visibility and optionally enable/disable animation (enabled by default) */\r\n  setHeaderRowVisibility(visible: boolean, animate?: boolean): void;\r\n\r\n  /**\r\n   * Extends grid options with a given hash. If an there is an active edit, the grid will attempt to commit the changes and only continue if the attempt succeeds.\r\n   * @params options An object with configuration options.\r\n   * @params do we want to supress the grid re-rendering? (defaults to false)\r\n   * @params do we want to supress the columns set, via \"setColumns()\" method? (defaults to false)\r\n   */\r\n  setOptions(options: GridOption, suppressRender?: boolean, suppressColumnSet?: boolean): void;\r\n\r\n  /** Set the Pre-Header Visibility and optionally enable/disable animation (enabled by default) */\r\n  setPreHeaderPanelVisibility(visible: boolean, animate?: boolean): void;\r\n\r\n  /**\r\n   * Accepts an array of row indices and applies the current selectedCellCssClass to the cells in the row, respecting whether cells have been flagged as selectable.\r\n   * @param rowsArray An array of row numbers.\r\n   */\r\n  setSelectedRows(rowsArray: number[]): void;\r\n\r\n  /**\r\n   * Unregisters a current selection model and registers a new one. See the definition of SelectionModel for more information.\r\n   * @selectionModel A SelectionModel.\r\n   */\r\n  setSelectionModel(selectionModel: any): void;\r\n\r\n  /**\r\n   * Accepts a columnId string and an ascending boolean. Applies a sort glyph in either ascending or descending form to the header of the column. Note that this does not actually sort the column. It only adds the sort glyph to the header.\r\n   * @param columnId\r\n   * @param ascending\r\n   */\r\n  setSortColumn(columnId: string | number, ascending: boolean): void;\r\n\r\n  /**\r\n   * Accepts an array of objects in the form [ { columnId: [string], sortAsc: [boolean] }, ... ]. When called, this will apply a sort glyph in either ascending or descending form to the header of each column specified in the array. Note that this does not actually sort the column. It only adds the sort glyph to the header\r\n   * @param cols\r\n   */\r\n  setSortColumns(cols: ColumnSort[]): void;\r\n\r\n  /** Set the Top Panel Visibility and optionally enable/disable animation (enabled by default) */\r\n  setTopPanelVisibility(visible: boolean, animate?: boolean): void;\r\n\r\n  /** Unregister an external Plugin (addon) */\r\n  unregisterPlugin(plugin: any): void;\r\n\r\n  /** Update a specific cell by its row and column index */\r\n  updateCell(row: number, cell: number): void;\r\n\r\n  /**\r\n   * Updates an existing column definition and a corresponding header DOM element with the new title and tooltip.\r\n   * @param columnId Column id.\r\n   * @param title New column name.\r\n   * @param toolTip New column tooltip.\r\n   */\r\n  updateColumnHeader(columnId: string | number, title?: string, toolTip?: string): void;\r\n\r\n  /** Update paging information status from the View */\r\n  updatePagingStatusFromView(pagingInfo: PagingInfo): void;\r\n\r\n  /** Update a specific row by its row index */\r\n  updateRow(row: number): void;\r\n\r\n  /** Update the dataset row count */\r\n  updateRowCount(): void;\r\n\r\n  // -----------------------------\r\n  // Available Slick Grid Events\r\n  // -----------------------------\r\n\r\n  onActiveCellChanged: SlickEvent;\r\n  onActiveCellPositionChanged: SlickEvent;\r\n  onAddNewRow: SlickEvent;\r\n  onAutosizeColumns: SlickEvent;\r\n  onBeforeAppendCell: SlickEvent;\r\n  onBeforeCellEditorDestroy: SlickEvent;\r\n  onBeforeColumnsResize: SlickEvent;\r\n  onBeforeDestroy: SlickEvent;\r\n  onBeforeEditCell: SlickEvent;\r\n  onBeforeHeaderCellDestroy: SlickEvent;\r\n  onBeforeHeaderRowCellDestroy: SlickEvent;\r\n  onBeforeFooterRowCellDestroy: SlickEvent;\r\n  onCellChange: SlickEvent;\r\n  onCellCssStylesChanged: SlickEvent;\r\n  onClick: SlickEvent;\r\n  onColumnsDrag: SlickEvent;\r\n  onColumnsReordered: SlickEvent;\r\n  onColumnsResized: SlickEvent;\r\n  onContextMenu: SlickEvent;\r\n  onDrag: SlickEvent;\r\n  onDragEnd: SlickEvent;\r\n  onDragInit: SlickEvent;\r\n  onDragStart: SlickEvent;\r\n  onDblClick: SlickEvent;\r\n  onFooterContextMenu: SlickEvent;\r\n  onFooterRowCellRendered: SlickEvent;\r\n  onHeaderCellRendered: SlickEvent;\r\n  onFooterClick: SlickEvent;\r\n  onHeaderClick: SlickEvent;\r\n  onHeaderContextMenu: SlickEvent;\r\n  onHeaderMouseEnter: SlickEvent;\r\n  onHeaderMouseLeave: SlickEvent;\r\n  onHeaderRowCellRendered: SlickEvent;\r\n  onKeyDown: SlickEvent;\r\n  onMouseEnter: SlickEvent;\r\n  onMouseLeave: SlickEvent;\r\n  onValidationError: SlickEvent;\r\n  onViewportChanged: SlickEvent;\r\n  onRendered: SlickEvent;\r\n  onSelectedRowsChanged: SlickEvent;\r\n  onSetOptions: SlickEvent;\r\n  onScroll: SlickEvent;\r\n  onSort: SlickEvent;\r\n}\r\n"]}