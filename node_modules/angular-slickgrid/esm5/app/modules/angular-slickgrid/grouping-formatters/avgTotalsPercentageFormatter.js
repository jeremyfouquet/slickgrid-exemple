import { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities';
import { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';
export var avgTotalsPercentageFormatter = function (totals, columnDef, grid) {
    var field = columnDef.field || '';
    var val = totals.avg && totals.avg[field];
    var params = columnDef && columnDef.params;
    var prefix = params && params.groupFormatterPrefix || '';
    var suffix = params && params.groupFormatterSuffix || '';
    var minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    var maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    var decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    var thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    var displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val !== null && val !== undefined && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    var outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
                    return prefix + "(" + outputVal + "%)" + suffix;
                }
                return prefix + "(" + decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator) + "%)" + suffix;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            var outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
            return "" + prefix + outputVal + "%" + suffix;
        }
        return "" + prefix + decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator) + "%" + suffix;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzUGVyY2VudGFnZUZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZ3JvdXBpbmctZm9ybWF0dGVycy9hdmdUb3RhbHNQZXJjZW50YWdlRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhGLE1BQU0sQ0FBQyxJQUFNLDRCQUE0QixHQUF5QixVQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLElBQVU7SUFDM0csSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDcEMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLElBQU0sTUFBTSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzdDLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBQ3pELElBQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBQzNELElBQU0sVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsSUFBTSxVQUFVLEdBQUcsb0NBQW9DLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RixJQUFNLGdCQUFnQixHQUFHLG9DQUFvQyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEcsSUFBTSxpQkFBaUIsR0FBRyxvQ0FBb0MsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLElBQU0sb0NBQW9DLEdBQUcsb0NBQW9DLENBQUMsc0NBQXNDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVsSixJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3JELElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtZQUNYLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxvQ0FBb0MsRUFBRTtnQkFDekMsTUFBTSxJQUFJLEdBQUcsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDMUMsSUFBTSxTQUFTLEdBQUcsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO29CQUNqRixPQUFVLE1BQU0sU0FBSSxTQUFTLFVBQUssTUFBUSxDQUFDO2lCQUM1QztnQkFDRCxPQUFVLE1BQU0sU0FBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxVQUFLLE1BQVEsQ0FBQzthQUNySDtTQUNGO1FBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzFDLElBQU0sU0FBUyxHQUFHLDBCQUEwQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUNqRixPQUFPLEtBQUcsTUFBTSxHQUFHLFNBQVMsU0FBSSxNQUFRLENBQUM7U0FDMUM7UUFDRCxPQUFPLEtBQUcsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLFNBQUksTUFBUSxDQUFDO0tBQ25IO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEdyb3VwVG90YWxzRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBkZWNpbWFsRm9ybWF0dGVkLCB0aG91c2FuZFNlcGFyYXRvckZvcm1hdHRlZCB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucyB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvZm9ybWF0dGVyVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBhdmdUb3RhbHNQZXJjZW50YWdlRm9ybWF0dGVyOiBHcm91cFRvdGFsc0Zvcm1hdHRlciA9ICh0b3RhbHM6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGdyaWQ/OiBhbnkpID0+IHtcclxuICBjb25zdCBmaWVsZCA9IGNvbHVtbkRlZi5maWVsZCB8fCAnJztcclxuICBsZXQgdmFsID0gdG90YWxzLmF2ZyAmJiB0b3RhbHMuYXZnW2ZpZWxkXTtcclxuICBjb25zdCBwYXJhbXMgPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLnBhcmFtcztcclxuICBsZXQgcHJlZml4ID0gcGFyYW1zICYmIHBhcmFtcy5ncm91cEZvcm1hdHRlclByZWZpeCB8fCAnJztcclxuICBjb25zdCBzdWZmaXggPSBwYXJhbXMgJiYgcGFyYW1zLmdyb3VwRm9ybWF0dGVyU3VmZml4IHx8ICcnO1xyXG4gIGNvbnN0IG1pbkRlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ21pbkRlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQpO1xyXG4gIGNvbnN0IG1heERlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ21heERlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQpO1xyXG4gIGNvbnN0IGRlY2ltYWxTZXBhcmF0b3IgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ2RlY2ltYWxTZXBhcmF0b3InLCBjb2x1bW5EZWYsIGdyaWQsICcuJyk7XHJcbiAgY29uc3QgdGhvdXNhbmRTZXBhcmF0b3IgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ3Rob3VzYW5kU2VwYXJhdG9yJywgY29sdW1uRGVmLCBncmlkLCAnJyk7XHJcbiAgY29uc3QgZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMnLCBjb2x1bW5EZWYsIGdyaWQsIGZhbHNlKTtcclxuXHJcbiAgaWYgKHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IHVuZGVmaW5lZCAmJiAhaXNOYU4oK3ZhbCkpIHtcclxuICAgIGlmICh2YWwgPCAwKSB7XHJcbiAgICAgIHZhbCA9IE1hdGguYWJzKHZhbCk7XHJcbiAgICAgIGlmICghZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzKSB7XHJcbiAgICAgICAgcHJlZml4ICs9ICctJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNOYU4obWluRGVjaW1hbCkgJiYgaXNOYU4obWF4RGVjaW1hbCkpIHtcclxuICAgICAgICAgIGNvbnN0IG91dHB1dFZhbCA9IHRob3VzYW5kU2VwYXJhdG9yRm9ybWF0dGVkKE1hdGgucm91bmQodmFsKSwgdGhvdXNhbmRTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0oJHtvdXRwdXRWYWx9JSkke3N1ZmZpeH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYCR7cHJlZml4fSgke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsLCBkZWNpbWFsU2VwYXJhdG9yLCB0aG91c2FuZFNlcGFyYXRvcil9JSkke3N1ZmZpeH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzTmFOKG1pbkRlY2ltYWwpICYmIGlzTmFOKG1heERlY2ltYWwpKSB7XHJcbiAgICAgIGNvbnN0IG91dHB1dFZhbCA9IHRob3VzYW5kU2VwYXJhdG9yRm9ybWF0dGVkKE1hdGgucm91bmQodmFsKSwgdGhvdXNhbmRTZXBhcmF0b3IpO1xyXG4gICAgICByZXR1cm4gYCR7cHJlZml4fSR7b3V0cHV0VmFsfSUke3N1ZmZpeH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsLCBkZWNpbWFsU2VwYXJhdG9yLCB0aG91c2FuZFNlcGFyYXRvcil9JSR7c3VmZml4fWA7XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufTtcclxuIl19