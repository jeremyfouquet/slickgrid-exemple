import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import { FieldType } from '../models/index';
import * as moment_ from 'moment-mini';
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
export function compareDates(value1, value2, sortDirection, sortColumn, format, strict) {
    var diff = 0;
    var checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || false;
    if (value1 === null || value1 === '' || (checkForUndefinedValues && value1 === undefined) || !moment(value1, format, strict).isValid()) {
        diff = -1;
    }
    else if (value2 === null || value2 === '' || (checkForUndefinedValues && value2 === undefined) || !moment(value2, format, strict).isValid()) {
        diff = 1;
    }
    else {
        var date1 = moment(value1, format, strict);
        var date2 = moment(value2, format, strict);
        diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);
    }
    return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));
}
/** From a FieldType, return the associated date Sorter */
export function getAssociatedDateSorter(fieldType) {
    var FORMAT = (fieldType === FieldType.date) ? moment.ISO_8601 : mapMomentDateFormatWithFieldType(fieldType);
    return function (value1, value2, sortDirection, sortColumn) {
        if (FORMAT === moment.ISO_8601) {
            return compareDates(value1, value2, sortDirection, sortColumn, FORMAT, false);
        }
        return compareDates(value1, value2, sortDirection, sortColumn, FORMAT, true);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc29ydGVycy9kYXRlVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBVSxTQUFTLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1RCxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUksTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsVUFBa0IsRUFBRSxNQUE0QyxFQUFFLE1BQWdCO0lBQzlKLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQU0sdUJBQXVCLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUM7SUFFeEYsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN0SSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDWDtTQUFNLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLElBQUksTUFBTSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0ksSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNWO1NBQU07UUFDTCxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDMUU7SUFFRCxPQUFPLGFBQWEsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsMERBQTBEO0FBQzFELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxTQUFvQjtJQUMxRCxJQUFNLE1BQU0sR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlHLE9BQU8sVUFBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsVUFBa0I7UUFDekUsSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM5QixPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBDb2x1bW4sIEZpZWxkVHlwZSwgU29ydGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQtbWluaSc7XHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgXCJtb21lbnQgaGFzIG5vIGRlZmF1bHQgZXhwb3J0XCIgaXNzdWUsIGRvY3VtZW50IGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzY3MFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHNvcnREaXJlY3Rpb246IG51bWJlciwgc29ydENvbHVtbjogQ29sdW1uLCBmb3JtYXQ6IHN0cmluZyB8IG1vbWVudF8uTW9tZW50QnVpbHRpbkZvcm1hdCwgc3RyaWN0PzogYm9vbGVhbikge1xyXG4gIGxldCBkaWZmID0gMDtcclxuICBjb25zdCBjaGVja0ZvclVuZGVmaW5lZFZhbHVlcyA9IHNvcnRDb2x1bW4gJiYgc29ydENvbHVtbi52YWx1ZUNvdWxkQmVVbmRlZmluZWQgfHwgZmFsc2U7XHJcblxyXG4gIGlmICh2YWx1ZTEgPT09IG51bGwgfHwgdmFsdWUxID09PSAnJyB8fCAoY2hlY2tGb3JVbmRlZmluZWRWYWx1ZXMgJiYgdmFsdWUxID09PSB1bmRlZmluZWQpIHx8ICFtb21lbnQodmFsdWUxLCBmb3JtYXQsIHN0cmljdCkuaXNWYWxpZCgpKSB7XHJcbiAgICBkaWZmID0gLTE7XHJcbiAgfSBlbHNlIGlmICh2YWx1ZTIgPT09IG51bGwgfHwgdmFsdWUyID09PSAnJyB8fCAoY2hlY2tGb3JVbmRlZmluZWRWYWx1ZXMgJiYgdmFsdWUyID09PSB1bmRlZmluZWQpIHx8ICFtb21lbnQodmFsdWUyLCBmb3JtYXQsIHN0cmljdCkuaXNWYWxpZCgpKSB7XHJcbiAgICBkaWZmID0gMTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZGF0ZTEgPSBtb21lbnQodmFsdWUxLCBmb3JtYXQsIHN0cmljdCk7XHJcbiAgICBjb25zdCBkYXRlMiA9IG1vbWVudCh2YWx1ZTIsIGZvcm1hdCwgc3RyaWN0KTtcclxuICAgIGRpZmYgPSBwYXJzZUludChkYXRlMS5mb3JtYXQoJ1gnKSwgMTApIC0gcGFyc2VJbnQoZGF0ZTIuZm9ybWF0KCdYJyksIDEwKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzb3J0RGlyZWN0aW9uICogKGRpZmYgPT09IDAgPyAwIDogKGRpZmYgPiAwID8gMSA6IC0xKSk7XHJcbn1cclxuXHJcbi8qKiBGcm9tIGEgRmllbGRUeXBlLCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgZGF0ZSBTb3J0ZXIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFzc29jaWF0ZWREYXRlU29ydGVyKGZpZWxkVHlwZTogRmllbGRUeXBlKTogU29ydGVyIHtcclxuICBjb25zdCBGT1JNQVQgPSAoZmllbGRUeXBlID09PSBGaWVsZFR5cGUuZGF0ZSkgPyBtb21lbnQuSVNPXzg2MDEgOiBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZShmaWVsZFR5cGUpO1xyXG5cclxuICByZXR1cm4gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgc29ydERpcmVjdGlvbjogbnVtYmVyLCBzb3J0Q29sdW1uOiBDb2x1bW4pID0+IHtcclxuICAgIGlmIChGT1JNQVQgPT09IG1vbWVudC5JU09fODYwMSkge1xyXG4gICAgICByZXR1cm4gY29tcGFyZURhdGVzKHZhbHVlMSwgdmFsdWUyLCBzb3J0RGlyZWN0aW9uLCBzb3J0Q29sdW1uLCBGT1JNQVQsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wYXJlRGF0ZXModmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIHNvcnRDb2x1bW4sIEZPUk1BVCwgdHJ1ZSk7XHJcbiAgfTtcclxufVxyXG4iXX0=