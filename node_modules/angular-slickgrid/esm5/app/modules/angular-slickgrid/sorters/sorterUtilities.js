import { FieldType } from './../models/index';
import { Sorters } from './index';
import { getAssociatedDateSorter } from './dateUtilities';
export function sortByFieldType(fieldType, value1, value2, sortDirection, sortColumn) {
    var sortResult = 0;
    switch (fieldType) {
        case FieldType.float:
        case FieldType.integer:
        case FieldType.number:
            sortResult = Sorters.numeric(value1, value2, sortDirection, sortColumn);
            break;
        case FieldType.date:
        case FieldType.dateIso:
        case FieldType.dateUtc:
        case FieldType.dateTime:
        case FieldType.dateTimeIso:
        case FieldType.dateTimeIsoAmPm:
        case FieldType.dateTimeIsoAM_PM:
        case FieldType.dateTimeShortIso:
        case FieldType.dateEuro:
        case FieldType.dateEuroShort:
        case FieldType.dateTimeShortEuro:
        case FieldType.dateTimeEuro:
        case FieldType.dateTimeEuroAmPm:
        case FieldType.dateTimeEuroAM_PM:
        case FieldType.dateTimeEuroShort:
        case FieldType.dateTimeEuroShortAmPm:
        case FieldType.dateTimeEuroShortAM_PM:
        case FieldType.dateUs:
        case FieldType.dateUsShort:
        case FieldType.dateTimeShortUs:
        case FieldType.dateTimeUs:
        case FieldType.dateTimeUsAmPm:
        case FieldType.dateTimeUsAM_PM:
        case FieldType.dateTimeUsShort:
        case FieldType.dateTimeUsShortAmPm:
        case FieldType.dateTimeUsShortAM_PM:
            sortResult = getAssociatedDateSorter(fieldType).call(this, value1, value2, sortDirection, sortColumn);
            break;
        case FieldType.object:
            sortResult = Sorters.objectString(value1, value2, sortDirection, sortColumn);
            break;
        case FieldType.string:
        case FieldType.text:
        case FieldType.password:
        case FieldType.readonly:
        default:
            sortResult = Sorters.string(value1, value2, sortDirection, sortColumn);
            break;
    }
    return sortResult;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9zb3J0ZXJzL3NvcnRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUErQixNQUFNLG1CQUFtQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxTQUFvQixFQUFFLE1BQVcsRUFBRSxNQUFXLEVBQUUsYUFBMkMsRUFBRSxVQUFtQjtJQUM5SSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsUUFBUSxTQUFTLEVBQUU7UUFDakIsS0FBSyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3JCLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUN2QixLQUFLLFNBQVMsQ0FBQyxNQUFNO1lBQ25CLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3hFLE1BQU07UUFDUixLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDcEIsS0FBSyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUN2QixLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEIsS0FBSyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQzNCLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyxLQUFLLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEIsS0FBSyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQzdCLEtBQUssU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pDLEtBQUssU0FBUyxDQUFDLFlBQVksQ0FBQztRQUM1QixLQUFLLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyxLQUFLLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqQyxLQUFLLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqQyxLQUFLLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztRQUNyQyxLQUFLLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsS0FBSyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQzNCLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDMUIsS0FBSyxTQUFTLENBQUMsY0FBYyxDQUFDO1FBQzlCLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxlQUFlLENBQUM7UUFDL0IsS0FBSyxTQUFTLENBQUMsbUJBQW1CLENBQUM7UUFDbkMsS0FBSyxTQUFTLENBQUMsb0JBQW9CO1lBQ2pDLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3RHLE1BQU07UUFDUixLQUFLLFNBQVMsQ0FBQyxNQUFNO1lBQ25CLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzdFLE1BQU07UUFDUixLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQ3BCLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUN4QixLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEI7WUFDRSxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN2RSxNQUFNO0tBQ1Q7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBGaWVsZFR5cGUsIFNvcnREaXJlY3Rpb25OdW1iZXIsIFNvcnRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgU29ydGVycyB9IGZyb20gJy4vaW5kZXgnO1xyXG5pbXBvcnQgeyBnZXRBc3NvY2lhdGVkRGF0ZVNvcnRlciB9IGZyb20gJy4vZGF0ZVV0aWxpdGllcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc29ydEJ5RmllbGRUeXBlKGZpZWxkVHlwZTogRmllbGRUeXBlLCB2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHNvcnREaXJlY3Rpb246IG51bWJlciB8IFNvcnREaXJlY3Rpb25OdW1iZXIsIHNvcnRDb2x1bW4/OiBDb2x1bW4pIHtcclxuICBsZXQgc29ydFJlc3VsdCA9IDA7XHJcblxyXG4gIHN3aXRjaCAoZmllbGRUeXBlKSB7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5mbG9hdDpcclxuICAgIGNhc2UgRmllbGRUeXBlLmludGVnZXI6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5udW1iZXI6XHJcbiAgICAgIHNvcnRSZXN1bHQgPSBTb3J0ZXJzLm51bWVyaWModmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIHNvcnRDb2x1bW4pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGU6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlSXNvOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVV0YzpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVJc286XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUlzb0FtUG06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUlzb0FNX1BNOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVTaG9ydElzbzpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVFdXJvOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZUV1cm9TaG9ydDpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lU2hvcnRFdXJvOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVFdXJvOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVFdXJvQW1QbTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lRXVyb0FNX1BNOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVFdXJvU2hvcnQ6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUV1cm9TaG9ydEFtUG06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUV1cm9TaG9ydEFNX1BNOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVVzOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVVzU2hvcnQ6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVNob3J0VXM6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVVc0FtUG06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzQU1fUE06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzU2hvcnQ6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzU2hvcnRBbVBtOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVVc1Nob3J0QU1fUE06XHJcbiAgICAgIHNvcnRSZXN1bHQgPSBnZXRBc3NvY2lhdGVkRGF0ZVNvcnRlcihmaWVsZFR5cGUpLmNhbGwodGhpcywgdmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIHNvcnRDb2x1bW4pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgRmllbGRUeXBlLm9iamVjdDpcclxuICAgICAgc29ydFJlc3VsdCA9IFNvcnRlcnMub2JqZWN0U3RyaW5nKHZhbHVlMSwgdmFsdWUyLCBzb3J0RGlyZWN0aW9uLCBzb3J0Q29sdW1uKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5zdHJpbmc6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS50ZXh0OlxyXG4gICAgY2FzZSBGaWVsZFR5cGUucGFzc3dvcmQ6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5yZWFkb25seTpcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHNvcnRSZXN1bHQgPSBTb3J0ZXJzLnN0cmluZyh2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbiwgc29ydENvbHVtbik7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNvcnRSZXN1bHQ7XHJcbn1cclxuIl19