import { TranslateService } from '@ngx-translate/core';
import { Constants } from './../constants';
import { KeyCode, } from './../models/index';
import { getDescendantProperty, getHtmlElementOffset, getTranslationPrefix, setDeepValue } from '../services/utilities';
import { textValidator } from '../editorValidators/textValidator';
var DEFAULT_MAX_LENGTH = 500;
/*
 * An example of a 'detached' editor.
 * The UI is added onto document BODY and .position(), .show() and .hide() are implemented.
 * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
 */
var LongTextEditor = /** @class */ (function () {
    function LongTextEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = args.grid && args.grid.getOptions();
        var options = this.gridOptions || this.args.column.params || {};
        if (options && options.i18n instanceof TranslateService) {
            this._translate = options.i18n;
        }
        // get locales provided by user in forRoot or else use default English locales via the Constants
        this._locales = this.gridOptions && this.gridOptions.locales || Constants.locales;
        this.init();
    }
    Object.defineProperty(LongTextEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LongTextEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LongTextEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$textarea;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LongTextEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LongTextEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return (this.columnEditor && this.columnEditor.validator) || (this.columnDef && this.columnDef.validator);
        },
        enumerable: true,
        configurable: true
    });
    LongTextEditor.prototype.init = function () {
        var _this = this;
        var cancelText = '';
        var saveText = '';
        if (this._translate && this._translate.instant && this._translate.currentLang) {
            var translationPrefix = getTranslationPrefix(this.gridOptions);
            cancelText = this._translate.instant(translationPrefix + "CANCEL");
            saveText = this._translate.instant(translationPrefix + "SAVE");
        }
        else {
            cancelText = this._locales && this._locales.TEXT_CANCEL;
            saveText = this._locales && this._locales.TEXT_SAVE;
        }
        var columnId = this.columnDef && this.columnDef.id;
        var placeholder = this.columnEditor && this.columnEditor.placeholder || '';
        var title = this.columnEditor && this.columnEditor.title || '';
        var maxLength = this.columnEditor && this.columnEditor.maxLength || DEFAULT_MAX_LENGTH;
        var textAreaRows = this.columnEditor && this.columnEditor.params && this.columnEditor.params.textAreaRows || 6;
        var $container = $('body');
        this._$wrapper = $("<div class=\"slick-large-editor-text editor-" + columnId + "\" />").appendTo($container);
        this._$textarea = $("<textarea hidefocus rows=\"" + textAreaRows + "\" placeholder=\"" + placeholder + "\" title=\"" + title + "\">").appendTo(this._$wrapper);
        var editorFooterElm = $("<div class=\"editor-footer\"/>");
        var countContainerElm = $("<span class=\"counter\"/>");
        this._$currentLengthElm = $("<span class=\"text-length\">0</span>");
        var textMaxLengthElm = $("<span>/</span><span class=\"max-length\">" + maxLength + "</span>");
        this._$currentLengthElm.appendTo(countContainerElm);
        textMaxLengthElm.appendTo(countContainerElm);
        var cancelBtnElm = $("<button class=\"btn btn-cancel btn-default btn-xs\">" + cancelText + "</button>");
        var saveBtnElm = $("<button class=\"btn btn-save btn-primary btn-xs\">" + saveText + "</button>");
        countContainerElm.appendTo(editorFooterElm);
        cancelBtnElm.appendTo(editorFooterElm);
        saveBtnElm.appendTo(editorFooterElm);
        editorFooterElm.appendTo(this._$wrapper);
        this._$wrapper.find('.btn-save').on('click', function () { return _this.save(); });
        this._$wrapper.find('.btn-cancel').on('click', function () { return _this.cancel(); });
        this._$textarea.on('keydown', this.handleKeyDown.bind(this));
        this._$textarea.on('input', this.handleOnInputChange.bind(this));
        this.position(this.args && this.args.position);
        this._$textarea.focus().select();
    };
    LongTextEditor.prototype.cancel = function () {
        var value = this.defaultValue || '';
        this._$textarea.val(value);
        this._$currentLengthElm.text(value.length);
        if (this.args && this.args.cancelChanges) {
            this.args.cancelChanges();
        }
    };
    LongTextEditor.prototype.hide = function () {
        this._$wrapper.hide();
    };
    LongTextEditor.prototype.show = function () {
        this._$wrapper.show();
    };
    LongTextEditor.prototype.destroy = function () {
        if (this._$textarea) {
            this._$textarea.off('keydown');
            this._$textarea.off('input');
        }
        if (this._$wrapper) {
            this._$wrapper.find('.btn-save').off('click');
            this._$wrapper.find('.btn-cancel').off('click');
            this._$wrapper.remove();
        }
        this._$wrapper = null;
    };
    LongTextEditor.prototype.focus = function () {
        this._$textarea.focus();
    };
    LongTextEditor.prototype.getValue = function () {
        return this._$textarea.val();
    };
    LongTextEditor.prototype.setValue = function (val) {
        this._$textarea.val(val);
        this._$currentLengthElm.text(val.length);
    };
    LongTextEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        var isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
        // validate the value before applying it (if not valid we'll set an empty string)
        var validation = this.validate(state);
        var newValue = (validation && validation.valid) ? state : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    LongTextEditor.prototype.isValueChanged = function () {
        var elmValue = this._$textarea.val();
        return (!(elmValue === '' && (this.defaultValue === null || this.defaultValue === undefined))) && (elmValue !== this.defaultValue);
    };
    LongTextEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            var value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this.defaultValue = value || '';
            this._$textarea.val(this.defaultValue);
            this._$currentLengthElm.text(this.defaultValue.length);
            this._$textarea[0].defaultValue = this.defaultValue;
            this._$textarea.select();
        }
    };
    LongTextEditor.prototype.position = function (parentPosition) {
        var containerOffset = getHtmlElementOffset(this.args.container);
        this._$wrapper
            .css('top', (containerOffset.top || parentPosition.top || 0))
            .css('left', (containerOffset.left || parentPosition.left || 0));
    };
    LongTextEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    };
    LongTextEditor.prototype.serializeValue = function () {
        return this._$textarea.val();
    };
    LongTextEditor.prototype.validate = function (inputValue) {
        var elmValue = (inputValue !== undefined) ? inputValue : this._$textarea && this._$textarea.val && this._$textarea.val();
        return textValidator(elmValue, {
            editorArgs: this.args,
            errorMessage: this.columnEditor.errorMessage,
            minLength: this.columnEditor.minLength,
            maxLength: this.columnEditor.maxLength,
            operatorConditionalType: this.columnEditor.operatorConditionalType,
            required: this.columnEditor.required,
            validator: this.validator,
        });
    };
    // --
    // private functions
    // ------------------
    LongTextEditor.prototype.handleKeyDown = function (event) {
        var keyCode = event.keyCode || event.code;
        if (keyCode === KeyCode.ENTER && event.ctrlKey) {
            this.save();
        }
        else if (keyCode === KeyCode.ESCAPE) {
            event.preventDefault();
            this.cancel();
        }
        else if (keyCode === KeyCode.TAB && event.shiftKey) {
            event.preventDefault();
            if (this.args && this.grid) {
                this.grid.navigatePrev();
            }
        }
        else if (keyCode === KeyCode.TAB) {
            event.preventDefault();
            if (this.args && this.grid) {
                this.grid.navigateNext();
            }
        }
    };
    /** On every input change event, we'll update the current text length counter */
    LongTextEditor.prototype.handleOnInputChange = function (event) {
        var textLength = event.target.value.length;
        this._$currentLengthElm.text(textLength);
    };
    return LongTextEditor;
}());
export { LongTextEditor };
//# sourceMappingURL=data:application/json;base64,