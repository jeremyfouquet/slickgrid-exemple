import * as tslib_1 from "tslib";
import { KeyCode, } from '../models/index';
import { BindingEventService } from '../services/bindingEvent.service';
import { getDescendantProperty, setDeepValue } from '../services/utilities';
import { floatValidator, integerValidator, textValidator } from '../editorValidators';
/*
 * An example of a 'detached' editor.
 * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
 */
var DualInputEditor = /** @class */ (function () {
    function DualInputEditor(args) {
        var _this = this;
        this.args = args;
        this._isValueSaveCalled = false;
        if (!args) {
            throw new Error('[Angular-Slickgrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (this.grid.getOptions() || {});
        this._eventHandler = new Slick.EventHandler();
        this._bindEventService = new BindingEventService();
        this.init();
        this._eventHandler.subscribe(this.grid.onValidationError, function () { return _this._isValueSaveCalled = true; });
    }
    Object.defineProperty(DualInputEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return { leftInput: this._leftInput, rightInput: this._rightInput };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "editorParams", {
        get: function () {
            return this.columnEditor.params || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "isValueSaveCalled", {
        get: function () {
            return this._isValueSaveCalled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualInputEditor.prototype, "validator", {
        /** Get the Shared Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return (this.columnEditor && this.columnEditor.validator) || (this.columnDef && this.columnDef.validator);
        },
        enumerable: true,
        configurable: true
    });
    DualInputEditor.prototype.init = function () {
        var _this = this;
        if (!this.editorParams || !this.editorParams.leftInput || !this.editorParams.leftInput.field || !this.editorParams.rightInput || !this.editorParams.rightInput.field) {
            throw new Error("[Angular-Slickgrid] Please make sure that your Combo Input Editor has params defined with \"leftInput\" and \"rightInput\" (example: { editor: { model: Editors.comboInput, params: { leftInput: { field: 'firstName' }, { rightSide: { field: 'lastName' } }}}");
        }
        this._leftFieldName = this.editorParams && this.editorParams.leftInput && this.editorParams.leftInput.field;
        this._rightFieldName = this.editorParams && this.editorParams.rightInput && this.editorParams.rightInput.field;
        this._leftInput = this.createInput('leftInput');
        this._rightInput = this.createInput('rightInput');
        var containerElm = this.args.container;
        if (containerElm && typeof containerElm.appendChild === 'function') {
            containerElm.appendChild(this._leftInput);
            containerElm.appendChild(this._rightInput);
        }
        this._leftInput.onkeydown = this.handleKeyDown.bind(this);
        this._rightInput.onkeydown = this.handleKeyDown.bind(this);
        // the lib does not get the focus out event for some reason, so register it here
        if (this.hasAutoCommitEdit) {
            this._bindEventService.bind(this._leftInput, 'focusout', function (event) { return _this.handleFocusOut(event, 'leftInput'); });
            this._bindEventService.bind(this._rightInput, 'focusout', function (event) { return _this.handleFocusOut(event, 'rightInput'); });
        }
        setTimeout(function () { return _this._leftInput.select(); }, 50);
    };
    DualInputEditor.prototype.handleFocusOut = function (event, position) {
        // when clicking outside the editable cell OR when focusing out of it
        var targetClassNames = event.relatedTarget && event.relatedTarget.className || '';
        if (targetClassNames.indexOf('dual-editor') === -1 && this._lastEventType !== 'focusout-right') {
            if (position === 'rightInput' || (position === 'leftInput' && this._lastEventType !== 'focusout-left')) {
                this.save();
            }
        }
        var side = (position === 'leftInput') ? 'left' : 'right';
        this._lastEventType = (event && event.type) + "-" + side;
    };
    DualInputEditor.prototype.handleKeyDown = function (event) {
        this._lastInputKeyEvent = event;
        if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT || event.keyCode === KeyCode.TAB) {
            event.stopImmediatePropagation();
        }
    };
    DualInputEditor.prototype.destroy = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        this._bindEventService.unbindAll();
    };
    DualInputEditor.prototype.createInput = function (position) {
        var editorSideParams = this.editorParams[position];
        var columnId = this.columnDef && this.columnDef.id;
        var idPropName = this.gridOptions.datasetIdPropertyName || 'id';
        var itemId = this.args && this.args.item && this.args.item[idPropName] || 0;
        var fieldType = editorSideParams.type || 'text';
        if (fieldType === 'float' || fieldType === 'integer') {
            fieldType = 'number';
        }
        var input = document.createElement('input');
        input.id = "item-" + itemId + "-" + position;
        input.className = "dual-editor-text editor-" + columnId + " " + position.replace(/input/gi, '');
        if (fieldType === 'readonly') {
            // when the custom type is defined as readonly, we'll make a readonly text input
            input.readOnly = true;
            fieldType = 'text';
        }
        input.type = fieldType || 'text';
        input.setAttribute('role', 'presentation');
        input.autocomplete = 'off';
        input.placeholder = editorSideParams.placeholder || '';
        input.title = editorSideParams.title || '';
        if (fieldType === 'number') {
            input.step = this.getInputDecimalSteps(position);
        }
        return input;
    };
    DualInputEditor.prototype.focus = function () {
        // do nothing since we have 2 inputs and we might focus on left/right depending on which is invalid and/or new
    };
    DualInputEditor.prototype.getValues = function () {
        var obj = {};
        var leftInputValue = this._leftInput.value;
        var rightInputValue = this._rightInput.value;
        var isLeftInputTypeNumber = (this.editorParams.leftInput && (this.editorParams.leftInput.type === 'float' || this.editorParams.leftInput.type === 'integer'));
        var isRightInputTypeNumber = (this.editorParams.rightInput && (this.editorParams.rightInput.type === 'float' || this.editorParams.rightInput.type === 'integer'));
        var resultLeftValue = (leftInputValue !== '' && isLeftInputTypeNumber) ? +this._leftInput.value : (leftInputValue || '');
        var resultRightValue = (rightInputValue !== '' && isRightInputTypeNumber) ? +this._rightInput.value : (rightInputValue || '');
        setDeepValue(obj, this._leftFieldName, resultLeftValue);
        setDeepValue(obj, this._rightFieldName, resultRightValue);
        return obj;
    };
    DualInputEditor.prototype.setValues = function (values) {
        if (Array.isArray(values) && values.length === 2) {
            this._leftInput.value = "" + values[0];
            this._rightInput.value = "" + values[1];
        }
    };
    DualInputEditor.prototype.applyValue = function (item, state) {
        this.applyValueByPosition(item, state, 'leftInput');
        this.applyValueByPosition(item, state, 'rightInput');
    };
    DualInputEditor.prototype.applyValueByPosition = function (item, state, position) {
        var fieldName = position === 'leftInput' ? this._leftFieldName : this._rightFieldName;
        if (fieldName !== undefined) {
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
            var fieldNameToUse = fieldName;
            if (isComplexObject) {
                var complexFieldNames = fieldName.split(/\.(.*)/);
                fieldNameToUse = (complexFieldNames.length > 1 ? complexFieldNames[1] : complexFieldNames);
            }
            // validate the value before applying it (if not valid we'll set an empty string)
            var stateValue = isComplexObject ? getDescendantProperty(state, fieldNameToUse) : state[fieldName];
            var validation = this.validate({ position: position, inputValue: stateValue });
            // set the new value to the item datacontext
            if (isComplexObject) {
                var newValueFromComplex = getDescendantProperty(state, fieldNameToUse);
                var newValue = (validation && validation.valid) ? newValueFromComplex : '';
                setDeepValue(item, fieldName, newValue);
            }
            else if (fieldName) {
                item[fieldName] = (validation && validation.valid) ? state[fieldName] : '';
            }
        }
    };
    DualInputEditor.prototype.isValueChanged = function () {
        var leftElmValue = this._leftInput.value;
        var rightElmValue = this._rightInput.value;
        var leftEditorParams = this.editorParams && this.editorParams.leftInput;
        var rightEditorParams = this.editorParams && this.editorParams.rightInput;
        var lastKeyEvent = this._lastInputKeyEvent && this._lastInputKeyEvent.keyCode;
        if ((leftEditorParams && leftEditorParams.alwaysSaveOnEnterKey || rightEditorParams && rightEditorParams.alwaysSaveOnEnterKey) && lastKeyEvent === KeyCode.ENTER) {
            return true;
        }
        var leftResult = (!(leftElmValue === '' && (this.originalLeftValue === null || this.originalLeftValue === undefined))) && (leftElmValue !== this.originalLeftValue);
        var rightResult = (!(rightElmValue === '' && (this.originalRightValue === null || this.originalRightValue === undefined))) && (rightElmValue !== this.originalRightValue);
        return leftResult || rightResult;
    };
    DualInputEditor.prototype.loadValue = function (item) {
        this.loadValueByPosition(item, 'leftInput');
        this.loadValueByPosition(item, 'rightInput');
        this._leftInput.select();
    };
    DualInputEditor.prototype.loadValueByPosition = function (item, position) {
        // is the field a complex object, "address.streetNumber"
        var fieldName = (position === 'leftInput') ? this._leftFieldName : this._rightFieldName;
        var originalValuePosition = (position === 'leftInput') ? 'originalLeftValue' : 'originalRightValue';
        var inputVarPosition = (position === 'leftInput') ? '_leftInput' : '_rightInput';
        if (item && fieldName !== undefined) {
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            var itemValue = (isComplexObject) ? getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : '');
            this[originalValuePosition] = itemValue;
            if (this.editorParams[position].type === 'float') {
                var decimalPlaces = this.getDecimalPlaces(position);
                if (decimalPlaces !== null && (this[originalValuePosition] || this[originalValuePosition] === 0) && (+this[originalValuePosition]).toFixed) {
                    this[originalValuePosition] = (+this[originalValuePosition]).toFixed(decimalPlaces);
                }
            }
            if (this[inputVarPosition]) {
                var originalValue = this[originalValuePosition];
                this[inputVarPosition].value = "" + originalValue;
            }
        }
    };
    DualInputEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (!this._isValueSaveCalled) {
            if (this.hasAutoCommitEdit && isValid) {
                this.grid.getEditorLock().commitCurrentEdit();
            }
            else {
                this.args.commitChanges();
            }
            this._isValueSaveCalled = true;
        }
    };
    DualInputEditor.prototype.serializeValue = function () {
        var obj = {};
        var leftValue = this.serializeValueByPosition('leftInput');
        var rightValue = this.serializeValueByPosition('rightInput');
        setDeepValue(obj, this._leftFieldName, leftValue);
        setDeepValue(obj, this._rightFieldName, rightValue);
        return obj;
    };
    DualInputEditor.prototype.serializeValueByPosition = function (position) {
        var elmValue = position === 'leftInput' ? this._leftInput.value : this._rightInput.value;
        if (elmValue === '' || isNaN(+elmValue)) {
            return elmValue;
        }
        var rtn = parseFloat(elmValue);
        var decPlaces = this.getDecimalPlaces(position);
        if (decPlaces !== null && (rtn || rtn === 0) && rtn.toFixed) {
            rtn = parseFloat(rtn.toFixed(decPlaces));
        }
        return rtn;
    };
    DualInputEditor.prototype.getDecimalPlaces = function (position) {
        var defaultDecimalPlaces = 0; // TODO move into a constant
        // returns the number of fixed decimal places or null
        var positionSide = position === 'leftInput' ? 'leftInput' : 'rightInput';
        var sideParams = this.editorParams[positionSide];
        var rtn = sideParams && sideParams.decimal;
        if (rtn === undefined) {
            return defaultDecimalPlaces;
        }
        return rtn;
    };
    DualInputEditor.prototype.getInputDecimalSteps = function (position) {
        var decimals = this.getDecimalPlaces(position);
        var zeroString = '';
        for (var i = 1; i < decimals; i++) {
            zeroString += '0';
        }
        if (decimals > 0) {
            return "0." + zeroString + "1";
        }
        return '1';
    };
    DualInputEditor.prototype.validate = function (inputValidation) {
        if (inputValidation) {
            var posValidation = this.validateByPosition(inputValidation.position, inputValidation.inputValue);
            if (!posValidation.valid) {
                inputValidation.position === 'leftInput' ? this._leftInput.select() : this._rightInput.select();
                return posValidation;
            }
        }
        else {
            var leftValidation = this.validateByPosition('leftInput');
            var rightValidation = this.validateByPosition('rightInput');
            if (!leftValidation.valid) {
                this._leftInput.select();
                return leftValidation;
            }
            if (!rightValidation.valid) {
                this._rightInput.select();
                return rightValidation;
            }
        }
        return { valid: true, msg: '' };
    };
    DualInputEditor.prototype.validateByPosition = function (position, inputValue) {
        var positionEditorParams = this.editorParams[position];
        var currentVal = '';
        if (inputValue) {
            currentVal = inputValue;
        }
        else {
            var input = position === 'leftInput' ? this._leftInput : this._rightInput;
            currentVal = input && input.value;
        }
        // there are 2 ways of passing a Validator, 1-independent validator on each side, 2-shared validator
        var commonValidator = this.validator;
        currentVal = typeof commonValidator === 'function' ? this.getValues() : currentVal;
        var baseValidatorOptions = {
            editorArgs: this.args,
            errorMessage: positionEditorParams.errorMessage,
            required: positionEditorParams.required,
            validator: typeof commonValidator === 'function' ? commonValidator : positionEditorParams.validator,
        };
        switch (positionEditorParams.type) {
            case 'float':
                return floatValidator(currentVal, tslib_1.__assign({}, baseValidatorOptions, { decimal: this.getDecimalPlaces(position), minValue: positionEditorParams.minValue, maxValue: positionEditorParams.maxValue, operatorConditionalType: positionEditorParams.operatorConditionalType }));
            case 'integer':
                return integerValidator(currentVal, tslib_1.__assign({}, baseValidatorOptions, { minValue: positionEditorParams.minValue, maxValue: positionEditorParams.maxValue, operatorConditionalType: positionEditorParams.operatorConditionalType }));
            case 'text':
            case 'password':
            default:
                return textValidator(currentVal, baseValidatorOptions);
        }
    };
    return DualInputEditor;
}());
export { DualInputEditor };
//# sourceMappingURL=data:application/json;base64,