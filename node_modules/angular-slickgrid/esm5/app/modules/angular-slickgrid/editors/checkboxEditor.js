import { Constants } from './../constants';
import { getDescendantProperty, setDeepValue } from '../services/utilities';
/*
 * An example of a 'detached' editor.
 * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
 */
var CheckboxEditor = /** @class */ (function () {
    function CheckboxEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.init();
    }
    Object.defineProperty(CheckboxEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$input;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.args.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    CheckboxEditor.prototype.init = function () {
        var _this = this;
        var fieldId = this.columnDef && this.columnDef.id;
        var title = this.columnEditor && this.columnEditor.title || '';
        this._$input = $("<input type=\"checkbox\" value=\"true\" class=\"editor-checkbox editor-" + fieldId + "\" title=\"" + title + "\" />");
        this._$input.appendTo(this.args.container);
        this.focus();
        // make the checkbox editor act like a regular checkbox that commit the value on click
        if (this.hasAutoCommitEdit) {
            this._$input.click(function () { return _this.save(); });
        }
    };
    CheckboxEditor.prototype.destroy = function () {
        this._$input.remove();
        this._$input = null;
    };
    CheckboxEditor.prototype.focus = function () {
        this._$input.focus();
    };
    CheckboxEditor.prototype.getValue = function () {
        return this._$input.prop('checked');
    };
    CheckboxEditor.prototype.setValue = function (val) {
        var isChecked = val ? true : false;
        this._$input.prop('checked', isChecked);
    };
    CheckboxEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        var isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
        // validate the value before applying it (if not valid we'll set an empty string)
        var validation = this.validate(state);
        var newValue = (validation && validation.valid) ? state : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    CheckboxEditor.prototype.isValueChanged = function () {
        return (this.serializeValue() !== this.originalValue);
    };
    CheckboxEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            var value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this.originalValue = value;
            if (this.originalValue) {
                this._$input.prop('checked', true);
            }
            else {
                this._$input.prop('checked', false);
            }
        }
    };
    CheckboxEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    };
    CheckboxEditor.prototype.serializeValue = function () {
        return this._$input.prop('checked');
    };
    CheckboxEditor.prototype.validate = function (inputValue) {
        var isRequired = this.columnEditor.required;
        var isChecked = (inputValue !== undefined) ? inputValue : this._$input && this._$input.prop && this._$input.prop('checked');
        var errorMsg = this.columnEditor.errorMessage;
        if (this.validator) {
            return this.validator(isChecked, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && !isChecked) {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    };
    return CheckboxEditor;
}());
export { CheckboxEditor };
//# sourceMappingURL=data:application/json;base64,