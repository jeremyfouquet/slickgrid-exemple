import * as tslib_1 from "tslib";
import { TranslateService } from '@ngx-translate/core';
import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
import { Constants } from '../constants';
import { FieldType, } from './../models/index';
import { CollectionService } from '../services/index';
import { charArraysEqual, findOrDefault, getDescendantProperty, getTranslationPrefix, htmlEncode, setDeepValue } from '../services/utilities';
/**
 * Slickgrid editor class for multiple/single select lists
 */
var SelectEditor = /** @class */ (function () {
    function SelectEditor(args, isMultipleSelect) {
        var _this = this;
        this.args = args;
        this.isMultipleSelect = isMultipleSelect;
        /** Observable Subscriptions */
        this._subscriptions = [];
        // flag to signal that the editor is destroying itself, helps prevent
        // commit changes from being called twice and erroring
        this._destroying = false;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (this.grid.getOptions() || {});
        var options = this.gridOptions || this.args.column.params || {};
        if (options && options.i18n instanceof TranslateService) {
            this._translate = options.i18n;
        }
        // get locales provided by user in main file or else use default English locales via the Constants
        this._locales = this.gridOptions.locales || Constants.locales;
        // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)
        var fieldId = this.columnDef && this.columnDef.id;
        this.elementName = "editor-" + fieldId;
        var libOptions = {
            autoAdjustDropHeight: true,
            autoAdjustDropPosition: true,
            autoAdjustDropWidthByTextSize: true,
            container: 'body',
            filter: false,
            maxHeight: 275,
            name: this.elementName,
            single: true,
            textTemplate: function ($elm) {
                // render HTML code or not, by default it is sanitized and won't be rendered
                var isRenderHtmlEnabled = _this.columnDef && _this.columnDef.internalColumnEditor && _this.columnDef.internalColumnEditor.enableRenderHtml || false;
                return isRenderHtmlEnabled ? $elm.text() : $elm.html();
            },
            onClose: function () { return _this.save(); },
        };
        if (isMultipleSelect) {
            libOptions.single = false;
            libOptions.addTitle = true;
            libOptions.okButton = true;
            libOptions.selectAllDelimiter = ['', ''];
            if (this._translate && this._translate.instant && this._translate.currentLang) {
                var translationPrefix = getTranslationPrefix(this.gridOptions);
                libOptions.countSelected = this._translate.instant(translationPrefix + "X_OF_Y_SELECTED");
                libOptions.allSelected = this._translate.instant(translationPrefix + "ALL_SELECTED");
                libOptions.selectAllText = this._translate.instant(translationPrefix + "SELECT_ALL");
                libOptions.okButtonText = this._translate.instant(translationPrefix + "OK");
            }
            else {
                libOptions.countSelected = this._locales && this._locales.TEXT_X_OF_Y_SELECTED;
                libOptions.allSelected = this._locales && this._locales.TEXT_ALL_SELECTED;
                libOptions.selectAllText = this._locales && this._locales.TEXT_SELECT_ALL;
                libOptions.okButtonText = this._locales && this._locales.TEXT_OK;
            }
        }
        // assign the multiple select lib options
        this.defaultOptions = libOptions;
        this.init();
    }
    Object.defineProperty(SelectEditor.prototype, "collection", {
        /** Get the Collection */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor.collection || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "collectionOptions", {
        /** Getter for the Collection Options */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this.$editorElm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "customStructure", {
        /** Getter for the Custom Structure if exist */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.customStructure;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "currentValues", {
        /**
         * The current selected values (multiple select) from the collection
         */
        get: function () {
            var _this = this;
            var elmValue = this.$editorElm.val();
            // collection of strings, just return the filtered string that are equals
            if (this.collection.every(function (x) { return typeof x === 'string'; })) {
                return this.collection.filter(function (c) { return elmValue.indexOf(c.toString()) !== -1; });
            }
            // collection of label/value pair
            var separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';
            var isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;
            return this.collection
                .filter(function (c) { return elmValue.indexOf(c.hasOwnProperty(_this.valueName) && c[_this.valueName] !== null && c[_this.valueName].toString()) !== -1; })
                .map(function (c) {
                var labelText = c[_this.valueName];
                var prefixText = c[_this.labelPrefixName] || '';
                var suffixText = c[_this.labelSuffixName] || '';
                // when it's a complex object, then pull the object name only, e.g.: "user.firstName" => "user"
                var fieldName = _this.columnDef && _this.columnDef.field;
                // is the field a complex object, "address.streetNumber"
                var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
                if (isComplexObject && typeof c === 'object') {
                    return c;
                }
                // also translate prefix/suffix if enableTranslateLabel is true and text is a string
                prefixText = (_this.enableTranslateLabel && prefixText && typeof prefixText === 'string') ? _this._translate.instant(prefixText || ' ') : prefixText;
                suffixText = (_this.enableTranslateLabel && suffixText && typeof suffixText === 'string') ? _this._translate.instant(suffixText || ' ') : suffixText;
                if (isIncludingPrefixSuffix) {
                    var tmpOptionArray = [prefixText, labelText, suffixText].filter(function (text) { return text; }); // add to a temp array for joining purpose and filter out empty text
                    return tmpOptionArray.join(separatorBetweenLabels);
                }
                return labelText;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "currentValue", {
        /**
         * The current selected values (single select) from the collection
         */
        get: function () {
            var _this = this;
            var elmValue = this.$editorElm.val();
            // collection of strings, just return the filtered string that are equals
            if (this.collection.every(function (x) { return typeof x === 'string'; })) {
                return findOrDefault(this.collection, function (c) { return c.toString() === elmValue; });
            }
            // collection of label/value pair
            var separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';
            var isIncludingPrefixSuffix = this.collectionOptions && this.collectionOptions.includePrefixSuffixToSelectedValues || false;
            var itemFound = findOrDefault(this.collection, function (c) { return c.hasOwnProperty(_this.valueName) && c[_this.valueName] !== null && c[_this.valueName].toString() === elmValue; });
            // is the field a complex object, "address.streetNumber"
            var fieldName = this.columnDef && this.columnDef.field;
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            if (isComplexObject && typeof itemFound === 'object') {
                return itemFound;
            }
            else if (itemFound && itemFound.hasOwnProperty(this.valueName)) {
                var labelText = itemFound[this.valueName];
                if (isIncludingPrefixSuffix) {
                    var prefixText = itemFound[this.labelPrefixName] || '';
                    var suffixText = itemFound[this.labelSuffixName] || '';
                    // also translate prefix/suffix if enableTranslateLabel is true and text is a string
                    prefixText = (this.enableTranslateLabel && prefixText && typeof prefixText === 'string') ? this._translate.instant(prefixText || ' ') : prefixText;
                    suffixText = (this.enableTranslateLabel && suffixText && typeof suffixText === 'string') ? this._translate.instant(suffixText || ' ') : suffixText;
                    // add to a temp array for joining purpose and filter out empty text
                    var tmpOptionArray = [prefixText, labelText, suffixText].filter(function (text) { return text; });
                    return tmpOptionArray.join(separatorBetweenLabels);
                }
                return labelText;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    SelectEditor.prototype.init = function () {
        if (!this.columnDef || !this.columnDef.internalColumnEditor || (!this.columnDef.internalColumnEditor.collection && !this.columnDef.internalColumnEditor.collectionAsync)) {
            throw new Error("[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") inside Column Definition Editor for the MultipleSelect/SingleSelect Editor to work correctly.\n      Also each option should include a value/label pair (or value/labelKey when using Locale).\n      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }");
        }
        this._collectionService = new CollectionService(this._translate);
        this.enableTranslateLabel = (this.columnDef.internalColumnEditor.enableTranslateLabel) ? this.columnDef.internalColumnEditor.enableTranslateLabel : false;
        this.labelName = this.customStructure && this.customStructure.label || 'label';
        this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';
        this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';
        this.optionLabel = this.customStructure && this.customStructure.optionLabel || 'value';
        this.valueName = this.customStructure && this.customStructure.value || 'value';
        if (this.enableTranslateLabel && (!this._translate || typeof this._translate.instant !== 'function')) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        // always render the Select (dropdown) DOM element, even if user passed a "collectionAsync",
        // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)
        this.renderDomElement(this.collection);
    };
    SelectEditor.prototype.getValue = function () {
        return (this.isMultipleSelect) ? this.currentValues : this.currentValue;
    };
    SelectEditor.prototype.setValue = function (value) {
        if (this.isMultipleSelect && Array.isArray(value)) {
            this.loadMultipleValues(value);
        }
        else {
            this.loadSingleValue(value);
        }
    };
    SelectEditor.prototype.hide = function () {
        if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('close');
        }
    };
    SelectEditor.prototype.show = function () {
        if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('open');
        }
    };
    SelectEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        var fieldType = this.columnDef && this.columnDef.type;
        var newValue = state;
        // when the provided user defined the column field type as a possible number then try parsing the state value as that
        if (fieldType === FieldType.number || fieldType === FieldType.integer || fieldType === FieldType.boolean) {
            newValue = parseFloat(state);
        }
        // when set as a multiple selection, we can assume that the 3rd party lib multiple-select will return a CSV string
        // we need to re-split that into an array to be the same as the original column
        if (this.isMultipleSelect && typeof state === 'string' && state.indexOf(',') >= 0) {
            newValue = state.split(',');
        }
        // is the field a complex object, "user.address.streetNumber"
        var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
        // validate the value before applying it (if not valid we'll set an empty string)
        var validation = this.validate(newValue);
        newValue = (validation && validation.valid) ? newValue : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            // when it's a complex object, user could override the object path (where the editable object is located)
            // else we use the path provided in the Field Column Definition
            var objectPath = this.columnEditor && this.columnEditor.complexObjectPath || fieldName;
            setDeepValue(item, objectPath, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    SelectEditor.prototype.destroy = function () {
        this._destroying = true;
        if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('destroy');
            this.$editorElm.remove();
            var elementClassName = this.elementName.toString().replace('.', '\\.'); // make sure to escape any dot "." from CSS class to avoid console error
            $("[name=" + elementClassName + "].ms-drop").remove();
            this.$editorElm.remove();
            this.$editorElm = null;
        }
    };
    SelectEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            // when it's a complex object, user could override the object path (where the editable object is located)
            // else we use the path provided in the Field Column Definition
            var objectPath = this.columnEditor && this.columnEditor.complexObjectPath || fieldName;
            var currentValue = (isComplexObject) ? getDescendantProperty(item, objectPath) : item[fieldName];
            var value = (isComplexObject && currentValue.hasOwnProperty(this.valueName)) ? currentValue[this.valueName] : currentValue;
            if (this.isMultipleSelect && Array.isArray(value)) {
                this.loadMultipleValues(value);
            }
            else {
                this.loadSingleValue(value);
            }
            this.refresh();
        }
    };
    SelectEditor.prototype.loadMultipleValues = function (currentValues) {
        // convert to string because that is how the DOM will return these values
        if (Array.isArray(currentValues)) {
            // keep the default values in memory for references
            this.originalValue = currentValues.map(function (i) { return i; });
            // compare all the array values but as string type since multiple-select always return string
            var currentStringValues_1 = currentValues.map(function (i) { return i.toString(); });
            this.$editorElm.find('option').each(function (i, $e) {
                $e.selected = (currentStringValues_1.indexOf($e.value) !== -1);
            });
        }
    };
    SelectEditor.prototype.loadSingleValue = function (currentValue) {
        // keep the default value in memory for references
        this.originalValue = typeof currentValue === 'number' ? "" + currentValue : currentValue;
        this.$editorElm.val(currentValue);
        // make sure the prop exists first
        this.$editorElm.find('option').each(function (i, $e) {
            // check equality after converting originalValue to string since the DOM value will always be of type string
            $e.selected = ("" + currentValue === $e.value);
        });
    };
    SelectEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (!this._destroying && this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    };
    SelectEditor.prototype.serializeValue = function () {
        return (this.isMultipleSelect) ? this.currentValues : this.currentValue;
    };
    SelectEditor.prototype.focus = function () {
        if (this.$editorElm && this.$editorElm.multipleSelect) {
            this.$editorElm.multipleSelect('focus');
        }
    };
    SelectEditor.prototype.isValueChanged = function () {
        if (this.isMultipleSelect) {
            return !charArraysEqual(this.$editorElm.val(), this.originalValue);
        }
        return this.$editorElm.val() !== this.originalValue;
    };
    SelectEditor.prototype.validate = function (inputValue) {
        var isRequired = this.columnEditor.required;
        var elmValue = (inputValue !== undefined) ? inputValue : this.$editorElm && this.$editorElm.val && this.$editorElm.val();
        var errorMsg = this.columnEditor.errorMessage;
        if (this.validator) {
            var value = (inputValue !== undefined) ? inputValue : (this.isMultipleSelect ? this.currentValues : this.currentValue);
            return this.validator(value, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && (elmValue === '' || (Array.isArray(elmValue) && elmValue.length === 0))) {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    };
    //
    // protected functions
    // ------------------
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    SelectEditor.prototype.filterCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to filter certain items of the collection
        if (this.columnEditor && this.columnEditor.collectionFilterBy) {
            var filterBy = this.columnEditor.collectionFilterBy;
            var filterCollectionBy = this.columnEditor.collectionOptions && this.columnEditor.collectionOptions.filterResultAfterEachPass || null;
            outputCollection = this._collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);
        }
        return outputCollection;
    };
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection sorted collection
     */
    SelectEditor.prototype.sortCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to sort the collection
        if (this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collectionSortBy) {
            var sortBy = this.columnDef.internalColumnEditor.collectionSortBy;
            outputCollection = this._collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);
        }
        return outputCollection;
    };
    SelectEditor.prototype.renderDomElement = function (inputCollection) {
        if (!Array.isArray(inputCollection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {
            var collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;
            inputCollection = getDescendantProperty(inputCollection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(inputCollection)) {
            throw new Error('The "collection" passed to the Select Editor is not a valid array.');
        }
        // make a copy of the collection so that we don't impact SelectFilter, this could happen when calling "addBlankEntry" or "addCustomFirstEntry"
        var collection = [];
        if (inputCollection.length > 0) {
            collection = tslib_1.__spread(inputCollection);
        }
        // user can optionally add a blank entry at the beginning of the collection
        // make sure however that it wasn't added more than once
        if (this.collectionOptions && this.collectionOptions.addBlankEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== '') {
            collection.unshift(this.createBlankEntry());
        }
        // user can optionally add his own custom entry at the beginning of the collection
        if (this.collectionOptions && this.collectionOptions.addCustomFirstEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== this.collectionOptions.addCustomFirstEntry[this.valueName]) {
            collection.unshift(this.collectionOptions && this.collectionOptions.addCustomFirstEntry);
        }
        // user can optionally add his own custom entry at the end of the collection
        if (this.collectionOptions && this.collectionOptions.addCustomLastEntry && Array.isArray(collection) && collection.length > 0) {
            var lastCollectionIndex = collection.length - 1;
            if (collection[lastCollectionIndex][this.valueName] !== this.collectionOptions.addCustomLastEntry[this.valueName]) {
                collection.push(this.collectionOptions && this.collectionOptions.addCustomLastEntry);
            }
        }
        var newCollection = collection || [];
        // user might want to filter and/or sort certain items of the collection
        newCollection = this.filterCollection(newCollection);
        newCollection = this.sortCollection(newCollection);
        // step 1, create HTML string template
        var editorTemplate = this.buildTemplateHtmlString(newCollection);
        // step 2, create the DOM Element of the editor
        // also subscribe to the onClose event
        this.createDomElement(editorTemplate);
    };
    SelectEditor.prototype.buildTemplateHtmlString = function (collection) {
        var _this = this;
        var options = '';
        var fieldId = this.columnDef && this.columnDef.id;
        var separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';
        var isRenderHtmlEnabled = this.columnDef.internalColumnEditor.enableRenderHtml || false;
        var sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};
        // collection could be an Array of Strings OR Objects
        if (collection.every(function (x) { return typeof x === 'string'; })) {
            collection.forEach(function (option) {
                options += "<option value=\"" + option + "\" label=\"" + option + "\">" + option + "</option>";
            });
        }
        else {
            // array of objects will require a label/value pair unless a customStructure is passed
            collection.forEach(function (option) {
                if (!option || (option[_this.labelName] === undefined && option.labelKey === undefined)) {
                    throw new Error("[select-editor] A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example: { collection: [ { value: '1', label: 'One' } ])");
                }
                var labelKey = (option.labelKey || option[_this.labelName]);
                var labelText = ((option.labelKey || _this.enableTranslateLabel) && labelKey) ? _this._translate.instant(labelKey || ' ') : labelKey;
                var prefixText = option[_this.labelPrefixName] || '';
                var suffixText = option[_this.labelSuffixName] || '';
                var optionLabel = option[_this.optionLabel] || '';
                if (optionLabel && optionLabel.toString) {
                    optionLabel = optionLabel.toString().replace(/\"/g, '\''); // replace double quotes by single quotes to avoid interfering with regular html
                }
                // also translate prefix/suffix if enableTranslateLabel is true and text is a string
                prefixText = (_this.enableTranslateLabel && prefixText && typeof prefixText === 'string') ? _this._translate.instant(prefixText || ' ') : prefixText;
                suffixText = (_this.enableTranslateLabel && suffixText && typeof suffixText === 'string') ? _this._translate.instant(suffixText || ' ') : suffixText;
                optionLabel = (_this.enableTranslateLabel && optionLabel && typeof optionLabel === 'string') ? _this._translate.instant(optionLabel || ' ') : optionLabel;
                // add to a temp array for joining purpose and filter out empty text
                var tmpOptionArray = [prefixText, labelText, suffixText].filter(function (text) { return (text !== undefined && text !== ''); });
                var optionText = tmpOptionArray.join(separatorBetweenLabels);
                // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default
                // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that
                if (isRenderHtmlEnabled) {
                    // sanitize any unauthorized html tags like script and others
                    // for the remaining allowed tags we'll permit all attributes
                    var sanitizedText = (DOMPurify.sanitize(optionText, sanitizedOptions) || '').toString();
                    optionText = htmlEncode(sanitizedText);
                }
                // html text of each select option
                var optionValue = option[_this.valueName];
                if (optionValue === undefined || optionValue === null) {
                    optionValue = '';
                }
                options += "<option value=\"" + optionValue + "\" label=\"" + optionLabel + "\">" + optionText + "</option>";
            });
        }
        return "<select id=\"" + this.elementName + "\" class=\"ms-filter search-filter editor-" + fieldId + "\" " + (this.isMultipleSelect ? 'multiple="multiple"' : '') + ">" + options + "</select>";
    };
    /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */
    SelectEditor.prototype.createBlankEntry = function () {
        var _a;
        var blankEntry = (_a = {},
            _a[this.labelName] = '',
            _a[this.valueName] = '',
            _a);
        if (this.labelPrefixName) {
            blankEntry[this.labelPrefixName] = '';
        }
        if (this.labelSuffixName) {
            blankEntry[this.labelSuffixName] = '';
        }
        return blankEntry;
    };
    /** Build the template HTML string */
    SelectEditor.prototype.createDomElement = function (editorTemplate) {
        var _this = this;
        this.$editorElm = $(editorTemplate);
        if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {
            this.$editorElm.appendTo(this.args.container);
        }
        // add placeholder when found
        var placeholder = this.columnEditor && this.columnEditor.placeholder || '';
        this.defaultOptions.placeholder = placeholder || '';
        if (typeof this.$editorElm.multipleSelect === 'function') {
            var elementOptions = (this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.elementOptions : {};
            var editorOptions = (this.columnDef && this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.editorOptions : {};
            this.editorElmOptions = tslib_1.__assign({}, this.defaultOptions, elementOptions, editorOptions);
            this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);
            setTimeout(function () { return _this.show(); });
        }
    };
    // refresh the jquery object because the selected checkboxes were already set
    // prior to this method being called
    SelectEditor.prototype.refresh = function () {
        if (typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('refresh');
        }
    };
    return SelectEditor;
}());
export { SelectEditor };
//# sourceMappingURL=data:application/json;base64,