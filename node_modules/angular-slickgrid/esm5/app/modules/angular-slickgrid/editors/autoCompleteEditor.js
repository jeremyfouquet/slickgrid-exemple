import * as tslib_1 from "tslib";
import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
import { FieldType, KeyCode, } from './../models/index';
import { findOrDefault, getDescendantProperty, setDeepValue, toKebabCase } from '../services/utilities';
import { textValidator } from '../editorValidators/textValidator';
// minimum length of chars to type before starting to start querying
var MIN_LENGTH = 3;
/*
 * An example of a 'detached' editor.
 * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
 */
var AutoCompleteEditor = /** @class */ (function () {
    function AutoCompleteEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.init();
    }
    Object.defineProperty(AutoCompleteEditor.prototype, "autoCompleteOptions", {
        /** Getter for the Autocomplete Option */
        get: function () {
            return this._autoCompleteOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "editorCollection", {
        /** Get the Collection */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor && this.columnDef.internalColumnEditor.collection || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "elementCollection", {
        /** Get the Final Collection used in the AutoCompleted Source (this may vary from the "collection" especially when providing a customStructure) */
        get: function () {
            return this._elementCollection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "customStructure", {
        /** Getter for the Custom Structure if exist */
        get: function () {
            var customStructure = this.columnEditor && this.columnEditor.customStructure;
            var columnType = this.columnEditor && this.columnEditor.type || this.columnDef && this.columnDef.type;
            if (!customStructure && (columnType === FieldType.object && this.columnDef && this.columnDef.dataKey && this.columnDef.labelKey)) {
                customStructure = {
                    label: this.columnDef.labelKey,
                    value: this.columnDef.dataKey,
                };
            }
            return customStructure;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.gridOptions.autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "editorOptions", {
        get: function () {
            return this.columnEditor && this.columnEditor.editorOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "instance", {
        /** jQuery UI AutoComplete instance */
        get: function () {
            return this._$editorElm.autocomplete('instance');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoCompleteEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$editorElm;
        },
        enumerable: true,
        configurable: true
    });
    AutoCompleteEditor.prototype.init = function () {
        this.labelName = this.customStructure && this.customStructure.label || 'label';
        this.valueName = this.customStructure && this.customStructure.value || 'value';
        this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';
        this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';
        // always render the DOM element, even if user passed a "collectionAsync",
        var newCollection = this.columnEditor.collection || [];
        this.renderDomElement(newCollection);
    };
    AutoCompleteEditor.prototype.destroy = function () {
        if (this._$editorElm) {
            this._$editorElm.autocomplete('destroy');
            this._$editorElm.off('keydown.nav').remove();
        }
        this._$editorElm = null;
        this._elementCollection = null;
    };
    AutoCompleteEditor.prototype.focus = function () {
        if (this._$editorElm) {
            this._$editorElm.focus().select();
        }
    };
    AutoCompleteEditor.prototype.getValue = function () {
        return this._$editorElm.val();
    };
    AutoCompleteEditor.prototype.setValue = function (value) {
        this._$editorElm.val(value);
    };
    AutoCompleteEditor.prototype.applyValue = function (item, state) {
        var _this = this;
        var newValue = state;
        var fieldName = this.columnDef && this.columnDef.field;
        // if we have a collection defined, we will try to find the string within the collection and return it
        if (Array.isArray(this.editorCollection) && this.editorCollection.length > 0) {
            newValue = findOrDefault(this.editorCollection, function (collectionItem) {
                if (collectionItem && typeof state === 'object' && collectionItem.hasOwnProperty(_this.labelName)) {
                    return (collectionItem.hasOwnProperty(_this.labelName) && collectionItem[_this.labelName].toString()) === (state.hasOwnProperty(_this.labelName) && state[_this.labelName].toString());
                }
                else if (collectionItem && typeof state === 'string' && collectionItem.hasOwnProperty(_this.labelName)) {
                    return (collectionItem.hasOwnProperty(_this.labelName) && collectionItem[_this.labelName].toString()) === state;
                }
                return collectionItem && collectionItem.toString() === state;
            });
        }
        // is the field a complex object, "address.streetNumber"
        var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
        // validate the value before applying it (if not valid we'll set an empty string)
        var validation = this.validate(newValue);
        newValue = (validation && validation.valid) ? newValue : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    AutoCompleteEditor.prototype.isValueChanged = function () {
        var elmValue = this._$editorElm.val();
        var lastKeyEvent = this._lastInputEvent && this._lastInputEvent.keyCode;
        if (this.columnEditor && this.columnEditor.alwaysSaveOnEnterKey && lastKeyEvent === KeyCode.ENTER) {
            return true;
        }
        return (!(elmValue === '' && (this._defaultTextValue === null || this._defaultTextValue === undefined))) && (elmValue !== this._defaultTextValue);
    };
    AutoCompleteEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            var data = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this._currentValue = data;
            this._defaultTextValue = typeof data === 'string' ? data : (data && data.hasOwnProperty(this.labelName) && data[this.labelName] || '');
            this._$editorElm.val(this._defaultTextValue);
            this._$editorElm.select();
        }
    };
    AutoCompleteEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    };
    AutoCompleteEditor.prototype.serializeValue = function () {
        var _a;
        // if you want to add the autocomplete functionality but want the user to be able to input a new option
        if (this.editorOptions.forceUserInput) {
            var minLength = this.editorOptions && this.editorOptions.hasOwnProperty('minLength') ? this.editorOptions.minLength : MIN_LENGTH;
            this._currentValue = this._$editorElm.val().length > minLength ? this._$editorElm.val() : this._currentValue;
        }
        // if user provided a custom structure, we will serialize the value returned from the object with custom structure
        if (this.customStructure && this._currentValue && this._currentValue.hasOwnProperty(this.valueName) && (this.columnDef && this.columnDef.type !== FieldType.object && this.columnEditor && this.columnEditor.type !== FieldType.object)) {
            return this._currentValue[this.valueName];
        }
        else if (this._currentValue && this._currentValue.value !== undefined) {
            // when object has a "value" property and its column is set as an Object type, we'll return an object with optional custom structure
            if (this.columnDef && this.columnDef.type === FieldType.object || ((this.columnEditor && this.columnEditor.type) === FieldType.object)) {
                return _a = {},
                    _a[this.labelName] = this._currentValue.label,
                    _a[this.valueName] = this._currentValue.value,
                    _a;
            }
            return this._currentValue.value;
        }
        // if it falls here it might be that the user provided its own custom item with something else than the regular label/value pair
        // at this point it's only available when user provide a custom template for the autocomplete renderItem callback
        return this._currentValue;
    };
    AutoCompleteEditor.prototype.validate = function (inputValue) {
        var val = (inputValue !== undefined) ? inputValue : this._$editorElm && this._$editorElm.val && this._$editorElm.val();
        return textValidator(val, {
            editorArgs: this.args,
            errorMessage: this.columnEditor.errorMessage,
            minLength: this.columnEditor.minLength,
            maxLength: this.columnEditor.maxLength,
            operatorConditionalType: this.columnEditor.operatorConditionalType,
            required: this.columnEditor.required,
            validator: this.validator,
        });
    };
    //
    // private functions
    // ------------------
    // this function should be PRIVATE but for unit tests purposes we'll make it public until a better solution is found
    // a better solution would be to get the autocomplete DOM element to work with selection but I couldn't find how to do that in Jest
    AutoCompleteEditor.prototype.onSelect = function (_event, ui) {
        if (ui && ui.item) {
            var item = ui && ui.item;
            this._currentValue = item;
            // when the user defines a "renderItem" (or "_renderItem") template, then we assume the user defines his own custom structure of label/value pair
            // otherwise we know that jQueryUI always require a label/value pair, we can pull them directly
            var hasCustomRenderItemCallback = this.columnEditor && this.columnEditor.callbacks && this.columnEditor.callbacks.hasOwnProperty('_renderItem') || (this.columnEditor && this.columnEditor.editorOptions && this.columnEditor.editorOptions.renderItem) || false;
            var itemLabel = typeof item === 'string' ? item : (hasCustomRenderItemCallback ? item[this.labelName] : item.label);
            this.setValue(itemLabel);
            this.save();
        }
        return false;
    };
    AutoCompleteEditor.prototype.renderCustomItem = function (ul, item) {
        var templateString = this._autoCompleteOptions && this._autoCompleteOptions.renderItem && this._autoCompleteOptions.renderItem.templateCallback(item) || '';
        // sanitize any unauthorized html tags like script and others
        // for the remaining allowed tags we'll permit all attributes
        var sanitizedTemplateText = (DOMPurify.sanitize(templateString, {}) || '').toString();
        return $('<li></li>')
            .data('item.autocomplete', item)
            .append(sanitizedTemplateText)
            .appendTo(ul);
    };
    AutoCompleteEditor.prototype.renderCollectionItem = function (ul, item) {
        var isRenderHtmlEnabled = this.columnEditor && this.columnEditor.enableRenderHtml || false;
        var prefixText = item.labelPrefix || '';
        var labelText = item.label || '';
        var suffixText = item.labelSuffix || '';
        var finalText = prefixText + labelText + suffixText;
        // sanitize any unauthorized html tags like script and others
        // for the remaining allowed tags we'll permit all attributes
        var sanitizedText = (DOMPurify.sanitize(finalText, {}) || '').toString();
        var $liDiv = $('<div></div>')[isRenderHtmlEnabled ? 'html' : 'text'](sanitizedText);
        return $('<li></li>')
            .data('item.autocomplete', item)
            .append($liDiv)
            .appendTo(ul);
    };
    AutoCompleteEditor.prototype.renderDomElement = function (collection) {
        var e_1, _a;
        var _this = this;
        if (!Array.isArray(collection)) {
            throw new Error('The "collection" passed to the Autocomplete Editor is not a valid array.');
        }
        var columnId = this.columnDef && this.columnDef.id || '';
        var placeholder = this.columnEditor && this.columnEditor.placeholder || '';
        var title = this.columnEditor && this.columnEditor.title || '';
        this._$editorElm = $("<input type=\"text\" role=\"presentation\" autocomplete=\"off\" class=\"autocomplete editor-text editor-" + columnId + "\" placeholder=\"" + placeholder + "\" title=\"" + title + "\" />")
            .appendTo(this.args.container)
            .on('keydown.nav', function (event) {
            _this._lastInputEvent = event;
            if (event.keyCode === KeyCode.LEFT || event.keyCode === KeyCode.RIGHT) {
                event.stopImmediatePropagation();
            }
        });
        // add a <span> in order to add spinner styling
        $("<span></span>").appendTo(this.args.container);
        // user might pass his own autocomplete options
        var autoCompleteOptions = this.columnEditor.editorOptions;
        // assign the collection to a temp variable before filtering/sorting the collection
        var finalCollection = collection;
        // user might provide his own custom structure
        // jQuery UI autocomplete requires a label/value pair, so we must remap them when user provide different ones
        if (Array.isArray(finalCollection)) {
            finalCollection = finalCollection.map(function (item) {
                return { label: item[_this.labelName], value: item[_this.valueName], labelPrefix: item[_this.labelPrefixName] || '', labelSuffix: item[_this.labelSuffixName] || '' };
            });
        }
        // keep the final source collection used in the AutoComplete as reference
        this._elementCollection = finalCollection;
        // when user passes it's own autocomplete options
        // we still need to provide our own "select" callback implementation
        if (autoCompleteOptions && autoCompleteOptions.source) {
            autoCompleteOptions.select = function (event, ui) { return _this.onSelect(event, ui); };
            this._autoCompleteOptions = tslib_1.__assign({}, autoCompleteOptions);
            // when "renderItem" is defined, we need to add our custom style CSS class
            if (this._autoCompleteOptions.renderItem) {
                this._autoCompleteOptions.classes = {
                    'ui-autocomplete': "autocomplete-custom-" + toKebabCase(this._autoCompleteOptions.renderItem.layout)
                };
            }
            // create the jQueryUI AutoComplete
            this._$editorElm.autocomplete(this._autoCompleteOptions);
            // when "renderItem" is defined, we need to call the user's custom renderItem template callback
            if (this._autoCompleteOptions.renderItem) {
                this._$editorElm.autocomplete('instance')._renderItem = this.renderCustomItem.bind(this);
            }
        }
        else {
            var definedOptions = {
                source: finalCollection,
                minLength: 0,
                select: function (event, ui) { return _this.onSelect(event, ui); },
            };
            this._autoCompleteOptions = tslib_1.__assign({}, definedOptions, this.columnEditor.editorOptions);
            this._$editorElm.autocomplete(this._autoCompleteOptions);
            // we'll use our own renderer so that it works with label prefix/suffix and also with html rendering when enabled
            this._$editorElm.autocomplete('instance')._renderItem = this.renderCollectionItem.bind(this);
        }
        // in case the user wants to save even an empty value,
        // we need to subscribe to the onKeyDown event for that use case and clear the current value
        if (this.columnEditor.alwaysSaveOnEnterKey) {
            this._$editorElm.keydown(function (event) {
                if (event.keyCode === KeyCode.ENTER) {
                    _this._currentValue = null;
                }
            });
        }
        // we could optionally trigger a search when clicking on the AutoComplete
        if (this.editorOptions.openSearchListOnFocus) {
            this._$editorElm.click(function () { return _this._$editorElm.autocomplete('search', _this._$editorElm.val()); });
        }
        // user might override any of the jQueryUI callback methods
        if (this.columnEditor.callbacks) {
            try {
                for (var _b = tslib_1.__values(Object.keys(this.columnEditor.callbacks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var callback = _c.value;
                    if (typeof this.columnEditor.callbacks[callback] === 'function') {
                        this.instance[callback] = this.columnEditor.callbacks[callback];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this._$editorElm.on('focus', function () {
            _this._$editorElm.select();
            // we could optionally trigger a search to open the AutoComplete search list
            if (_this.editorOptions.openSearchListOnFocus) {
                _this._$editorElm.autocomplete('search', _this._$editorElm.val());
            }
        });
        setTimeout(function () { return _this.focus(); }, 50);
    };
    return AutoCompleteEditor;
}());
export { AutoCompleteEditor };
//# sourceMappingURL=data:application/json;base64,