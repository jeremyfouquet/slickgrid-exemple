import * as tslib_1 from "tslib";
import { TranslateService } from '@ngx-translate/core';
import * as moment_ from 'moment-mini';
import * as _flatpickr from 'flatpickr';
var flatpickr = _flatpickr; // patch for rollup
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
import { Constants } from './../constants';
import { destroyObjectDomElementProps, getDescendantProperty, mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType, setDeepValue } from './../services/utilities';
import { FieldType, } from './../models/index';
require('flatpickr');
/*
 * An example of a date picker editor using Flatpickr
 * https://chmln.github.io/flatpickr
 */
var DateEditor = /** @class */ (function () {
    function DateEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (args.grid && args.grid.getOptions() || {});
        var options = this.gridOptions || this.args.column.params || {};
        if (options && options.i18n instanceof TranslateService) {
            this._translate = options.i18n;
        }
        this.init();
    }
    Object.defineProperty(DateEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$input;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "editorOptions", {
        /** Get Flatpickr options passed to the editor by the user */
        get: function () {
            return this.columnEditor.editorOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "pickerOptions", {
        get: function () {
            return this._pickerMergedOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    DateEditor.prototype.init = function () {
        var _this = this;
        if (this.args && this.columnDef) {
            var columnId = this.columnDef && this.columnDef.id;
            var placeholder = this.columnEditor && this.columnEditor.placeholder || '';
            var title = this.columnEditor && this.columnEditor.title || '';
            this.defaultDate = (this.args.item) ? this.args.item[this.columnDef.field] : null;
            var inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);
            var outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);
            var currentLocale = this._translate && this._translate.currentLang || this.gridOptions.locale || 'en';
            if (currentLocale && currentLocale.length > 2) {
                currentLocale = currentLocale.substring(0, 2);
            }
            var pickerOptions = {
                defaultDate: this.defaultDate,
                altInput: true,
                altFormat: outputFormat,
                dateFormat: inputFormat,
                closeOnSelect: true,
                wrap: true,
                locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',
                onChange: function () { return _this.save(); },
                errorHandler: function () {
                    // do nothing, Flatpickr is a little too sensitive and will throw an error when provided date is lower than minDate so just disregard the error completely
                }
            };
            // merge options with optional user's custom options
            this._pickerMergedOptions = tslib_1.__assign({}, pickerOptions, this.editorOptions);
            var inputCssClasses = ".editor-text.editor-" + columnId + ".form-control";
            if (this._pickerMergedOptions.altInput) {
                this._pickerMergedOptions.altInputClass = 'flatpickr-alt-input form-control';
            }
            this._$editorInputElm = $("<div class=\"flatpickr input-group\"></div>");
            var closeButtonElm = $("<span class=\"input-group-btn\" data-clear>\n          <button class=\"btn btn-default icon-close\" type=\"button\"></button>\n        </span>");
            this._$input = $("<input type=\"text\" data-input data-defaultDate=\"" + this.defaultDate + "\" class=\"" + inputCssClasses.replace(/\./g, ' ') + "\" placeholder=\"" + placeholder + "\" title=\"" + title + "\" />");
            this._$input.appendTo(this._$editorInputElm);
            // show clear date button (unless user specifically doesn't want it)
            var isCloseButtonHidden = this.columnEditor && this.columnEditor.params && this.columnEditor.params.hideClearButton || false;
            if (!isCloseButtonHidden) {
                closeButtonElm.appendTo(this._$editorInputElm);
            }
            this._$editorInputElm.appendTo(this.args.container);
            this.flatInstance = (flatpickr && this._$editorInputElm[0] && typeof this._$editorInputElm[0].flatpickr === 'function') ? this._$editorInputElm[0].flatpickr(this._pickerMergedOptions) : flatpickr(this._$editorInputElm, this._pickerMergedOptions);
            // when we're using an alternate input to display data, we'll consider this input as the one to do the focus later on
            // else just use the top one
            this._$inputWithData = (this._pickerMergedOptions && this._pickerMergedOptions.altInput) ? $(inputCssClasses + ".flatpickr-alt-input") : this._$input;
            setTimeout(function () {
                _this.show();
                _this.focus();
            }, 50);
        }
    };
    DateEditor.prototype.destroy = function () {
        var _this = this;
        this.hide();
        if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {
            this.flatInstance.destroy();
            if (this.flatInstance.element) {
                setTimeout(function () { return destroyObjectDomElementProps(_this.flatInstance); });
            }
            this.flatInstance = null;
        }
        if (this._$editorInputElm) {
            this._$editorInputElm.remove();
            this._$editorInputElm = null;
        }
        if (this._$inputWithData) {
            this._$inputWithData.remove();
            this._$inputWithData = null;
        }
        this._$input.remove();
    };
    DateEditor.prototype.focus = function () {
        this._$input.focus();
        if (this._$inputWithData && typeof this._$inputWithData.focus === 'function') {
            this._$inputWithData.focus().select();
        }
    };
    DateEditor.prototype.hide = function () {
        if (this.flatInstance && typeof this.flatInstance.close === 'function') {
            this.flatInstance.close();
        }
    };
    DateEditor.prototype.show = function () {
        if (this.flatInstance && typeof this.flatInstance.open === 'function' && this.flatInstance._input) {
            this.flatInstance.open();
        }
    };
    DateEditor.prototype.getValue = function () {
        return this._$input.val();
    };
    DateEditor.prototype.setValue = function (val) {
        this.flatInstance.setDate(val);
    };
    DateEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (fieldName !== undefined) {
            var outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
            var saveTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.saveOutputType || this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
            // validate the value before applying it (if not valid we'll set an empty string)
            var validation = this.validate(state);
            var newValue = (state && validation && validation.valid) ? moment(state, outputTypeFormat).format(saveTypeFormat) : '';
            // set the new value to the item datacontext
            if (isComplexObject) {
                setDeepValue(item, fieldName, newValue);
            }
            else {
                item[fieldName] = newValue;
            }
        }
    };
    DateEditor.prototype.isValueChanged = function () {
        var elmValue = this._$input.val();
        var inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);
        var outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
        var elmDateStr = elmValue ? moment(elmValue, inputFormat, false).format(outputTypeFormat) : '';
        var orgDateStr = this._originalDate ? moment(this._originalDate, inputFormat, false).format(outputTypeFormat) : '';
        if (elmDateStr === 'Invalid date' || orgDateStr === 'Invalid date') {
            return false;
        }
        var isChanged = (!(elmDateStr === '' && orgDateStr === '')) && (elmDateStr !== orgDateStr);
        return isChanged;
    };
    DateEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            var isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            var value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this._originalDate = value;
            this.flatInstance.setDate(value);
        }
    };
    DateEditor.prototype.save = function () {
        var validation = this.validate();
        var isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    };
    DateEditor.prototype.serializeValue = function () {
        var domValue = this._$input.val();
        if (!domValue) {
            return '';
        }
        var inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);
        var outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateIso);
        var value = moment(domValue, inputFormat, false).format(outputTypeFormat);
        return value;
    };
    DateEditor.prototype.validate = function (inputValue) {
        var isRequired = this.columnEditor.required;
        var elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val && this._$input.val();
        var errorMsg = this.columnEditor.errorMessage;
        if (this.validator) {
            return this.validator(elmValue, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && elmValue === '') {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    };
    //
    // private functions
    // ------------------
    /** Load a different set of locales for Flatpickr to be localized */
    DateEditor.prototype.loadFlatpickrLocale = function (language) {
        var locales = 'en';
        if (language !== 'en') {
            // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/
            var localeDefault = require("flatpickr/dist/l10n/" + language + ".js").default;
            locales = (localeDefault && localeDefault[language]) ? localeDefault[language] : 'en';
        }
        return locales;
    };
    return DateEditor;
}());
export { DateEditor };
//# sourceMappingURL=data:application/json;base64,