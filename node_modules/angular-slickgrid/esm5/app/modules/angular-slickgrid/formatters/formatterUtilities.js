import { FieldType } from '../models/index';
import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import * as moment_ from 'moment-mini';
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
/**
 * Find the option value from the following (in order of execution)
 * 1- Column Definition "params"
 * 2- Grid Options "formatterOptions"
 * 3- nothing found, return default value provided
 */
export function getValueFromParamsOrFormatterOptions(optionName, columnDef, grid, defaultValue) {
    var gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
    var params = columnDef && columnDef.params;
    if (params && params.hasOwnProperty(optionName)) {
        return params[optionName];
    }
    else if (gridOptions.formatterOptions && gridOptions.formatterOptions.hasOwnProperty(optionName)) {
        return gridOptions.formatterOptions[optionName];
    }
    return defaultValue;
}
/** From a FieldType, return the associated date Formatter */
export function getAssociatedDateFormatter(fieldType, defaultSeparator) {
    var defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);
    return function (_row, _cell, value, columnDef, _dataContext, grid) {
        var gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
        var customSeparator = gridOptions && gridOptions.formatterOptions && gridOptions.formatterOptions.dateSeparator || defaultSeparator;
        var inputType = columnDef && columnDef.type || FieldType.date;
        var inputDateFormat = mapMomentDateFormatWithFieldType(inputType);
        var isParsingAsUtc = columnDef && columnDef.params && columnDef.params.parseDateAsUtc || false;
        var isDateValid = moment(value, inputDateFormat, false).isValid();
        var outputDate = value;
        if (value && isDateValid) {
            outputDate = isParsingAsUtc ? moment.utc(value).format(defaultDateFormat) : moment(value).format(defaultDateFormat);
        }
        // user can customize the separator through the "formatterOptions"
        // if that is the case we need to replace the default "/" to the new separator
        if (outputDate && customSeparator !== defaultSeparator) {
            var regex = new RegExp(defaultSeparator, 'ig'); // find separator globally
            outputDate = outputDate.replace(regex, customSeparator);
        }
        return outputDate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2Zvcm1hdHRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUF5QixNQUFNLGlCQUFpQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLHNIQUFzSDtBQUU5STs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxvQ0FBb0MsQ0FBQyxVQUFrQixFQUFFLFNBQWlCLEVBQUUsSUFBUyxFQUFFLFlBQWtCO0lBQ3ZILElBQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBZSxDQUFDO0lBQzdHLElBQU0sTUFBTSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDO0lBRTdDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDL0MsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0I7U0FBTSxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ2xHLE9BQU8sV0FBVyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUVELDZEQUE2RDtBQUM3RCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsU0FBb0IsRUFBRSxnQkFBd0I7SUFDdkYsSUFBTSxpQkFBaUIsR0FBRyxnQ0FBZ0MsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0RSxPQUFPLFVBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxLQUFVLEVBQUUsU0FBaUIsRUFBRSxZQUFpQixFQUFFLElBQVM7UUFDOUYsSUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFlLENBQUM7UUFDN0csSUFBTSxlQUFlLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxJQUFJLGdCQUFnQixDQUFDO1FBQ3RJLElBQU0sU0FBUyxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDaEUsSUFBTSxlQUFlLEdBQUcsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsSUFBTSxjQUFjLEdBQUcsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDO1FBRWpHLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLEtBQUssSUFBSSxXQUFXLEVBQUU7WUFDeEIsVUFBVSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3JIO1FBRUQsa0VBQWtFO1FBQ2xFLDhFQUE4RTtRQUM5RSxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssZ0JBQWdCLEVBQUU7WUFDdEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7WUFDNUUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgRmllbGRUeXBlLCBGb3JtYXR0ZXIsIEdyaWRPcHRpb24gfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50LW1pbmknO1xyXG5jb25zdCBtb21lbnQgPSBtb21lbnRfOyAvLyBwYXRjaCB0byBmaXggcm9sbHVwIFwibW9tZW50IGhhcyBubyBkZWZhdWx0IGV4cG9ydFwiIGlzc3VlLCBkb2N1bWVudCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy82NzBcclxuXHJcbi8qKlxyXG4gKiBGaW5kIHRoZSBvcHRpb24gdmFsdWUgZnJvbSB0aGUgZm9sbG93aW5nIChpbiBvcmRlciBvZiBleGVjdXRpb24pXHJcbiAqIDEtIENvbHVtbiBEZWZpbml0aW9uIFwicGFyYW1zXCJcclxuICogMi0gR3JpZCBPcHRpb25zIFwiZm9ybWF0dGVyT3B0aW9uc1wiXHJcbiAqIDMtIG5vdGhpbmcgZm91bmQsIHJldHVybiBkZWZhdWx0IHZhbHVlIHByb3ZpZGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKG9wdGlvbk5hbWU6IHN0cmluZywgY29sdW1uRGVmOiBDb2x1bW4sIGdyaWQ6IGFueSwgZGVmYXVsdFZhbHVlPzogYW55KSB7XHJcbiAgY29uc3QgZ3JpZE9wdGlvbnMgPSAoKGdyaWQgJiYgdHlwZW9mIGdyaWQuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgPyBncmlkLmdldE9wdGlvbnMoKSA6IHt9KSBhcyBHcmlkT3B0aW9uO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zO1xyXG5cclxuICBpZiAocGFyYW1zICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25OYW1lKSkge1xyXG4gICAgcmV0dXJuIHBhcmFtc1tvcHRpb25OYW1lXTtcclxuICB9IGVsc2UgaWYgKGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMgJiYgZ3JpZE9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb25OYW1lKSkge1xyXG4gICAgcmV0dXJuIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnNbb3B0aW9uTmFtZV07XHJcbiAgfVxyXG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbn1cclxuXHJcbi8qKiBGcm9tIGEgRmllbGRUeXBlLCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgZGF0ZSBGb3JtYXR0ZXIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFzc29jaWF0ZWREYXRlRm9ybWF0dGVyKGZpZWxkVHlwZTogRmllbGRUeXBlLCBkZWZhdWx0U2VwYXJhdG9yOiBzdHJpbmcpOiBGb3JtYXR0ZXIge1xyXG4gIGNvbnN0IGRlZmF1bHREYXRlRm9ybWF0ID0gbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoZmllbGRUeXBlKTtcclxuXHJcbiAgcmV0dXJuIChfcm93OiBudW1iZXIsIF9jZWxsOiBudW1iZXIsIHZhbHVlOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBfZGF0YUNvbnRleHQ6IGFueSwgZ3JpZDogYW55KSA9PiB7XHJcbiAgICBjb25zdCBncmlkT3B0aW9ucyA9ICgoZ3JpZCAmJiB0eXBlb2YgZ3JpZC5nZXRPcHRpb25zID09PSAnZnVuY3Rpb24nKSA/IGdyaWQuZ2V0T3B0aW9ucygpIDoge30pIGFzIEdyaWRPcHRpb247XHJcbiAgICBjb25zdCBjdXN0b21TZXBhcmF0b3IgPSBncmlkT3B0aW9ucyAmJiBncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zICYmIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMuZGF0ZVNlcGFyYXRvciB8fCBkZWZhdWx0U2VwYXJhdG9yO1xyXG4gICAgY29uc3QgaW5wdXRUeXBlID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi50eXBlIHx8IEZpZWxkVHlwZS5kYXRlO1xyXG4gICAgY29uc3QgaW5wdXREYXRlRm9ybWF0ID0gbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoaW5wdXRUeXBlKTtcclxuICAgIGNvbnN0IGlzUGFyc2luZ0FzVXRjID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi5wYXJhbXMgJiYgY29sdW1uRGVmLnBhcmFtcy5wYXJzZURhdGVBc1V0YyB8fCBmYWxzZTtcclxuXHJcbiAgICBjb25zdCBpc0RhdGVWYWxpZCA9IG1vbWVudCh2YWx1ZSwgaW5wdXREYXRlRm9ybWF0LCBmYWxzZSkuaXNWYWxpZCgpO1xyXG4gICAgbGV0IG91dHB1dERhdGUgPSB2YWx1ZTtcclxuICAgIGlmICh2YWx1ZSAmJiBpc0RhdGVWYWxpZCkge1xyXG4gICAgICBvdXRwdXREYXRlID0gaXNQYXJzaW5nQXNVdGMgPyBtb21lbnQudXRjKHZhbHVlKS5mb3JtYXQoZGVmYXVsdERhdGVGb3JtYXQpIDogbW9tZW50KHZhbHVlKS5mb3JtYXQoZGVmYXVsdERhdGVGb3JtYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVzZXIgY2FuIGN1c3RvbWl6ZSB0aGUgc2VwYXJhdG9yIHRocm91Z2ggdGhlIFwiZm9ybWF0dGVyT3B0aW9uc1wiXHJcbiAgICAvLyBpZiB0aGF0IGlzIHRoZSBjYXNlIHdlIG5lZWQgdG8gcmVwbGFjZSB0aGUgZGVmYXVsdCBcIi9cIiB0byB0aGUgbmV3IHNlcGFyYXRvclxyXG4gICAgaWYgKG91dHB1dERhdGUgJiYgY3VzdG9tU2VwYXJhdG9yICE9PSBkZWZhdWx0U2VwYXJhdG9yKSB7XHJcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChkZWZhdWx0U2VwYXJhdG9yLCAnaWcnKTsgLy8gZmluZCBzZXBhcmF0b3IgZ2xvYmFsbHlcclxuICAgICAgb3V0cHV0RGF0ZSA9IG91dHB1dERhdGUucmVwbGFjZShyZWdleCwgY3VzdG9tU2VwYXJhdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0cHV0RGF0ZTtcclxuICB9O1xyXG59XHJcbiJdfQ==