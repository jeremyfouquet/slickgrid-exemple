import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
/**
 * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).
 * The structure will be "<a href="hyperlink">hyperlink</a>"
 *
 * You can optionally change the hyperlink text displayed by using the generic params "hyperlinkText" in the column definition
 * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display "<a href="link">Company Website</a>"
 *
 * You can also optionally provide the hyperlink URL by using the generic params "hyperlinkUrl" in the column definition
 * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display "<a href="http://www.somewhere.com">Company Website</a>"
 */
export var hyperlinkFormatter = function (row, cell, value, columnDef, dataContext) {
    var columnParams = columnDef && columnDef.params || {};
    var displayedText = columnParams.hyperlinkText ? columnParams.hyperlinkText : value;
    displayedText = DOMPurify.sanitize(displayedText || '');
    var outputLink = columnParams.hyperlinkUrl ? columnParams.hyperlinkUrl : value;
    outputLink = DOMPurify.sanitize(outputLink || '');
    var matchUrl = outputLink.match(/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?/i);
    if (matchUrl && Array.isArray(matchUrl) && matchUrl.length > 0) {
        var finalUrl = matchUrl[0];
        return "<a href=\"" + finalUrl + "\">" + displayedText + "</a>";
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlwZXJsaW5rRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2h5cGVybGlua0Zvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssVUFBVSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyw4QkFBOEI7QUFLNUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQWMsVUFBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxTQUFpQixFQUFFLFdBQWdCO0lBQ3RILElBQU0sWUFBWSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUV6RCxJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcEYsYUFBYSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXhELElBQUksVUFBVSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMvRSxVQUFVLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7SUFFbEQsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDO0lBRXZJLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDOUQsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sZUFBWSxRQUFRLFdBQUssYUFBYSxTQUFNLENBQUM7S0FDckQ7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERPTVB1cmlmeV8gZnJvbSAnZG9tcHVyaWZ5JztcclxuY29uc3QgRE9NUHVyaWZ5ID0gRE9NUHVyaWZ5XzsgLy8gcGF0Y2ggdG8gZml4IHJvbGx1cCB0byB3b3JrXHJcblxyXG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLy4uL21vZGVscy9jb2x1bW4uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvZm9ybWF0dGVyLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogVGFrZXMgYW4gaHlwZXJsaW5rIGNlbGwgdmFsdWUgYW5kIHRyYW5zZm9ybXMgaXQgaW50byBhIHJlYWwgaHlwZXJsaW5rLCBnaXZlbiB0aGF0IHRoZSB2YWx1ZSBzdGFydHMgd2l0aCAxIG9mIHRoZXNlIChodHRwfGZ0cHxodHRwcykuXHJcbiAqIFRoZSBzdHJ1Y3R1cmUgd2lsbCBiZSBcIjxhIGhyZWY9XCJoeXBlcmxpbmtcIj5oeXBlcmxpbms8L2E+XCJcclxuICpcclxuICogWW91IGNhbiBvcHRpb25hbGx5IGNoYW5nZSB0aGUgaHlwZXJsaW5rIHRleHQgZGlzcGxheWVkIGJ5IHVzaW5nIHRoZSBnZW5lcmljIHBhcmFtcyBcImh5cGVybGlua1RleHRcIiBpbiB0aGUgY29sdW1uIGRlZmluaXRpb25cclxuICogRm9yIGV4YW1wbGU6IHsgaWQ6ICdsaW5rJywgZmllbGQ6ICdsaW5rJywgcGFyYW1zOiB7IGh5cGVybGlua1RleHQ6ICdDb21wYW55IFdlYnNpdGUnIH0gfSB3aWxsIGRpc3BsYXkgXCI8YSBocmVmPVwibGlua1wiPkNvbXBhbnkgV2Vic2l0ZTwvYT5cIlxyXG4gKlxyXG4gKiBZb3UgY2FuIGFsc28gb3B0aW9uYWxseSBwcm92aWRlIHRoZSBoeXBlcmxpbmsgVVJMIGJ5IHVzaW5nIHRoZSBnZW5lcmljIHBhcmFtcyBcImh5cGVybGlua1VybFwiIGluIHRoZSBjb2x1bW4gZGVmaW5pdGlvblxyXG4gKiBGb3IgZXhhbXBsZTogeyBpZDogJ2xpbmsnLCBmaWVsZDogJ2xpbmsnLCBwYXJhbXM6IHsgIGh5cGVybGlua1RleHQ6ICdDb21wYW55IFdlYnNpdGUnLCBoeXBlcmxpbmtVcmw6ICdodHRwOi8vd3d3LnNvbWV3aGVyZS5jb20nIH0gfSB3aWxsIGRpc3BsYXkgXCI8YSBocmVmPVwiaHR0cDovL3d3dy5zb21ld2hlcmUuY29tXCI+Q29tcGFueSBXZWJzaXRlPC9hPlwiXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaHlwZXJsaW5rRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSAocm93OiBudW1iZXIsIGNlbGw6IG51bWJlciwgdmFsdWU6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGRhdGFDb250ZXh0OiBhbnkpID0+IHtcclxuICBjb25zdCBjb2x1bW5QYXJhbXMgPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLnBhcmFtcyB8fCB7fTtcclxuXHJcbiAgbGV0IGRpc3BsYXllZFRleHQgPSBjb2x1bW5QYXJhbXMuaHlwZXJsaW5rVGV4dCA/IGNvbHVtblBhcmFtcy5oeXBlcmxpbmtUZXh0IDogdmFsdWU7XHJcbiAgZGlzcGxheWVkVGV4dCA9IERPTVB1cmlmeS5zYW5pdGl6ZShkaXNwbGF5ZWRUZXh0IHx8ICcnKTtcclxuXHJcbiAgbGV0IG91dHB1dExpbmsgPSBjb2x1bW5QYXJhbXMuaHlwZXJsaW5rVXJsID8gY29sdW1uUGFyYW1zLmh5cGVybGlua1VybCA6IHZhbHVlO1xyXG4gIG91dHB1dExpbmsgPSBET01QdXJpZnkuc2FuaXRpemUob3V0cHV0TGluayB8fCAnJyk7XHJcblxyXG4gIGNvbnN0IG1hdGNoVXJsID0gb3V0cHV0TGluay5tYXRjaCgvXihodHRwfGZ0cHxodHRwcyk6XFwvXFwvW1xcd1xcLV9dKyhcXC5bXFx3XFwtX10rKSsoW1xcd1xcLVxcLixAP149JSZhbXA7OlxcL35cXCsjXSpbXFx3XFwtXFxAP149JSZhbXA7XFwvflxcKyNdKT8vaSk7XHJcblxyXG4gIGlmIChtYXRjaFVybCAmJiBBcnJheS5pc0FycmF5KG1hdGNoVXJsKSAmJiBtYXRjaFVybC5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBmaW5hbFVybCA9IG1hdGNoVXJsWzBdO1xyXG4gICAgcmV0dXJuIGA8YSBocmVmPVwiJHtmaW5hbFVybH1cIj4ke2Rpc3BsYXllZFRleHR9PC9hPmA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsdWU7XHJcbn07XHJcbiJdfQ==