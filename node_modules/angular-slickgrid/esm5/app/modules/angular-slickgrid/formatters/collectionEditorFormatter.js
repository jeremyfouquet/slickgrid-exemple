import { arrayToCsvFormatter } from './arrayToCsvFormatter';
import { findOrDefault } from '../services/utilities';
/**
 * A formatter to show the label property value of an editor collection
 */
export var collectionEditorFormatter = function (row, cell, value, columnDef, dataContext, grid) {
    if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection
        || !columnDef.internalColumnEditor.collection.length) {
        return value;
    }
    var internalColumnEditor = columnDef.internalColumnEditor, collection = columnDef.internalColumnEditor.collection;
    var labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';
    var valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';
    if (Array.isArray(value)) {
        if (collection.every(function (x) { return typeof x === 'string'; })) {
            return arrayToCsvFormatter(row, cell, value.map(function (v) { return findOrDefault(collection, function (c) { return c === v; }); }), columnDef, dataContext, grid);
        }
        else {
            return arrayToCsvFormatter(row, cell, value.map(function (v) { return findOrDefault(collection, function (c) { return c[valueName] === v; })[labelName]; }), columnDef, dataContext, grid);
        }
    }
    return findOrDefault(collection, function (c) { return c[valueName] === value; })[labelName] || '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbkVkaXRvckZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9jb2xsZWN0aW9uRWRpdG9yRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFjLFVBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxLQUFVLEVBQUUsU0FBaUIsRUFBRSxXQUFnQixFQUFFLElBQVM7SUFDeEksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVO1dBQ3BHLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDdEQsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVPLElBQUEscURBQW9CLEVBQTBCLHNEQUFVLENBQWlCO0lBQ2pGLElBQU0sU0FBUyxHQUFHLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoSCxJQUFNLFNBQVMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFaEgsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBckIsQ0FBcUIsQ0FBQyxFQUFFO1lBQ2hELE9BQU8sbUJBQW1CLENBQUMsR0FBRyxFQUM1QixJQUFJLEVBQ0osS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQU0sSUFBSyxPQUFBLGFBQWEsQ0FBQyxVQUFVLEVBQUUsVUFBQyxDQUFNLElBQUssT0FBQSxDQUFDLEtBQUssQ0FBQyxFQUFQLENBQU8sQ0FBQyxFQUE5QyxDQUE4QyxDQUFDLEVBQ3JFLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxDQUFDLENBQUM7U0FDVDthQUFNO1lBQ0wsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQzVCLElBQUksRUFDSixLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBTSxJQUFLLE9BQUEsYUFBYSxDQUFDLFVBQVUsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBcEUsQ0FBb0UsQ0FBQyxFQUMzRixTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksQ0FBQyxDQUFDO1NBQ1Q7S0FDRjtJQUVELE9BQU8sYUFBYSxDQUFDLFVBQVUsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQXRCLENBQXNCLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDeEYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlUb0NzdkZvcm1hdHRlciB9IGZyb20gJy4vYXJyYXlUb0NzdkZvcm1hdHRlcic7XHJcbmltcG9ydCB7IENvbHVtbiwgRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBmaW5kT3JEZWZhdWx0IH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuXHJcbi8qKlxyXG4gKiBBIGZvcm1hdHRlciB0byBzaG93IHRoZSBsYWJlbCBwcm9wZXJ0eSB2YWx1ZSBvZiBhbiBlZGl0b3IgY29sbGVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25FZGl0b3JGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IChyb3c6IG51bWJlciwgY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZGF0YUNvbnRleHQ6IGFueSwgZ3JpZDogYW55KSA9PiB7XHJcbiAgaWYgKCF2YWx1ZSB8fCAhY29sdW1uRGVmIHx8ICFjb2x1bW5EZWYuaW50ZXJuYWxDb2x1bW5FZGl0b3IgfHwgIWNvbHVtbkRlZi5pbnRlcm5hbENvbHVtbkVkaXRvci5jb2xsZWN0aW9uXHJcbiAgICB8fCAhY29sdW1uRGVmLmludGVybmFsQ29sdW1uRWRpdG9yLmNvbGxlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCB7IGludGVybmFsQ29sdW1uRWRpdG9yLCBpbnRlcm5hbENvbHVtbkVkaXRvcjogeyBjb2xsZWN0aW9uIH0gfSA9IGNvbHVtbkRlZjtcclxuICBjb25zdCBsYWJlbE5hbWUgPSAoaW50ZXJuYWxDb2x1bW5FZGl0b3IuY3VzdG9tU3RydWN0dXJlKSA/IGludGVybmFsQ29sdW1uRWRpdG9yLmN1c3RvbVN0cnVjdHVyZS5sYWJlbCA6ICdsYWJlbCc7XHJcbiAgY29uc3QgdmFsdWVOYW1lID0gKGludGVybmFsQ29sdW1uRWRpdG9yLmN1c3RvbVN0cnVjdHVyZSkgPyBpbnRlcm5hbENvbHVtbkVkaXRvci5jdXN0b21TdHJ1Y3R1cmUudmFsdWUgOiAndmFsdWUnO1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgIGlmIChjb2xsZWN0aW9uLmV2ZXJ5KHggPT4gdHlwZW9mIHggPT09ICdzdHJpbmcnKSkge1xyXG4gICAgICByZXR1cm4gYXJyYXlUb0NzdkZvcm1hdHRlcihyb3csXHJcbiAgICAgICAgY2VsbCxcclxuICAgICAgICB2YWx1ZS5tYXAoKHY6IGFueSkgPT4gZmluZE9yRGVmYXVsdChjb2xsZWN0aW9uLCAoYzogYW55KSA9PiBjID09PSB2KSksXHJcbiAgICAgICAgY29sdW1uRGVmLFxyXG4gICAgICAgIGRhdGFDb250ZXh0LFxyXG4gICAgICAgIGdyaWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGFycmF5VG9Dc3ZGb3JtYXR0ZXIocm93LFxyXG4gICAgICAgIGNlbGwsXHJcbiAgICAgICAgdmFsdWUubWFwKCh2OiBhbnkpID0+IGZpbmRPckRlZmF1bHQoY29sbGVjdGlvbiwgKGM6IGFueSkgPT4gY1t2YWx1ZU5hbWVdID09PSB2KVtsYWJlbE5hbWVdKSxcclxuICAgICAgICBjb2x1bW5EZWYsXHJcbiAgICAgICAgZGF0YUNvbnRleHQsXHJcbiAgICAgICAgZ3JpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmluZE9yRGVmYXVsdChjb2xsZWN0aW9uLCAoYzogYW55KSA9PiBjW3ZhbHVlTmFtZV0gPT09IHZhbHVlKVtsYWJlbE5hbWVdIHx8ICcnO1xyXG59O1xyXG4iXX0=