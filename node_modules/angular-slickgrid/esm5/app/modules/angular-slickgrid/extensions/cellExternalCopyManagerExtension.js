import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName, } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { BindingEventService } from '../services/bindingEvent.service';
import { sanitizeHtmlToText } from '../services/utilities';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
var CellExternalCopyManagerExtension = /** @class */ (function () {
    function CellExternalCopyManagerExtension(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
        this._bindingEventService = new BindingEventService();
    }
    Object.defineProperty(CellExternalCopyManagerExtension.prototype, "addonOptions", {
        get: function () {
            return this._addonOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellExternalCopyManagerExtension.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellExternalCopyManagerExtension.prototype, "commandQueue", {
        get: function () {
            return this._commandQueue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellExternalCopyManagerExtension.prototype, "undoRedoBuffer", {
        get: function () {
            return this._undoRedoBuffer;
        },
        enumerable: true,
        configurable: true
    });
    CellExternalCopyManagerExtension.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        this._bindingEventService.unbindAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        if (this._cellSelectionModel && this._cellSelectionModel.destroy) {
            this._cellSelectionModel.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._addonOptions);
        this._addon = null;
        this._addonOptions = null;
    };
    /** Get the instance of the SlickGrid addon (control or plugin). */
    CellExternalCopyManagerExtension.prototype.getAddonInstance = function () {
        return this._addon;
    };
    CellExternalCopyManagerExtension.prototype.register = function () {
        var _this = this;
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.cellExternalCopyManager);
            this.createUndoRedoBuffer();
            this._bindingEventService.bind(document.body, 'keydown', this.handleKeyDown.bind(this));
            this._addonOptions = tslib_1.__assign({}, this.getDefaultOptions(), this.sharedService.gridOptions.excelCopyBufferOptions);
            this._cellSelectionModel = new Slick.CellSelectionModel();
            this.sharedService.grid.setSelectionModel(this._cellSelectionModel);
            this._addon = new Slick.CellExternalCopyManager(this._addonOptions);
            if (this._addon) {
                this.sharedService.grid.registerPlugin(this._addon);
            }
            // hook to all possible events
            if (this.sharedService.grid && this._addonOptions) {
                if (this._addonOptions.onExtensionRegistered) {
                    this._addonOptions.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onCopyCells, function (e, args) {
                    if (_this._addonOptions && typeof _this._addonOptions.onCopyCells === 'function') {
                        _this._addonOptions.onCopyCells(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onCopyCancelled, function (e, args) {
                    if (_this._addonOptions && typeof _this._addonOptions.onCopyCancelled === 'function') {
                        _this._addonOptions.onCopyCancelled(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onPasteCells, function (e, args) {
                    if (_this._addonOptions && typeof _this._addonOptions.onPasteCells === 'function') {
                        _this._addonOptions.onPasteCells(e, args);
                    }
                });
            }
            return this._addon;
        }
        return null;
    };
    /** Create an undo redo buffer used by the Excel like copy */
    CellExternalCopyManagerExtension.prototype.createUndoRedoBuffer = function () {
        var _this = this;
        var commandCtr = 0;
        this._commandQueue = [];
        this._undoRedoBuffer = {
            queueAndExecuteCommand: function (editCommand) {
                _this._commandQueue[commandCtr] = editCommand;
                commandCtr++;
                editCommand.execute();
            },
            undo: function () {
                if (commandCtr === 0) {
                    return;
                }
                commandCtr--;
                var command = _this._commandQueue[commandCtr];
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.undo();
                }
            },
            redo: function () {
                if (commandCtr >= _this._commandQueue.length) {
                    return;
                }
                var command = _this._commandQueue[commandCtr];
                commandCtr++;
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.execute();
                }
            }
        };
    };
    /** @return default plugin (addon) options */
    CellExternalCopyManagerExtension.prototype.getDefaultOptions = function () {
        var _this = this;
        var newRowIds = 0;
        return {
            clipboardCommandHandler: function (editCommand) {
                _this._undoRedoBuffer.queueAndExecuteCommand.call(_this._undoRedoBuffer, editCommand);
            },
            dataItemColumnValueExtractor: function (item, columnDef) {
                // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed
                // to decide if we evaluate the Formatter, we will use the same flag from Export which is "exportWithFormatter"
                if (!_this.sharedService.gridOptions.editable || !columnDef.editor) {
                    var isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : (_this.sharedService.gridOptions.exportOptions && _this.sharedService.gridOptions.exportOptions.exportWithFormatter);
                    if (columnDef.formatter && isEvaluatingFormatter) {
                        var formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, _this.sharedService.grid);
                        if (columnDef.sanitizeDataExport || (_this.sharedService.gridOptions.exportOptions && _this.sharedService.gridOptions.exportOptions.sanitizeDataExport)) {
                            var outputString = formattedOutput;
                            if (formattedOutput && typeof formattedOutput === 'object' && formattedOutput.hasOwnProperty('text')) {
                                outputString = formattedOutput.text;
                            }
                            if (outputString === null) {
                                outputString = '';
                            }
                            return sanitizeHtmlToText(outputString);
                        }
                        return formattedOutput;
                    }
                }
                // else use the default "dataItemColumnValueExtractor" from the plugin itself
                // we can do that by setting back the getter with null
                return null;
            },
            readOnlyMode: false,
            includeHeaderWhenCopying: false,
            newRowCreator: function (count) {
                for (var i = 0; i < count; i++) {
                    var item = {
                        id: 'newRow_' + newRowIds++
                    };
                    _this.sharedService.grid.getData().addItem(item);
                }
            }
        };
    };
    /** Hook an undo shortcut key hook that will redo/undo the copy buffer using Ctrl+(Shift)+Z keyboard events */
    CellExternalCopyManagerExtension.prototype.handleKeyDown = function (e) {
        var keyCode = e.keyCode || e.code;
        if (keyCode === 90 && (e.ctrlKey || e.metaKey)) {
            if (e.shiftKey) {
                this._undoRedoBuffer.redo(); // Ctrl + Shift + Z
            }
            else {
                this._undoRedoBuffer.undo(); // Ctrl + Z
            }
        }
    };
    CellExternalCopyManagerExtension.ctorParameters = function () { return [
        { type: ExtensionUtility },
        { type: SharedService }
    ]; };
CellExternalCopyManagerExtension.ɵfac = function CellExternalCopyManagerExtension_Factory(t) { return new (t || CellExternalCopyManagerExtension)(ɵngcc0.ɵɵinject(ExtensionUtility), ɵngcc0.ɵɵinject(SharedService)); };
CellExternalCopyManagerExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CellExternalCopyManagerExtension, factory: function (t) { return CellExternalCopyManagerExtension.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CellExternalCopyManagerExtension, [{
        type: Injectable
    }], function () { return [{ type: ExtensionUtility }, { type: SharedService }]; }, null); })();
    return CellExternalCopyManagerExtension;
}());
export { CellExternalCopyManagerExtension };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,