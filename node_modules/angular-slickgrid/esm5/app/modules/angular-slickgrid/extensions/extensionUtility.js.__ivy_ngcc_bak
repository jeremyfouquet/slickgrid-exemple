import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Constants } from '../constants';
import { ExtensionName } from '../models/index';
import { SharedService } from '../services/shared.service';
import { getTranslationPrefix } from '../services/utilities';
var ExtensionUtility = /** @class */ (function () {
    function ExtensionUtility(sharedService, translate) {
        this.sharedService = sharedService;
        this.translate = translate;
    }
    /**
     * Load SlickGrid Extension (Control/Plugin) dynamically (on demand)
     * This will basically only load the extension when user enables the feature
     * @param extensionName
     */
    ExtensionUtility.prototype.loadExtensionDynamically = function (extensionName) {
        try {
            switch (extensionName) {
                case ExtensionName.autoTooltip:
                    require('slickgrid/plugins/slick.autotooltips');
                    break;
                case ExtensionName.cellExternalCopyManager:
                    require('slickgrid/plugins/slick.cellexternalcopymanager');
                    break;
                case ExtensionName.checkboxSelector:
                    require('slickgrid/plugins/slick.checkboxselectcolumn');
                    break;
                case ExtensionName.cellMenu:
                    require('slickgrid/plugins/slick.cellmenu');
                    break;
                case ExtensionName.columnPicker:
                    require('slickgrid/controls/slick.columnpicker');
                    break;
                case ExtensionName.contextMenu:
                    require('slickgrid/plugins/slick.contextmenu');
                    break;
                case ExtensionName.draggableGrouping:
                    require('slickgrid/plugins/slick.draggablegrouping');
                    break;
                case ExtensionName.gridMenu:
                    require('slickgrid/controls/slick.gridmenu');
                    break;
                case ExtensionName.groupItemMetaProvider:
                    require('slickgrid/slick.groupitemmetadataprovider');
                    break;
                case ExtensionName.headerButton:
                    require('slickgrid/plugins/slick.headerbuttons');
                    break;
                case ExtensionName.headerMenu:
                    require('slickgrid/plugins/slick.headermenu');
                    break;
                case ExtensionName.rowSelection:
                    require('slickgrid/plugins/slick.rowselectionmodel');
                    break;
                case ExtensionName.rowDetailView:
                    require('slickgrid/plugins/slick.rowdetailview');
                    break;
                case ExtensionName.rowMoveManager:
                    require('slickgrid/plugins/slick.rowmovemanager');
                    break;
            }
        }
        catch (e) {
            // do nothing, we fall here when using Angular and RequireJS
        }
    };
    /**
     * From a Grid Menu object property name, we will return the correct title output string following this order
     * 1- if user provided a title, use it as the output title
     * 2- else if user provided a title key, use it to translate the output title
     * 3- else if nothing is provided use text defined as constants
     */
    ExtensionUtility.prototype.getPickerTitleOutputString = function (propName, pickerName) {
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        var output = '';
        var picker = this.sharedService.gridOptions && this.sharedService.gridOptions[pickerName] || {};
        var enableTranslate = this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate || false;
        // get locales provided by user in forRoot or else use default English locales via the Constants
        var locales = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;
        var title = picker && picker[propName];
        var titleKey = picker && picker[propName + "Key"];
        var gridOptions = this.sharedService.gridOptions;
        var translationPrefix = getTranslationPrefix(gridOptions);
        if (titleKey && this.translate && this.translate.currentLang && this.translate.instant) {
            output = this.translate.instant(titleKey || ' ');
        }
        else {
            switch (propName) {
                case 'customTitle':
                    output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(translationPrefix + "COMMANDS" || ' ') || locales && locales.TEXT_COMMANDS;
                    break;
                case 'columnTitle':
                    output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(translationPrefix + "COLUMNS" || ' ') || locales && locales.TEXT_COLUMNS;
                    break;
                case 'forceFitTitle':
                    output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(translationPrefix + "FORCE_FIT_COLUMNS" || ' ') || locales && locales.TEXT_FORCE_FIT_COLUMNS;
                    break;
                case 'syncResizeTitle':
                    output = title || enableTranslate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(translationPrefix + "SYNCHRONOUS_RESIZE" || ' ') || locales && locales.TEXT_SYNCHRONOUS_RESIZE;
                    break;
                default:
                    output = title;
                    break;
            }
        }
        return output;
    };
    /**
     * Loop through object provided and set to null any property found starting with "onX"
     * @param {Object}: obj
     */
    ExtensionUtility.prototype.nullifyFunctionNameStartingWithOn = function (obj) {
        var e_1, _a;
        if (obj) {
            try {
                for (var _b = tslib_1.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var prop = _c.value;
                    if (prop.startsWith('on')) {
                        obj[prop] = null;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * When using ColumnPicker/GridMenu to show/hide a column, we potentially need to readjust the grid option "frozenColumn" index.
     * That is because SlickGrid freezes by column index and it has no knowledge of the columns themselves and won't change the index, we need to do that ourselves whenever necessary.
     * Note: we call this method right after the visibleColumns array got updated, it won't work properly if we call it before the setting the visibleColumns.
     * @param {String} pickerColumnId - what is the column id triggered by the picker
     * @param {Number} frozenColumnIndex - current frozenColumn index
     * @param {Boolean} showingColumn - is the column being shown or hidden?
     * @param {Array<Object>} allColumns - all columns (including hidden ones)
     * @param {Array<Object>} visibleColumns - only visible columns (excluding hidden ones)
     */
    ExtensionUtility.prototype.readjustFrozenColumnIndexWhenNeeded = function (pickerColumnId, frozenColumnIndex, showingColumn, allColumns, visibleColumns) {
        var _this = this;
        if (frozenColumnIndex >= 0 && pickerColumnId) {
            // calculate a possible frozenColumn index variance
            var frozenColIndexVariance = 0;
            if (showingColumn) {
                var definedFrozenColumnIndex = visibleColumns.findIndex(function (col) { return col.id === _this.sharedService.frozenVisibleColumnId; });
                var columnIndex = visibleColumns.findIndex(function (col) { return col.id === pickerColumnId; });
                frozenColIndexVariance = (columnIndex >= 0 && (frozenColumnIndex >= columnIndex || definedFrozenColumnIndex === columnIndex)) ? 1 : 0;
            }
            else {
                var columnIndex = allColumns.findIndex(function (col) { return col.id === pickerColumnId; });
                frozenColIndexVariance = (columnIndex >= 0 && frozenColumnIndex >= columnIndex) ? -1 : 0;
            }
            // if we have a variance different than 0 then apply it
            var newFrozenColIndex = frozenColumnIndex + frozenColIndexVariance;
            if (frozenColIndexVariance !== 0) {
                this.sharedService.grid.setOptions({ frozenColumn: newFrozenColIndex });
            }
            // to freeze columns, we need to take only the visible columns and we also need to use setColumns() when some of them are hidden
            // to make sure that we only use the visible columns, not doing this would show back some of the hidden columns
            if (Array.isArray(visibleColumns) && Array.isArray(allColumns) && visibleColumns.length !== allColumns.length) {
                this.sharedService.grid.setColumns(visibleColumns);
            }
        }
    };
    /**
     * Sort items (by pointers) in an array by a property name
     * @params items array
     * @param property name to sort with
     */
    ExtensionUtility.prototype.sortItems = function (items, propertyName) {
        // sort the custom items by their position in the list
        if (Array.isArray(items)) {
            items.sort(function (itemA, itemB) {
                if (itemA && itemB && itemA.hasOwnProperty(propertyName) && itemB.hasOwnProperty(propertyName)) {
                    return itemA[propertyName] - itemB[propertyName];
                }
                return 0;
            });
        }
    };
    /** Translate the an array of items from an input key and assign to the output key */
    ExtensionUtility.prototype.translateItems = function (items, inputKey, outputKey) {
        var e_2, _a;
        if (Array.isArray(items)) {
            try {
                for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                    var item = items_1_1.value;
                    if (item[inputKey]) {
                        item[outputKey] = this.translate && this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(item[inputKey]);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * When "enabledTranslate" is set to True, we will try to translate if the Translate Service exist or use the Locales when not
     * @param translationKey
     * @param localeKey
     */
    ExtensionUtility.prototype.translateWhenEnabledAndServiceExist = function (translationKey, localeKey) {
        var text = '';
        var gridOptions = this.sharedService && this.sharedService.gridOptions;
        // get locales provided by user in main file or else use default English locales via the Constants
        var locales = gridOptions && gridOptions.locales || Constants.locales;
        if (gridOptions.enableTranslate && this.translate && this.translate.currentLang && this.translate.instant) {
            text = this.translate.instant(translationKey || ' ');
        }
        else if (locales && locales.hasOwnProperty(localeKey)) {
            text = locales[localeKey];
        }
        else {
            text = localeKey;
        }
        return text;
    };
    ExtensionUtility.ctorParameters = function () { return [
        { type: SharedService },
        { type: TranslateService, decorators: [{ type: Optional }] }
    ]; };
    ExtensionUtility = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(1, Optional())
    ], ExtensionUtility);
    return ExtensionUtility;
}());
export { ExtensionUtility };
//# sourceMappingURL=data:application/json;base64,