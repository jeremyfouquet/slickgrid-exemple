import * as tslib_1 from "tslib";
import { SharedService } from '../services/shared.service';
import { ExtensionName } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { Injectable } from '@angular/core';
var DraggableGroupingExtension = /** @class */ (function () {
    function DraggableGroupingExtension(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(DraggableGroupingExtension.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    DraggableGroupingExtension.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._draggableGroupingOptions);
        this._addon = null;
        this._draggableGroupingOptions = null;
    };
    /**
     * Bind/Create different plugins before the Grid creation.
     * For example the multi-select have to be added to the column definition before the grid is created to work properly
     */
    DraggableGroupingExtension.prototype.create = function (gridOptions) {
        if (gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.draggableGrouping);
            if (!this._addon) {
                this._addon = new Slick.DraggableGrouping(gridOptions.draggableGrouping || {});
            }
            return this._addon;
        }
        return null;
    };
    /** Get the instance of the SlickGrid addon (control or plugin). */
    DraggableGroupingExtension.prototype.getAddonInstance = function () {
        return this._addon;
    };
    DraggableGroupingExtension.prototype.register = function () {
        var _this = this;
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            this.sharedService.grid.registerPlugin(this._addon);
            // Events
            if (this.sharedService.grid && this.sharedService.gridOptions.draggableGrouping) {
                this._draggableGroupingOptions = this.sharedService.gridOptions.draggableGrouping;
                if (this._draggableGroupingOptions.onExtensionRegistered) {
                    this._draggableGroupingOptions.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onGroupChanged, function (e, args) {
                    if (_this._draggableGroupingOptions && typeof _this._draggableGroupingOptions.onGroupChanged === 'function') {
                        _this._draggableGroupingOptions.onGroupChanged(e, args);
                    }
                });
            }
            return this._addon;
        }
        return null;
    };
    DraggableGroupingExtension.ctorParameters = function () { return [
        { type: ExtensionUtility },
        { type: SharedService }
    ]; };
    DraggableGroupingExtension = tslib_1.__decorate([
        Injectable()
    ], DraggableGroupingExtension);
    return DraggableGroupingExtension;
}());
export { DraggableGroupingExtension };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlR3JvdXBpbmdFeHRlbnNpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL2V4dGVuc2lvbnMvZHJhZ2dhYmxlR3JvdXBpbmdFeHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQWdDLGFBQWEsRUFBMkMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2SCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNDO0lBS0Usb0NBQW9CLGdCQUFrQyxFQUFVLGFBQTRCO1FBQXhFLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUMxRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxzQkFBSSxvREFBWTthQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUVELDRDQUFPLEdBQVA7UUFDRSxtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7SUFDSCwyQ0FBTSxHQUFOLFVBQU8sV0FBdUI7UUFDNUIsSUFBSSxXQUFXLEVBQUU7WUFDZixpRUFBaUU7WUFDakUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBRWhGLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUNoRjtZQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELG1FQUFtRTtJQUNuRSxxREFBZ0IsR0FBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELDZDQUFRLEdBQVI7UUFBQSxpQkFvQkM7UUFuQkMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQ25GLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFcEQsU0FBUztZQUNULElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7Z0JBQy9FLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDbEYsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMscUJBQXFCLEVBQUU7b0JBQ3hELElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ25FO2dCQUNELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLFVBQUMsQ0FBTSxFQUFFLElBQW1EO29CQUNuSCxJQUFJLEtBQUksQ0FBQyx5QkFBeUIsSUFBSSxPQUFPLEtBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLEtBQUssVUFBVSxFQUFFO3dCQUN6RyxLQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztxQkFDeEQ7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBOURxQyxnQkFBZ0I7Z0JBQXlCLGFBQWE7O0lBTGpGLDBCQUEwQjtRQUR0QyxVQUFVLEVBQUU7T0FDQSwwQkFBMEIsQ0FvRXRDO0lBQUQsaUNBQUM7Q0FBQSxBQXBFRCxJQW9FQztTQXBFWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgU2hhcmVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRHJhZ2dhYmxlR3JvdXBpbmcsIEV4dGVuc2lvbiwgRXh0ZW5zaW9uTmFtZSwgR3JpZE9wdGlvbiwgR3JvdXBpbmcsIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVXRpbGl0eSB9IGZyb20gJy4vZXh0ZW5zaW9uVXRpbGl0eSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8vIHVzaW5nIGV4dGVybmFsIG5vbi10eXBlZCBqcyBsaWJyYXJpZXNcclxuZGVjbGFyZSBjb25zdCBTbGljazogYW55O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRHJhZ2dhYmxlR3JvdXBpbmdFeHRlbnNpb24gaW1wbGVtZW50cyBFeHRlbnNpb24ge1xyXG4gIHByaXZhdGUgX2V2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XHJcbiAgcHJpdmF0ZSBfYWRkb246IGFueTtcclxuICBwcml2YXRlIF9kcmFnZ2FibGVHcm91cGluZ09wdGlvbnM6IERyYWdnYWJsZUdyb3VwaW5nIHwgbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBleHRlbnNpb25VdGlsaXR5OiBFeHRlbnNpb25VdGlsaXR5LCBwcml2YXRlIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2UpIHtcclxuICAgIHRoaXMuX2V2ZW50SGFuZGxlciA9IG5ldyBTbGljay5FdmVudEhhbmRsZXIoKTtcclxuICB9XHJcblxyXG4gIGdldCBldmVudEhhbmRsZXIoKTogU2xpY2tFdmVudEhhbmRsZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50SGFuZGxlcjtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAvLyB1bnN1YnNjcmliZSBhbGwgU2xpY2tHcmlkIGV2ZW50c1xyXG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyLnVuc3Vic2NyaWJlQWxsKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2FkZG9uICYmIHRoaXMuX2FkZG9uLmRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy5fYWRkb24uZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5leHRlbnNpb25VdGlsaXR5Lm51bGxpZnlGdW5jdGlvbk5hbWVTdGFydGluZ1dpdGhPbih0aGlzLl9kcmFnZ2FibGVHcm91cGluZ09wdGlvbnMpO1xyXG4gICAgdGhpcy5fYWRkb24gPSBudWxsO1xyXG4gICAgdGhpcy5fZHJhZ2dhYmxlR3JvdXBpbmdPcHRpb25zID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJpbmQvQ3JlYXRlIGRpZmZlcmVudCBwbHVnaW5zIGJlZm9yZSB0aGUgR3JpZCBjcmVhdGlvbi5cclxuICAgKiBGb3IgZXhhbXBsZSB0aGUgbXVsdGktc2VsZWN0IGhhdmUgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbHVtbiBkZWZpbml0aW9uIGJlZm9yZSB0aGUgZ3JpZCBpcyBjcmVhdGVkIHRvIHdvcmsgcHJvcGVybHlcclxuICAgKi9cclxuICBjcmVhdGUoZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb24pIHtcclxuICAgIGlmIChncmlkT3B0aW9ucykge1xyXG4gICAgICAvLyBkeW5hbWljYWxseSBpbXBvcnQgdGhlIFNsaWNrR3JpZCBwbHVnaW4gKGFkZG9uKSB3aXRoIFJlcXVpcmVKU1xyXG4gICAgICB0aGlzLmV4dGVuc2lvblV0aWxpdHkubG9hZEV4dGVuc2lvbkR5bmFtaWNhbGx5KEV4dGVuc2lvbk5hbWUuZHJhZ2dhYmxlR3JvdXBpbmcpO1xyXG5cclxuICAgICAgaWYgKCF0aGlzLl9hZGRvbikge1xyXG4gICAgICAgIHRoaXMuX2FkZG9uID0gbmV3IFNsaWNrLkRyYWdnYWJsZUdyb3VwaW5nKGdyaWRPcHRpb25zLmRyYWdnYWJsZUdyb3VwaW5nIHx8IHt9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5fYWRkb247XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgdGhlIGluc3RhbmNlIG9mIHRoZSBTbGlja0dyaWQgYWRkb24gKGNvbnRyb2wgb3IgcGx1Z2luKS4gKi9cclxuICBnZXRBZGRvbkluc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FkZG9uO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXIoKTogYW55IHtcclxuICAgIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zKSB7XHJcbiAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLnJlZ2lzdGVyUGx1Z2luKHRoaXMuX2FkZG9uKTtcclxuXHJcbiAgICAgIC8vIEV2ZW50c1xyXG4gICAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmRyYWdnYWJsZUdyb3VwaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZHJhZ2dhYmxlR3JvdXBpbmdPcHRpb25zID0gdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmRyYWdnYWJsZUdyb3VwaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnZ2FibGVHcm91cGluZ09wdGlvbnMub25FeHRlbnNpb25SZWdpc3RlcmVkKSB7XHJcbiAgICAgICAgICB0aGlzLl9kcmFnZ2FibGVHcm91cGluZ09wdGlvbnMub25FeHRlbnNpb25SZWdpc3RlcmVkKHRoaXMuX2FkZG9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLnN1YnNjcmliZSh0aGlzLl9hZGRvbi5vbkdyb3VwQ2hhbmdlZCwgKGU6IGFueSwgYXJnczogeyBjYWxsZXI/OiBzdHJpbmc7IGdyb3VwQ29sdW1uczogR3JvdXBpbmdbXSB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fZHJhZ2dhYmxlR3JvdXBpbmdPcHRpb25zICYmIHR5cGVvZiB0aGlzLl9kcmFnZ2FibGVHcm91cGluZ09wdGlvbnMub25Hcm91cENoYW5nZWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ2dhYmxlR3JvdXBpbmdPcHRpb25zLm9uR3JvdXBDaGFuZ2VkKGUsIGFyZ3MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fYWRkb247XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIl19