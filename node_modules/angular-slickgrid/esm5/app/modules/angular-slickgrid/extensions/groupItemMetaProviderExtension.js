import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
var GroupItemMetaProviderExtension = /** @class */ (function () {
    function GroupItemMetaProviderExtension(sharedService) {
        this.sharedService = sharedService;
    }
    GroupItemMetaProviderExtension.prototype.dispose = function () {
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this._addon = null;
    };
    /** Get the instance of the SlickGrid addon (control or plugin). */
    GroupItemMetaProviderExtension.prototype.getAddonInstance = function () {
        return this._addon;
    };
    /** register the group item metadata provider to add expand/collapse group handlers */
    GroupItemMetaProviderExtension.prototype.register = function () {
        if (this.sharedService && this.sharedService.grid) {
            this._addon = this.sharedService.groupItemMetadataProvider || {};
            this.sharedService.grid.registerPlugin(this._addon);
            return this._addon;
        }
        return null;
    };
    GroupItemMetaProviderExtension.ctorParameters = function () { return [
        { type: SharedService }
    ]; };
GroupItemMetaProviderExtension.ɵfac = function GroupItemMetaProviderExtension_Factory(t) { return new (t || GroupItemMetaProviderExtension)(ɵngcc0.ɵɵinject(SharedService)); };
GroupItemMetaProviderExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GroupItemMetaProviderExtension, factory: function (t) { return GroupItemMetaProviderExtension.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupItemMetaProviderExtension, [{
        type: Injectable
    }], function () { return [{ type: SharedService }]; }, null); })();
    return GroupItemMetaProviderExtension;
}());
export { GroupItemMetaProviderExtension };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBJdGVtTWV0YVByb3ZpZGVyRXh0ZW5zaW9uLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhci1zbGlja2dyaWQvYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZXh0ZW5zaW9ucy9ncm91cEl0ZW1NZXRhUHJvdmlkZXJFeHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUczRDtBQUFrRSxJQUdoRSx3Q0FBb0IsYUFBNEI7QUFBSSxRQUFoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLElBQUcsQ0FBQztBQUN2RCxJQUNFLGdEQUFPLEdBQVA7QUFDQSxRQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtBQUM1QyxZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDNUIsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBRUgsSUFBRSxtRUFBbUU7QUFDckUsSUFBRSx5REFBZ0IsR0FBaEI7QUFBYyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixJQUFFLENBQUM7QUFFSCxJQUFFLHNGQUFzRjtBQUN4RixJQUFFLGlEQUFRLEdBQVI7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRTtBQUN2RCxZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsSUFBSSxFQUFFLENBQUM7QUFDdkUsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFELFlBQU0sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3pCLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNGO0FBQ3lFLGdCQXhCckMsYUFBYTtBQUFHO0lBSHhDLDhCQUE4QixnQ0FEMUMsVUFBVSxFQUFFLFFBQ0EsOEJBQThCLENBMEIxQzs7Ozt1RUFDRDtBQUFDLElBREQscUNBQUM7QUFDQSxDQURBLEFBMUJELElBMEJDOztBQS9CQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXRCQSxBQUFBLEFBSEEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUEwQkEsQUFBQSxBQUFBLEFBQUEsQUExQkEsQUEwQkEsQUExQkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgU2hhcmVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEdyb3VwSXRlbU1ldGFQcm92aWRlckV4dGVuc2lvbiBpbXBsZW1lbnRzIEV4dGVuc2lvbiB7XHJcbiAgcHJpdmF0ZSBfYWRkb246IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzaGFyZWRTZXJ2aWNlOiBTaGFyZWRTZXJ2aWNlKSB7IH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGlmICh0aGlzLl9hZGRvbiAmJiB0aGlzLl9hZGRvbi5kZXN0cm95KSB7XHJcbiAgICAgIHRoaXMuX2FkZG9uLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2FkZG9uID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgdGhlIGluc3RhbmNlIG9mIHRoZSBTbGlja0dyaWQgYWRkb24gKGNvbnRyb2wgb3IgcGx1Z2luKS4gKi9cclxuICBnZXRBZGRvbkluc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FkZG9uO1xyXG4gIH1cclxuXHJcbiAgLyoqIHJlZ2lzdGVyIHRoZSBncm91cCBpdGVtIG1ldGFkYXRhIHByb3ZpZGVyIHRvIGFkZCBleHBhbmQvY29sbGFwc2UgZ3JvdXAgaGFuZGxlcnMgKi9cclxuICByZWdpc3RlcigpOiBhbnkge1xyXG4gICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZSAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZCkge1xyXG4gICAgICB0aGlzLl9hZGRvbiA9IHRoaXMuc2hhcmVkU2VydmljZS5ncm91cEl0ZW1NZXRhZGF0YVByb3ZpZGVyIHx8IHt9O1xyXG4gICAgICB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZC5yZWdpc3RlclBsdWdpbih0aGlzLl9hZGRvbik7XHJcbiAgICAgIHJldHVybiB0aGlzLl9hZGRvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG4iXX0=