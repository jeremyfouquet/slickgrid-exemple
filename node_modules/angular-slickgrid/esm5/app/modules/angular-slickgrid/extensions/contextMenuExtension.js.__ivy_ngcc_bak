import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DelimiterType, ExtensionName, FileType, } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { SharedService } from '../services/shared.service';
import { ExportService } from '../services/export.service';
import { ExcelExportService } from '../services/excelExport.service';
import { TreeDataService } from '../services/treeData.service';
import { exportWithFormatterWhenDefined } from '../services/export-utilities';
import { getDescendantProperty, getTranslationPrefix } from '../services/utilities';
var ContextMenuExtension = /** @class */ (function () {
    function ContextMenuExtension(excelExportService, exportService, extensionUtility, sharedService, treeDataService, translate) {
        this.excelExportService = excelExportService;
        this.exportService = exportService;
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this.treeDataService = treeDataService;
        this.translate = translate;
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(ContextMenuExtension.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    ContextMenuExtension.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu && this.sharedService.gridOptions.contextMenu.commandItems) {
            this.sharedService.gridOptions.contextMenu = this._userOriginalContextMenu;
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._contextMenuOptions);
        this._addon = null;
        this._contextMenuOptions = null;
    };
    /** Get the instance of the SlickGrid addon (control or plugin). */
    ContextMenuExtension.prototype.getAddonInstance = function () {
        return this._addon;
    };
    /**
     * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    ContextMenuExtension.prototype.register = function () {
        var _this = this;
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu) {
            this._contextMenuOptions = this.sharedService.gridOptions.contextMenu;
            // keep original user context menu, useful when switching locale to translate
            this._userOriginalContextMenu = tslib_1.__assign({}, this._contextMenuOptions);
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.contextMenu);
            // merge the original commands with the built-in internal commands
            var originalCommandItems = this._userOriginalContextMenu && Array.isArray(this._userOriginalContextMenu.commandItems) ? this._userOriginalContextMenu.commandItems : [];
            this._contextMenuOptions.commandItems = tslib_1.__spread(originalCommandItems, this.addMenuCustomCommands(originalCommandItems));
            this._contextMenuOptions = tslib_1.__assign({}, this._contextMenuOptions);
            this.sharedService.gridOptions.contextMenu = this._contextMenuOptions;
            // sort all menu items by their position order when defined
            this.extensionUtility.sortItems(this._contextMenuOptions.commandItems || [], 'positionOrder');
            this.extensionUtility.sortItems(this._contextMenuOptions.optionItems || [], 'positionOrder');
            this._addon = new Slick.Plugins.ContextMenu(this._contextMenuOptions);
            this.sharedService.grid.registerPlugin(this._addon);
            // translate the item keys when necessary
            if (this.sharedService.gridOptions.enableTranslate) {
                this.translateContextMenu();
            }
            // hook all events
            if (this.sharedService.grid && this._contextMenuOptions) {
                if (this._contextMenuOptions.onExtensionRegistered) {
                    this._contextMenuOptions.onExtensionRegistered(this._addon);
                }
                if (this._contextMenuOptions && typeof this._contextMenuOptions.onCommand === 'function') {
                    this._eventHandler.subscribe(this._addon.onCommand, function (event, args) {
                        _this._contextMenuOptions.onCommand(event, args);
                    });
                }
                if (this._contextMenuOptions && typeof this._contextMenuOptions.onOptionSelected === 'function') {
                    this._eventHandler.subscribe(this._addon.onOptionSelected, function (event, args) {
                        _this._contextMenuOptions.onOptionSelected(event, args);
                    });
                }
                if (this._contextMenuOptions && typeof this._contextMenuOptions.onBeforeMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onBeforeMenuShow, function (event, args) {
                        _this._contextMenuOptions.onBeforeMenuShow(event, args);
                    });
                }
                if (this._contextMenuOptions && typeof this._contextMenuOptions.onBeforeMenuClose === 'function') {
                    this._eventHandler.subscribe(this._addon.onBeforeMenuClose, function (event, args) {
                        _this._contextMenuOptions.onBeforeMenuClose(event, args);
                    });
                }
                if (this._contextMenuOptions && typeof this._contextMenuOptions.onAfterMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onAfterMenuShow, function (event, args) {
                        _this._contextMenuOptions.onAfterMenuShow(event, args);
                    });
                }
            }
            return this._addon;
        }
        return null;
    };
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    ContextMenuExtension.prototype.translateContextMenu = function () {
        if (this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.contextMenu) {
            var contextMenu = this.sharedService.gridOptions.contextMenu;
            var menuOptions = {};
            if (contextMenu.commandTitleKey) {
                contextMenu.commandTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(contextMenu.commandTitleKey) || contextMenu.commandTitle;
                menuOptions.commandTitle = contextMenu.commandTitle;
            }
            if (contextMenu.optionTitleKey) {
                contextMenu.optionTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(contextMenu.optionTitleKey) || contextMenu.optionTitle;
                menuOptions.optionTitle = contextMenu.optionTitle;
            }
            var originalCommandItems = this._userOriginalContextMenu && Array.isArray(this._userOriginalContextMenu.commandItems) ? this._userOriginalContextMenu.commandItems : [];
            contextMenu.commandItems = tslib_1.__spread(originalCommandItems, this.addMenuCustomCommands(originalCommandItems));
            menuOptions.commandItems = contextMenu.commandItems; // copy it also to the menuOptions else they won't be translated when locale changes
            // translate all command/options and resort them afterward
            this.extensionUtility.translateItems(contextMenu.commandItems || [], 'titleKey', 'title');
            this.extensionUtility.translateItems(contextMenu.optionItems || [], 'titleKey', 'title');
            this.extensionUtility.sortItems(contextMenu.commandItems || [], 'positionOrder');
            this.extensionUtility.sortItems(contextMenu.optionItems || [], 'positionOrder');
            // update the title options so that it has latest translated values
            if (this._addon && this._addon.setOptions) {
                this._addon.setOptions(menuOptions);
            }
        }
    };
    // --
    // private functions
    // ------------------
    /** Create Context Menu with Custom Commands (copy cell value, export) */
    ContextMenuExtension.prototype.addMenuCustomCommands = function (originalCustomItems) {
        var _this = this;
        var menuCustomItems = [];
        var gridOptions = this.sharedService && this.sharedService.gridOptions || {};
        var contextMenu = gridOptions && gridOptions.contextMenu;
        var dataView = this.sharedService && this.sharedService.dataView;
        var translationPrefix = getTranslationPrefix(gridOptions);
        // show context menu: Copy (cell value)
        if (contextMenu && !contextMenu.hideCopyCellValueCommand) {
            var commandName_1 = 'copy';
            if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_1; })) {
                menuCustomItems.push({
                    iconCssClass: contextMenu.iconCopyCellValueCommand || 'fa fa-clone',
                    title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "COPY", 'TEXT_COPY'),
                    disabled: false,
                    command: commandName_1,
                    positionOrder: 50,
                    action: function (e, args) {
                        _this.copyToClipboard(args);
                    },
                    itemUsabilityOverride: function (args) {
                        // make sure there's an item to copy before enabling this command
                        var columnDef = args && args.column;
                        var dataContext = args && args.dataContext;
                        if (typeof columnDef.queryFieldNameGetterFn === 'function') {
                            var cellValue = _this.getCellValueFromQueryFieldGetter(columnDef, dataContext);
                            if (cellValue !== '' && cellValue !== undefined) {
                                return true;
                            }
                        }
                        else if (columnDef && dataContext.hasOwnProperty(columnDef.field)) {
                            return dataContext[columnDef.field] !== '' && dataContext[columnDef.field] !== null && dataContext[columnDef.field] !== undefined;
                        }
                        return false;
                    }
                });
            }
        }
        // show context menu: Export to file
        if (gridOptions && gridOptions.enableExport && contextMenu && !contextMenu.hideExportCsvCommand) {
            var commandName_2 = 'export-csv';
            if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_2; })) {
                menuCustomItems.push({
                    iconCssClass: contextMenu.iconExportCsvCommand || 'fa fa-download',
                    title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "EXPORT_TO_CSV", 'TEXT_EXPORT_TO_CSV'),
                    disabled: false,
                    command: commandName_2,
                    positionOrder: 51,
                    action: function () { return _this.exportService.exportToFile({
                        delimiter: DelimiterType.comma,
                        filename: 'export',
                        format: FileType.csv,
                        useUtf8WithBom: true,
                    }); },
                });
            }
        }
        // show context menu: Export to Excel
        if (gridOptions && gridOptions.enableExcelExport && contextMenu && !contextMenu.hideExportExcelCommand) {
            var commandName_3 = 'export-excel';
            if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_3; })) {
                menuCustomItems.push({
                    iconCssClass: contextMenu.iconExportExcelCommand || 'fa fa-file-excel-o text-success',
                    title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "EXPORT_TO_EXCEL", 'TEXT_EXPORT_TO_EXCEL'),
                    disabled: false,
                    command: commandName_3,
                    positionOrder: 52,
                    action: function () { return _this.excelExportService.exportToExcel({
                        filename: 'export',
                        format: FileType.xlsx,
                    }); },
                });
            }
        }
        // show context menu: export to text file as tab delimited
        if (gridOptions && gridOptions.enableExport && contextMenu && !contextMenu.hideExportTextDelimitedCommand) {
            var commandName_4 = 'export-text-delimited';
            if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_4; })) {
                menuCustomItems.push({
                    iconCssClass: contextMenu.iconExportTextDelimitedCommand || 'fa fa-download',
                    title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "EXPORT_TO_TAB_DELIMITED", 'TEXT_EXPORT_TO_TAB_DELIMITED'),
                    disabled: false,
                    command: commandName_4,
                    positionOrder: 53,
                    action: function () { return _this.exportService.exportToFile({
                        delimiter: DelimiterType.tab,
                        filename: 'export',
                        format: FileType.txt,
                        useUtf8WithBom: true,
                    }); },
                });
            }
        }
        // -- Grouping Commands
        if (gridOptions && (gridOptions.enableGrouping || gridOptions.enableDraggableGrouping || gridOptions.enableTreeData)) {
            // add a divider (separator) between the top sort commands and the other clear commands
            if (contextMenu && !contextMenu.hideCopyCellValueCommand) {
                menuCustomItems.push({ divider: true, command: '', positionOrder: 54 });
            }
            // show context menu: Clear Grouping
            if (gridOptions && !gridOptions.enableTreeData && contextMenu && !contextMenu.hideClearAllGrouping) {
                var commandName_5 = 'clear-grouping';
                if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_5; })) {
                    menuCustomItems.push({
                        iconCssClass: contextMenu.iconClearGroupingCommand || 'fa fa-times',
                        title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "CLEAR_ALL_GROUPING", 'TEXT_CLEAR_ALL_GROUPING'),
                        disabled: false,
                        command: commandName_5,
                        positionOrder: 55,
                        action: function () { return dataView.setGrouping([]); },
                        itemUsabilityOverride: function () {
                            // only enable the command when there's an actually grouping in play
                            var groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();
                            return Array.isArray(groupingArray) && groupingArray.length > 0;
                        }
                    });
                }
            }
            // show context menu: Collapse all Groups
            if (gridOptions && contextMenu && !contextMenu.hideCollapseAllGroups) {
                var commandName_6 = 'collapse-all-groups';
                if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_6; })) {
                    menuCustomItems.push({
                        iconCssClass: contextMenu.iconCollapseAllGroupsCommand || 'fa fa-compress',
                        title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "COLLAPSE_ALL_GROUPS", 'TEXT_COLLAPSE_ALL_GROUPS'),
                        disabled: false,
                        command: commandName_6,
                        positionOrder: 56,
                        action: function () {
                            if (gridOptions.enableTreeData) {
                                _this.treeDataService.toggleTreeDataCollapse(true);
                            }
                            else {
                                dataView.collapseAllGroups();
                            }
                        },
                        itemUsabilityOverride: function () {
                            if (gridOptions.enableTreeData) {
                                return true;
                            }
                            // only enable the command when there's an actually grouping in play
                            var groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();
                            return Array.isArray(groupingArray) && groupingArray.length > 0;
                        }
                    });
                }
            }
            // show context menu: Expand all Groups
            if (gridOptions && contextMenu && !contextMenu.hideExpandAllGroups) {
                var commandName_7 = 'expand-all-groups';
                if (!originalCustomItems.find(function (item) { return item.hasOwnProperty('command') && item.command === commandName_7; })) {
                    menuCustomItems.push({
                        iconCssClass: contextMenu.iconExpandAllGroupsCommand || 'fa fa-expand',
                        title: this.extensionUtility.translateWhenEnabledAndServiceExist(translationPrefix + "EXPAND_ALL_GROUPS", 'TEXT_EXPAND_ALL_GROUPS'),
                        disabled: false,
                        command: commandName_7,
                        positionOrder: 57,
                        action: function () {
                            if (gridOptions.enableTreeData) {
                                _this.treeDataService.toggleTreeDataCollapse(false);
                            }
                            else {
                                dataView.expandAllGroups();
                            }
                        },
                        itemUsabilityOverride: function () {
                            if (gridOptions.enableTreeData) {
                                return true;
                            }
                            // only enable the command when there's an actually grouping in play
                            var groupingArray = dataView && dataView.getGrouping && dataView.getGrouping();
                            return Array.isArray(groupingArray) && groupingArray.length > 0;
                        }
                    });
                }
            }
        }
        return menuCustomItems;
    };
    /**
     * First get the value, if "exportWithFormatter" is set then we'll use the formatter output
     * Then we create the DOM trick to copy a text value by creating a fake <div> that is not shown to the user
     * and from there we can call the execCommand 'copy' command and expect the value to be in clipboard
     * @param args
     */
    ContextMenuExtension.prototype.copyToClipboard = function (args) {
        try {
            if (args && args.grid && args.command) {
                // get the value, if "exportWithFormatter" is set then we'll use the formatter output
                var gridOptions = this.sharedService && this.sharedService.gridOptions || {};
                var cell = args && args.cell || 0;
                var row = args && args.row || 0;
                var columnDef = args && args.column;
                var dataContext = args && args.dataContext;
                var grid = this.sharedService && this.sharedService.grid;
                var exportOptions = gridOptions && (gridOptions.excelExportOptions || gridOptions.exportOptions);
                var textToCopy = exportWithFormatterWhenDefined(row, cell, dataContext, columnDef, grid, exportOptions);
                if (typeof columnDef.queryFieldNameGetterFn === 'function') {
                    textToCopy = this.getCellValueFromQueryFieldGetter(columnDef, dataContext);
                }
                // create fake <div> to copy into clipboard & delete it from the DOM once we're done
                var range = document.createRange();
                var tmpElem = $('<div>').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).text(textToCopy);
                $('body').append(tmpElem);
                range.selectNodeContents(tmpElem.get(0));
                var selection = window.getSelection();
                if (selection && selection.addRange && selection.removeAllRanges) {
                    selection.removeAllRanges();
                    selection.addRange(range);
                    var success = document.execCommand('copy', false, textToCopy);
                    if (success) {
                        tmpElem.remove();
                    }
                }
            }
        }
        catch (e) { }
    };
    /**
     * When a queryFieldNameGetterFn is defined, then get the value from that getter callback function
     * @param columnDef
     * @param dataContext
     * @return cellValue
     */
    ContextMenuExtension.prototype.getCellValueFromQueryFieldGetter = function (columnDef, dataContext) {
        var cellValue = '';
        if (typeof columnDef.queryFieldNameGetterFn === 'function') {
            var queryFieldName = columnDef.queryFieldNameGetterFn(dataContext);
            // get the cell value from the item or when it's a dot notation then exploded the item and get the final value
            if (queryFieldName && queryFieldName.indexOf('.') >= 0) {
                cellValue = getDescendantProperty(dataContext, queryFieldName);
            }
            else {
                cellValue = dataContext[queryFieldName];
            }
        }
        return cellValue;
    };
    ContextMenuExtension.ctorParameters = function () { return [
        { type: ExcelExportService },
        { type: ExportService },
        { type: ExtensionUtility },
        { type: SharedService },
        { type: TreeDataService },
        { type: TranslateService, decorators: [{ type: Optional }] }
    ]; };
    ContextMenuExtension = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(5, Optional())
    ], ContextMenuExtension);
    return ContextMenuExtension;
}());
export { ContextMenuExtension };
//# sourceMappingURL=data:application/json;base64,