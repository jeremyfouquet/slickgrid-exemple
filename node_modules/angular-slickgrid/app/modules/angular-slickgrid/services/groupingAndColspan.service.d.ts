import { SlickEventHandler } from './../models/index';
import { ExtensionUtility } from '../extensions/extensionUtility';
import { ExtensionService } from './extension.service';
import { ResizerService } from './resizer.service';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class GroupingAndColspanService {
    private extensionUtility;
    private extensionService;
    private resizerService;
    private sharedService;
    private _eventHandler;
    private _grid;
    private subscriptions;
    constructor(extensionUtility: ExtensionUtility, extensionService: ExtensionService, resizerService: ResizerService, sharedService: SharedService);
    /** Getter of the SlickGrid Event Handler */
    readonly eventHandler: SlickEventHandler;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    /** Getter for the Column Definitions pulled through the Grid Object */
    private readonly _columnDefinitions;
    init(grid: any, dataView: any): void;
    dispose(): void;
    /** call "renderPreHeaderRowGroupingTitles()" with a setTimeout delay */
    delayRenderPreHeaderRowGroupingTitles(delay?: number): void;
    /** Create or Render the Pre-Header Row Grouping Titles */
    renderPreHeaderRowGroupingTitles(): void;
    renderHeaderGroups(preHeaderPanel: any, start: number, end: number): void;
    /** Translate Column Group texts and re-render them afterward. */
    translateGroupingAndColSpan(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupingAndColspanService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GroupingAndColspanService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBpbmdBbmRDb2xzcGFuLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZ3JvdXBpbmdBbmRDb2xzcGFuLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbGlja0V2ZW50SGFuZGxlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVXRpbGl0eSB9IGZyb20gJy4uL2V4dGVuc2lvbnMvZXh0ZW5zaW9uVXRpbGl0eSc7XHJcbmltcG9ydCB7IEV4dGVuc2lvblNlcnZpY2UgfSBmcm9tICcuL2V4dGVuc2lvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmVzaXplclNlcnZpY2UgfSBmcm9tICcuL3Jlc2l6ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoYXJlZFNlcnZpY2UgfSBmcm9tICcuL3NoYXJlZC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR3JvdXBpbmdBbmRDb2xzcGFuU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGV4dGVuc2lvblV0aWxpdHk7XHJcbiAgICBwcml2YXRlIGV4dGVuc2lvblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJlc2l6ZXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBzaGFyZWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBfZ3JpZDtcclxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcclxuICAgIGNvbnN0cnVjdG9yKGV4dGVuc2lvblV0aWxpdHk6IEV4dGVuc2lvblV0aWxpdHksIGV4dGVuc2lvblNlcnZpY2U6IEV4dGVuc2lvblNlcnZpY2UsIHJlc2l6ZXJTZXJ2aWNlOiBSZXNpemVyU2VydmljZSwgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSk7XHJcbiAgICAvKiogR2V0dGVyIG9mIHRoZSBTbGlja0dyaWQgRXZlbnQgSGFuZGxlciAqL1xyXG4gICAgcmVhZG9ubHkgZXZlbnRIYW5kbGVyOiBTbGlja0V2ZW50SGFuZGxlcjtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncmlkT3B0aW9ucztcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBDb2x1bW4gRGVmaW5pdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb2x1bW5EZWZpbml0aW9ucztcclxuICAgIGluaXQoZ3JpZDogYW55LCBkYXRhVmlldzogYW55KTogdm9pZDtcclxuICAgIGRpc3Bvc2UoKTogdm9pZDtcclxuICAgIC8qKiBjYWxsIFwicmVuZGVyUHJlSGVhZGVyUm93R3JvdXBpbmdUaXRsZXMoKVwiIHdpdGggYSBzZXRUaW1lb3V0IGRlbGF5ICovXHJcbiAgICBkZWxheVJlbmRlclByZUhlYWRlclJvd0dyb3VwaW5nVGl0bGVzKGRlbGF5PzogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKiBDcmVhdGUgb3IgUmVuZGVyIHRoZSBQcmUtSGVhZGVyIFJvdyBHcm91cGluZyBUaXRsZXMgKi9cclxuICAgIHJlbmRlclByZUhlYWRlclJvd0dyb3VwaW5nVGl0bGVzKCk6IHZvaWQ7XHJcbiAgICByZW5kZXJIZWFkZXJHcm91cHMocHJlSGVhZGVyUGFuZWw6IGFueSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqIFRyYW5zbGF0ZSBDb2x1bW4gR3JvdXAgdGV4dHMgYW5kIHJlLXJlbmRlciB0aGVtIGFmdGVyd2FyZC4gKi9cclxuICAgIHRyYW5zbGF0ZUdyb3VwaW5nQW5kQ29sU3BhbigpOiB2b2lkO1xyXG59XHJcbiJdfQ==