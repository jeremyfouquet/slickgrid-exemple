import { BackendService, Column, ColumnFilters, ColumnSort, CurrentFilter, CurrentPagination, CurrentSorter, FilterChangedArgs, OdataOption, Pagination, PaginationChangedArgs, SortChangedArgs } from './../models/index';
import { OdataQueryBuilderService } from './odataQueryBuilder.service';
import * as ɵngcc0 from '@angular/core';
export declare class GridOdataService implements BackendService {
    private _currentFilters;
    private _currentPagination;
    private _currentSorters;
    private _columnDefinitions;
    private _grid;
    private _odataService;
    options: Partial<OdataOption>;
    pagination: Pagination | undefined;
    defaultOptions: OdataOption;
    /** Getter for the Column Definitions */
    readonly columnDefinitions: Column<any>[];
    /** Getter for the Odata Service */
    readonly odataService: OdataQueryBuilderService;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    constructor();
    init(serviceOptions: Partial<OdataOption>, pagination?: Pagination, grid?: any): void;
    buildQuery(): string;
    clearFilters(): void;
    clearSorters(): void;
    updateOptions(serviceOptions?: Partial<OdataOption>): void;
    removeColumnFilter(fieldName: string): void;
    /** Get the Filters that are currently used by the grid */
    getCurrentFilters(): CurrentFilter[];
    /** Get the Pagination that is currently used by the grid */
    getCurrentPagination(): CurrentPagination;
    /** Get the Sorters that are currently used by the grid */
    getCurrentSorters(): CurrentSorter[];
    /**
     * Mapper for mathematical operators (ex.: <= is "le", > is "gt")
     * @param string operator
     * @returns string map
     */
    mapOdataOperator(operator: string): string;
    resetPaginationOptions(): void;
    saveColumnFilter(fieldName: string, value: string, terms?: any[]): void;
    processOnFilterChanged(event: Event, args: FilterChangedArgs): string;
    processOnPaginationChanged(event: Event, args: PaginationChangedArgs): string;
    processOnSortChanged(event: Event, args: SortChangedArgs): string;
    /**
     * loop through all columns to inspect filters & update backend service filters
     * @param columnFilters
     */
    updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically?: boolean): void;
    /**
     * Update the pagination component with it's new page number and size
     * @param newPage
     * @param pageSize
     */
    updatePagination(newPage: number, pageSize: number): void;
    /**
     * loop through all columns to inspect sorters & update backend service orderBy
     * @param columnFilters
     */
    updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]): string;
    /**
     * Cast provided filters (could be in multiple format) into an array of ColumnFilter
     * @param columnFilters
     */
    private castFilterToColumnFilters;
    private odataQueryVersionWrapper;
    /**
     * Filter by a search date, the searchTerms might be a single value or range of dates (2 searchTerms OR 1 string separated by 2 dots "date1..date2")
     * Also depending on the OData version number, the output will be different, previous version must wrap dates with DateTime
     * - version 2-3:: Finish gt DateTime'2019-08-12T00:00:00Z'
     * - version 4:: Finish gt 2019-08-12T00:00:00Z
     */
    private filterBySearchDate;
    /**
     * Filter by a range of searchTerms (2 searchTerms OR 1 string separated by 2 dots "value1..value2")
     */
    private filterBySearchTermRange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridOdataService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridOdataService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1vZGF0YS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdyaWQtb2RhdGEuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFja2VuZFNlcnZpY2UsIENvbHVtbiwgQ29sdW1uRmlsdGVycywgQ29sdW1uU29ydCwgQ3VycmVudEZpbHRlciwgQ3VycmVudFBhZ2luYXRpb24sIEN1cnJlbnRTb3J0ZXIsIEZpbHRlckNoYW5nZWRBcmdzLCBPZGF0YU9wdGlvbiwgUGFnaW5hdGlvbiwgUGFnaW5hdGlvbkNoYW5nZWRBcmdzLCBTb3J0Q2hhbmdlZEFyZ3MgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IE9kYXRhUXVlcnlCdWlsZGVyU2VydmljZSB9IGZyb20gJy4vb2RhdGFRdWVyeUJ1aWxkZXIuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyaWRPZGF0YVNlcnZpY2UgaW1wbGVtZW50cyBCYWNrZW5kU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9jdXJyZW50RmlsdGVycztcclxuICAgIHByaXZhdGUgX2N1cnJlbnRQYWdpbmF0aW9uO1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudFNvcnRlcnM7XHJcbiAgICBwcml2YXRlIF9jb2x1bW5EZWZpbml0aW9ucztcclxuICAgIHByaXZhdGUgX2dyaWQ7XHJcbiAgICBwcml2YXRlIF9vZGF0YVNlcnZpY2U7XHJcbiAgICBvcHRpb25zOiBQYXJ0aWFsPE9kYXRhT3B0aW9uPjtcclxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb24gfCB1bmRlZmluZWQ7XHJcbiAgICBkZWZhdWx0T3B0aW9uczogT2RhdGFPcHRpb247XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgQ29sdW1uIERlZmluaXRpb25zICovXHJcbiAgICByZWFkb25seSBjb2x1bW5EZWZpbml0aW9uczogQ29sdW1uPGFueT5bXTtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBPZGF0YSBTZXJ2aWNlICovXHJcbiAgICByZWFkb25seSBvZGF0YVNlcnZpY2U6IE9kYXRhUXVlcnlCdWlsZGVyU2VydmljZTtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncmlkT3B0aW9ucztcclxuICAgIGNvbnN0cnVjdG9yKCk7XHJcbiAgICBpbml0KHNlcnZpY2VPcHRpb25zOiBQYXJ0aWFsPE9kYXRhT3B0aW9uPiwgcGFnaW5hdGlvbj86IFBhZ2luYXRpb24sIGdyaWQ/OiBhbnkpOiB2b2lkO1xyXG4gICAgYnVpbGRRdWVyeSgpOiBzdHJpbmc7XHJcbiAgICBjbGVhckZpbHRlcnMoKTogdm9pZDtcclxuICAgIGNsZWFyU29ydGVycygpOiB2b2lkO1xyXG4gICAgdXBkYXRlT3B0aW9ucyhzZXJ2aWNlT3B0aW9ucz86IFBhcnRpYWw8T2RhdGFPcHRpb24+KTogdm9pZDtcclxuICAgIHJlbW92ZUNvbHVtbkZpbHRlcihmaWVsZE5hbWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKiogR2V0IHRoZSBGaWx0ZXJzIHRoYXQgYXJlIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBncmlkICovXHJcbiAgICBnZXRDdXJyZW50RmlsdGVycygpOiBDdXJyZW50RmlsdGVyW107XHJcbiAgICAvKiogR2V0IHRoZSBQYWdpbmF0aW9uIHRoYXQgaXMgY3VycmVudGx5IHVzZWQgYnkgdGhlIGdyaWQgKi9cclxuICAgIGdldEN1cnJlbnRQYWdpbmF0aW9uKCk6IEN1cnJlbnRQYWdpbmF0aW9uO1xyXG4gICAgLyoqIEdldCB0aGUgU29ydGVycyB0aGF0IGFyZSBjdXJyZW50bHkgdXNlZCBieSB0aGUgZ3JpZCAqL1xyXG4gICAgZ2V0Q3VycmVudFNvcnRlcnMoKTogQ3VycmVudFNvcnRlcltdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBwZXIgZm9yIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMgKGV4LjogPD0gaXMgXCJsZVwiLCA+IGlzIFwiZ3RcIilcclxuICAgICAqIEBwYXJhbSBzdHJpbmcgb3BlcmF0b3JcclxuICAgICAqIEByZXR1cm5zIHN0cmluZyBtYXBcclxuICAgICAqL1xyXG4gICAgbWFwT2RhdGFPcGVyYXRvcihvcGVyYXRvcjogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgcmVzZXRQYWdpbmF0aW9uT3B0aW9ucygpOiB2b2lkO1xyXG4gICAgc2F2ZUNvbHVtbkZpbHRlcihmaWVsZE5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdGVybXM/OiBhbnlbXSk6IHZvaWQ7XHJcbiAgICBwcm9jZXNzT25GaWx0ZXJDaGFuZ2VkKGV2ZW50OiBFdmVudCwgYXJnczogRmlsdGVyQ2hhbmdlZEFyZ3MpOiBzdHJpbmc7XHJcbiAgICBwcm9jZXNzT25QYWdpbmF0aW9uQ2hhbmdlZChldmVudDogRXZlbnQsIGFyZ3M6IFBhZ2luYXRpb25DaGFuZ2VkQXJncyk6IHN0cmluZztcclxuICAgIHByb2Nlc3NPblNvcnRDaGFuZ2VkKGV2ZW50OiBFdmVudCwgYXJnczogU29ydENoYW5nZWRBcmdzKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBsb29wIHRocm91Z2ggYWxsIGNvbHVtbnMgdG8gaW5zcGVjdCBmaWx0ZXJzICYgdXBkYXRlIGJhY2tlbmQgc2VydmljZSBmaWx0ZXJzXHJcbiAgICAgKiBAcGFyYW0gY29sdW1uRmlsdGVyc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGVGaWx0ZXJzKGNvbHVtbkZpbHRlcnM6IENvbHVtbkZpbHRlcnMgfCBDdXJyZW50RmlsdGVyW10sIGlzVXBkYXRlZEJ5UHJlc2V0T3JEeW5hbWljYWxseT86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50IHdpdGggaXQncyBuZXcgcGFnZSBudW1iZXIgYW5kIHNpemVcclxuICAgICAqIEBwYXJhbSBuZXdQYWdlXHJcbiAgICAgKiBAcGFyYW0gcGFnZVNpemVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlUGFnaW5hdGlvbihuZXdQYWdlOiBudW1iZXIsIHBhZ2VTaXplOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBsb29wIHRocm91Z2ggYWxsIGNvbHVtbnMgdG8gaW5zcGVjdCBzb3J0ZXJzICYgdXBkYXRlIGJhY2tlbmQgc2VydmljZSBvcmRlckJ5XHJcbiAgICAgKiBAcGFyYW0gY29sdW1uRmlsdGVyc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGVTb3J0ZXJzKHNvcnRDb2x1bW5zPzogQ29sdW1uU29ydFtdLCBwcmVzZXRTb3J0ZXJzPzogQ3VycmVudFNvcnRlcltdKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYXN0IHByb3ZpZGVkIGZpbHRlcnMgKGNvdWxkIGJlIGluIG11bHRpcGxlIGZvcm1hdCkgaW50byBhbiBhcnJheSBvZiBDb2x1bW5GaWx0ZXJcclxuICAgICAqIEBwYXJhbSBjb2x1bW5GaWx0ZXJzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FzdEZpbHRlclRvQ29sdW1uRmlsdGVycztcclxuICAgIHByaXZhdGUgb2RhdGFRdWVyeVZlcnNpb25XcmFwcGVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGaWx0ZXIgYnkgYSBzZWFyY2ggZGF0ZSwgdGhlIHNlYXJjaFRlcm1zIG1pZ2h0IGJlIGEgc2luZ2xlIHZhbHVlIG9yIHJhbmdlIG9mIGRhdGVzICgyIHNlYXJjaFRlcm1zIE9SIDEgc3RyaW5nIHNlcGFyYXRlZCBieSAyIGRvdHMgXCJkYXRlMS4uZGF0ZTJcIilcclxuICAgICAqIEFsc28gZGVwZW5kaW5nIG9uIHRoZSBPRGF0YSB2ZXJzaW9uIG51bWJlciwgdGhlIG91dHB1dCB3aWxsIGJlIGRpZmZlcmVudCwgcHJldmlvdXMgdmVyc2lvbiBtdXN0IHdyYXAgZGF0ZXMgd2l0aCBEYXRlVGltZVxyXG4gICAgICogLSB2ZXJzaW9uIDItMzo6IEZpbmlzaCBndCBEYXRlVGltZScyMDE5LTA4LTEyVDAwOjAwOjAwWidcclxuICAgICAqIC0gdmVyc2lvbiA0OjogRmluaXNoIGd0IDIwMTktMDgtMTJUMDA6MDA6MDBaXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZmlsdGVyQnlTZWFyY2hEYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGaWx0ZXIgYnkgYSByYW5nZSBvZiBzZWFyY2hUZXJtcyAoMiBzZWFyY2hUZXJtcyBPUiAxIHN0cmluZyBzZXBhcmF0ZWQgYnkgMiBkb3RzIFwidmFsdWUxLi52YWx1ZTJcIilcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJCeVNlYXJjaFRlcm1SYW5nZTtcclxufVxyXG4iXX0=