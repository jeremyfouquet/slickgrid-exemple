import { Subject } from 'rxjs';
import { Column, ColumnSort, CurrentSorter, EmitterType, SlickEventHandler } from './../models/index';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class SortService {
    private sharedService;
    private _currentLocalSorters;
    private _eventHandler;
    private _grid;
    private _isBackendGrid;
    private httpCancelRequests$;
    onSortChanged: Subject<CurrentSorter[]>;
    onSortCleared: Subject<boolean>;
    constructor(sharedService: SharedService);
    /** Getter of the SlickGrid Event Handler */
    readonly eventHandler: SlickEventHandler;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    /** Getter for the Column Definitions pulled through the Grid Object */
    private readonly _columnDefinitions;
    /** Getter of SlickGrid DataView object */
    private readonly _dataView;
    /**
     * Bind a backend sort (single/multi) hook to the grid
     * @param grid SlickGrid Grid object
     * @param dataView SlickGrid DataView object
     */
    bindBackendOnSort(grid: any): void;
    /**
     * Bind a local sort (single/multi) hook to the grid
     * @param grid SlickGrid Grid object
     * @param gridOptions Grid Options object
     * @param dataView
     */
    bindLocalOnSort(grid: any): void;
    handleLocalOnSort(_e: any, args: any): void;
    clearSortByColumnId(event: Event | undefined, columnId: string | number): void;
    /**
     * Clear Sorting
     * - 1st, remove the SlickGrid sort icons (this setSortColumns function call really does only that)
     * - 2nd, we also need to trigger a sort change
     *   - for a backend grid, we will trigger a backend sort changed with an empty sort columns array
     *   - however for a local grid, we need to pass a sort column and so we will sort by the 1st column
     * @param trigger query event after executing clear filter?
     */
    clearSorting(triggerQueryEvent?: boolean): void;
    dispose(): void;
    /**
     * Toggle the Sorting Functionality
     * @param {boolean} isSortingDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True
     * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True
     */
    disableSortFunctionality(isSortingDisabled?: boolean, clearSortingWhenDisabled?: boolean): void;
    /**
     * Toggle the Sorting functionality
     * @param {boolean} clearSortingWhenDisabled - when disabling the sorting, do we also want to clear the sorting as well? Defaults to True
     */
    toggleSortFunctionality(clearSortingOnDisable?: boolean): void;
    /**
     * A simple function that is binded to the subscriber and emit a change when the sort is called.
     * Other services, like Pagination, can then subscribe to it.
     * @param sender
     */
    emitSortChanged(sender: EmitterType, currentLocalSorters?: CurrentSorter[]): void;
    getCurrentLocalSorters(): CurrentSorter[];
    /**
     * Get current column sorts,
     * If a column is passed as an argument, that will be exclusion so we won't add this column to our output array since it is already in the array.
     * The usage of this method is that we want to know the sort prior to calling the next sorting command
     */
    getCurrentColumnSorts(excludedColumnId?: string): {
        sortCol: Column;
        sortAsc: boolean;
    }[];
    /** Load defined Sorting (sorters) into the grid */
    loadGridSorters(sorters: CurrentSorter[]): ColumnSort[];
    /** Process the initial sort, typically it will sort ascending by the column that has the Tree Data unless user specifies a different initialSort */
    processTreeDataInitialSort(): void;
    onBackendSortChanged(event: Event, args: {
        multiColumnSort?: boolean;
        grid: any;
        sortCols: ColumnSort[];
        clearSortTriggered?: boolean;
    }): void;
    /** When a Sort Changes on a Local grid (JSON dataset) */
    onLocalSortChanged(grid: any, sortColumns: ColumnSort[], forceReSort?: boolean, emitSortChanged?: boolean): void;
    /** Call a local grid sort by its default sort field id (user can customize default field by configuring "defaultColumnSortFieldId" in the grid options, defaults to "id") */
    sortLocalGridByDefaultSortFieldId(): void;
    sortComparers(sortColumns: ColumnSort[], dataRow1: any, dataRow2: any): number;
    sortComparer(sortColumn: ColumnSort, dataRow1: any, dataRow2: any, querySortField?: string): number | undefined;
    sortTreeData(hierarchicalArray: any[], sortColumns: ColumnSort[]): void;
    /** Sort the Tree Children of a hierarchical dataset by recursion */
    sortTreeChild(hierarchicalArray: any[], sortColumn: ColumnSort, treeLevel: number): void;
    /**
     * Update Sorting (sorters) dynamically just by providing an array of sorter(s).
     * You can also choose emit (default) a Sort Changed event that will be picked by the Grid State Service.
     *
     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,
     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.
     * @param sorters array
     * @param triggerEvent defaults to True, do we want to emit a sort changed event?
     * @param triggerBackendQuery defaults to True, which will query the backend.
     */
    updateSorting(sorters: CurrentSorter[], emitChangedEvent?: boolean, triggerBackendQuery?: boolean): void;
    /**
     * Loop through all column definitions and do the following 2 things
     * 1. disable/enable the "sortable" property of each column
     * 2. loop through each Header Menu commands and change the "hidden" commands to show/hide depending if it's enabled/disabled
     * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.
     * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)
     * @param {boolean} isDisabling - are we disabling the sort functionality? Defaults to true
     */
    private disableAllSortingCommands;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SortService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SortService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,