import { GridOption } from './../models/index';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface GridDimension {
    height?: number;
    width?: number;
    heightWithPagination?: number;
}
export declare class ResizerService {
    private _fixedHeight;
    private _fixedWidth;
    private _grid;
    private _gridDomElm;
    private _gridContainerElm;
    private _lastDimensions;
    private _timer;
    private _resizePaused;
    onGridAfterResize: Subject<GridDimension>;
    onGridBeforeResize: Subject<Event>;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    private readonly _gridUid;
    init(grid: any, fixedDimensions?: GridDimension): void;
    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space
     * Options: we could also provide a % factor to resize on each height/width independently
     */
    bindAutoResizeDataGrid(newSizes?: GridDimension): any;
    handleResizeGrid(newSizes: GridDimension, event: Event): void;
    /**
     * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation
     * object gridOptions
     */
    calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null;
    /**
     * Dispose function when element is destroyed
     */
    dispose(): void;
    /**
     * Return the last resize dimensions used by the service
     * @return last dimensions
     */
    getLastResizeDimensions(): GridDimension;
    /** Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to. */
    pauseResizer(isResizePaused: boolean): void;
    /** Resize the datagrid to fit the browser height & width */
    resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension>;
    resizeGridCallback(newSizes: GridDimension): GridDimension;
    resizeGridWithDimensions(newSizes?: GridDimension): GridDimension;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ResizerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInJlc2l6ZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyaWRPcHRpb24gfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuZXhwb3J0IGludGVyZmFjZSBHcmlkRGltZW5zaW9uIHtcclxuICAgIGhlaWdodD86IG51bWJlcjtcclxuICAgIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgaGVpZ2h0V2l0aFBhZ2luYXRpb24/OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVzaXplclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfZml4ZWRIZWlnaHQ7XHJcbiAgICBwcml2YXRlIF9maXhlZFdpZHRoO1xyXG4gICAgcHJpdmF0ZSBfZ3JpZDtcclxuICAgIHByaXZhdGUgX2dyaWREb21FbG07XHJcbiAgICBwcml2YXRlIF9ncmlkQ29udGFpbmVyRWxtO1xyXG4gICAgcHJpdmF0ZSBfbGFzdERpbWVuc2lvbnM7XHJcbiAgICBwcml2YXRlIF90aW1lcjtcclxuICAgIHByaXZhdGUgX3Jlc2l6ZVBhdXNlZDtcclxuICAgIG9uR3JpZEFmdGVyUmVzaXplOiBTdWJqZWN0PEdyaWREaW1lbnNpb24+O1xyXG4gICAgb25HcmlkQmVmb3JlUmVzaXplOiBTdWJqZWN0PEV2ZW50PjtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncmlkT3B0aW9ucztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2dyaWRVaWQ7XHJcbiAgICBpbml0KGdyaWQ6IGFueSwgZml4ZWREaW1lbnNpb25zPzogR3JpZERpbWVuc2lvbik6IHZvaWQ7XHJcbiAgICAvKiogQmluZCBhbiBhdXRvIHJlc2l6ZSB0cmlnZ2VyIG9uIHRoZSBkYXRhZ3JpZCwgaWYgdGhhdCBpcyBlbmFibGUgdGhlbiBpdCB3aWxsIHJlc2l6ZSBpdHNlbGYgdG8gdGhlIGF2YWlsYWJsZSBzcGFjZVxyXG4gICAgICogT3B0aW9uczogd2UgY291bGQgYWxzbyBwcm92aWRlIGEgJSBmYWN0b3IgdG8gcmVzaXplIG9uIGVhY2ggaGVpZ2h0L3dpZHRoIGluZGVwZW5kZW50bHlcclxuICAgICAqL1xyXG4gICAgYmluZEF1dG9SZXNpemVEYXRhR3JpZChuZXdTaXplcz86IEdyaWREaW1lbnNpb24pOiBhbnk7XHJcbiAgICBoYW5kbGVSZXNpemVHcmlkKG5ld1NpemVzOiBHcmlkRGltZW5zaW9uLCBldmVudDogRXZlbnQpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGRhdGFncmlkIG5ldyBoZWlnaHQvd2lkdGggZnJvbSB0aGUgYXZhaWxhYmxlIHNwYWNlLCBhbHNvIGNvbnNpZGVyIHRoYXQgYSAlIGZhY3RvciBtaWdodCBiZSBhcHBsaWVkIHRvIGNhbGN1bGF0aW9uXHJcbiAgICAgKiBvYmplY3QgZ3JpZE9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY2FsY3VsYXRlR3JpZE5ld0RpbWVuc2lvbnMoZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb24pOiBHcmlkRGltZW5zaW9uIHwgbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogRGlzcG9zZSBmdW5jdGlvbiB3aGVuIGVsZW1lbnQgaXMgZGVzdHJveWVkXHJcbiAgICAgKi9cclxuICAgIGRpc3Bvc2UoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBsYXN0IHJlc2l6ZSBkaW1lbnNpb25zIHVzZWQgYnkgdGhlIHNlcnZpY2VcclxuICAgICAqIEByZXR1cm4gbGFzdCBkaW1lbnNpb25zXHJcbiAgICAgKi9cclxuICAgIGdldExhc3RSZXNpemVEaW1lbnNpb25zKCk6IEdyaWREaW1lbnNpb247XHJcbiAgICAvKiogUHJvdmlkZSB0aGUgcG9zc2liaWxpdHkgdG8gcGF1c2UgdGhlIHJlc2l6ZXIgZm9yIHNvbWUgdGltZSwgdW50aWwgdXNlciBkZWNpZGVzIHRvIHJlLWVuYWJsZWQgaXQgbGF0ZXIgaWYgaGUgd2lzaCB0by4gKi9cclxuICAgIHBhdXNlUmVzaXplcihpc1Jlc2l6ZVBhdXNlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKiogUmVzaXplIHRoZSBkYXRhZ3JpZCB0byBmaXQgdGhlIGJyb3dzZXIgaGVpZ2h0ICYgd2lkdGggKi9cclxuICAgIHJlc2l6ZUdyaWQoZGVsYXk/OiBudW1iZXIsIG5ld1NpemVzPzogR3JpZERpbWVuc2lvbik6IFByb21pc2U8R3JpZERpbWVuc2lvbj47XHJcbiAgICByZXNpemVHcmlkQ2FsbGJhY2sobmV3U2l6ZXM6IEdyaWREaW1lbnNpb24pOiBHcmlkRGltZW5zaW9uO1xyXG4gICAgcmVzaXplR3JpZFdpdGhEaW1lbnNpb25zKG5ld1NpemVzPzogR3JpZERpbWVuc2lvbik6IEdyaWREaW1lbnNpb247XHJcbn1cclxuIl19