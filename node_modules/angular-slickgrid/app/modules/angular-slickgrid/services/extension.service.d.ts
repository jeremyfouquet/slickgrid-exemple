import 'slickgrid/plugins/slick.cellrangedecorator';
import 'slickgrid/plugins/slick.cellrangeselector';
import 'slickgrid/plugins/slick.cellselectionmodel';
import { TranslateService } from '@ngx-translate/core';
import { Column, ExtensionList, ExtensionModel, ExtensionName, GridOption } from '../models/index';
import { AutoTooltipExtension, CellExternalCopyManagerExtension, CellMenuExtension, CheckboxSelectorExtension, ColumnPickerExtension, ContextMenuExtension, DraggableGroupingExtension, GridMenuExtension, GroupItemMetaProviderExtension, HeaderButtonExtension, HeaderMenuExtension, RowDetailViewExtension, RowMoveManagerExtension, RowSelectionExtension } from '../extensions/index';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class ExtensionService {
    private autoTooltipExtension;
    private cellExternalCopyExtension;
    private cellMenuExtension;
    private checkboxSelectorExtension;
    private columnPickerExtension;
    private contextMenuExtension;
    private draggableGroupingExtension;
    private gridMenuExtension;
    private groupItemMetaExtension;
    private headerButtonExtension;
    private headerMenuExtension;
    private rowDetailViewExtension;
    private rowMoveManagerExtension;
    private rowSelectionExtension;
    private sharedService;
    private translate;
    private _extensionCreatedList;
    private _extensionList;
    readonly extensionList: ExtensionList;
    constructor(autoTooltipExtension: AutoTooltipExtension, cellExternalCopyExtension: CellExternalCopyManagerExtension, cellMenuExtension: CellMenuExtension, checkboxSelectorExtension: CheckboxSelectorExtension, columnPickerExtension: ColumnPickerExtension, contextMenuExtension: ContextMenuExtension, draggableGroupingExtension: DraggableGroupingExtension, gridMenuExtension: GridMenuExtension, groupItemMetaExtension: GroupItemMetaProviderExtension, headerButtonExtension: HeaderButtonExtension, headerMenuExtension: HeaderMenuExtension, rowDetailViewExtension: RowDetailViewExtension, rowMoveManagerExtension: RowMoveManagerExtension, rowSelectionExtension: RowSelectionExtension, sharedService: SharedService, translate: TranslateService);
    /** Dispose of all the controls & plugins */
    dispose(): void;
    /** Get all columns (includes visible and non-visible) */
    getAllColumns(): Column[];
    /** Get only visible columns */
    getVisibleColumns(): Column[];
    /**
     * Get an Extension by it's name
     *  @param name
     */
    getExtensionByName(name: ExtensionName): ExtensionModel | undefined;
    /**
     * Get the instance of the SlickGrid addon (control or plugin).
     * This is the raw addon coming directly from SlickGrid itself, not to confuse with Angular-Slickgrid extension
     *  @param name
     */
    getSlickgridAddonInstance(name: ExtensionName): any;
    /** Auto-resize all the column in the grid to fit the grid width */
    autoResizeColumns(): void;
    /** Bind/Create different Controls or Plugins after the Grid is created */
    bindDifferentExtensions(): void;
    /**
     * Bind/Create certain plugins before the Grid creation to avoid having odd behaviors.
     * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then
     * @param columnDefinitions
     * @param options
     */
    createExtensionsBeforeGridCreation(columnDefinitions: Column[], options: GridOption): void;
    /** Hide a column from the grid */
    hideColumn(column: Column): void;
    /** Refresh the dataset through the Backend Service */
    refreshBackendDataset(gridOptions?: GridOption): void;
    /**
     * Remove a column from the grid by it's index in the grid
     * @param columns input
     * @param index
     */
    removeColumnByIndex(columns: Column[], index: number): Column[];
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    translateCellMenu(): void;
    /** Translate the Column Picker and it's last 2 checkboxes */
    translateColumnPicker(): void;
    /** Translate the Context Menu titles, we need to loop through all column definition to re-translate them */
    translateContextMenu(): void;
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateGridMenu(): void;
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateHeaderMenu(): void;
    /**
     * Translate manually the header titles.
     * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale
     * @param locale to use
     * @param new column definitions (optional)
     */
    translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]): void;
    /**
     * Render (or re-render) the column headers from column definitions.
     * calling setColumns() will trigger a grid re-render
     */
    renderColumnHeaders(newColumnDefinitions?: Column[], forceColumnDefinitionsOverwrite?: boolean): void;
    /**
     * Get an Extension that was created by calling its "create" method (there are only 3 extensions which uses this method)
     *  @param name
     */
    private getCreatedExtensionByName;
    /** Translate an array of items from an input key and assign translated value to the output key */
    private translateItems;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExtensionService, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ExtensionService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,