import { Subject } from 'rxjs';
import { CellArgs, Column, GridServiceDeleteOption, GridServiceInsertOption, GridServiceUpdateOption, HideColumnOption, OnEventArgs } from './../models/index';
import { ExtensionService } from './extension.service';
import { FilterService } from './filter.service';
import { GridStateService } from './gridState.service';
import { SharedService } from './shared.service';
import { SortService } from './sort.service';
import * as Éµngcc0 from '@angular/core';
export declare class GridService {
    private extensionService;
    private filterService;
    private gridStateService;
    private sharedService;
    private sortService;
    private _grid;
    private _dataView;
    private _rowSelectionPlugin;
    onItemAdded: Subject<any>;
    onItemDeleted: Subject<any>;
    onItemUpdated: Subject<any>;
    onItemUpserted: Subject<any>;
    onColumnsChanged: Subject<Column<any>[]>;
    constructor(extensionService: ExtensionService, filterService: FilterService, gridStateService: GridStateService, sharedService: SharedService, sortService: SortService);
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    dispose(): void;
    init(grid: any, dataView: any): void;
    /** Clear all Filters & Sorts */
    clearAllFiltersAndSorts(): void;
    /**
     * Get all column set in the grid, that is all visible/hidden columns
     * and also include any extra columns used by some plugins (like Row Selection, Row Detail, ...)
     */
    getAllColumnDefinitions(): Column<any>[];
    /** Get only visible column definitions and also include any extra columns by some plugins (like Row Selection, Row Detail, ...) */
    getVisibleColumnDefinitions(): Column[];
    /**
     * From a SlickGrid Event triggered get the Column Definition and Item Data Context
     *
     * For example the SlickGrid onClick will return cell arguments when subscribing to it.
     * From these cellArgs, we want to get the Column Definition and Item Data
     * @param cell event args
     * @return object with columnDef and dataContext
     */
    getColumnFromEventArguments(args: CellArgs): OnEventArgs;
    /** Get data item by it's row index number */
    getDataItemByRowNumber<T = any>(rowNumber: number): T;
    /** Chain the item Metadata with our implementation of Metadata at given row index */
    getItemRowMetadataToHighlight(previousItemMetadata: any): (rowNumber: number) => {
        cssClasses: string;
    };
    /**
       * @deprecated Hide a Column from the Grid (the column will just become hidden and will still show up in columnPicker/gridMenu)
       * @see hideColumnById
       * @param column
       */
    hideColumn(column: Column): void;
    /**
     * @deprecated Hide a Column from the Grid by its column definition index (the column will just become hidden and will still show up in columnPicker/gridMenu)
     * @see hideColumnById Please use "hideColumnById(id)" or "hideColumnByIds([ids])" instead since it has a lot more options
     * @param columnIndex - column definition index
     * @param triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     */
    hideColumnByIndex(columnIndex: number, triggerEvent?: boolean): void;
    /**
     * Hide a Column from the Grid by its column definition id, the column will just become hidden and will still show up in columnPicker/gridMenu
     * @param {string | number} columnId - column definition id
     * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     * @return {number} columnIndex - column index position when found or -1
     */
    hideColumnById(columnId: string | number, options?: HideColumnOption): number;
    /**
     * Hide a Column from the Grid by its column definition id(s), the column will just become hidden and will still show up in columnPicker/gridMenu
     * @param {Array<string | number>} columnIds - column definition ids, can be a single string and an array of strings
     * @param {boolean} triggerEvent - do we want to trigger an event (onHeaderMenuColumnsChanged) when column becomes hidden? Defaults to true.
     */
    hideColumnByIds(columnIds: Array<string | number>, options?: HideColumnOption): void;
    /**
     * Highlight then fade a row for x seconds.
     * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166
     * @param rowNumber
     * @param fadeDelay
     */
    highlightRow(rowNumber: number | number[], fadeDelay?: number, fadeOutDelay?: number): void;
    highlightRowByMetadata(rowNumber: number, fadeDelay?: number, fadeOutDelay?: number): void;
    /** Get the Data Item from a grid row index */
    getDataItemByRowIndex<T = any>(index: number): T;
    /** Get the Data Item from an array of grid row indexes */
    getDataItemByRowIndexes<T = any>(indexes: number[]): T[];
    /** Get the currently selected row indexes */
    getSelectedRows(): number[];
    /** Get the currently selected rows item data */
    getSelectedRowsDataItem<T = any>(): T[];
    /** Select the selected row by a row index */
    setSelectedRow(rowIndex: number): void;
    /** Set selected rows with provided array of row indexes */
    setSelectedRows(rowIndexes: number[]): void;
    /** Re-Render the Grid */
    renderGrid(): void;
    /**
     * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .
     * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)
     * The reset will clear the Filters & Sort, then will reset the Columns to their original state
     */
    resetGrid(columnDefinitions?: Column[]): void;
    /** @deprecated please use "addItem" method instead */
    addItemToDatagrid(item: any, shouldHighlightRow?: boolean, shouldResortGrid?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;
    /** @deprecated please use "addItems" method instead */
    addItemsToDatagrid(items: any[], shouldHighlightRow?: boolean, shouldResortGrid?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number[];
    /**
     * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return rowIndex: typically index 0 when adding to position "top" or a different number when adding to the "bottom"
     */
    addItem<T = any>(item: T, options?: GridServiceInsertOption): number;
    /**
     * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     */
    addItems<T = any>(items: T | T[], options?: GridServiceInsertOption): number[];
    /** @deprecated please use "deleteItem" method instead */
    deleteDataGridItem(item: any, shouldTriggerEvent?: boolean): void;
    /** @deprecated please use "deleteItems" method instead */
    deleteDataGridItems(items: any[], shouldTriggerEvent?: boolean): void;
    /** @deprecated please use "deleteItemById" method instead */
    deleteDataGridItemById(itemId: string | number, shouldTriggerEvent?: boolean): void;
    /** @deprecated please use "deleteItemByIds" method instead */
    deleteDataGridItemByIds(itemIds: number[] | string[], shouldTriggerEvent?: boolean): void;
    /**
     * Delete an existing item from the datagrid (dataView)
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    deleteItem<T = any>(item: T, options?: GridServiceDeleteOption): number | string;
    /**
     * Delete an array of existing items from the datagrid
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    deleteItems<T = any>(items: T | T[], options?: GridServiceDeleteOption): number[] | string[];
    /**
     * Delete an existing item from the datagrid (dataView) by it's id
     * @param itemId: item unique id
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     * @return item id deleted
     */
    deleteItemById(itemId: string | number, options?: GridServiceDeleteOption): number | string;
    /**
     * Delete an array of existing items from the datagrid
     * @param itemIds array of item unique IDs
     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)
     */
    deleteItemByIds(itemIds: number[] | string[], options?: GridServiceDeleteOption): number[] | string[];
    /** @deprecated please use "updateItem" method instead */
    updateDataGridItem(item: any, shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;
    /** @deprecated please use "updateItems" method instead */
    updateDataGridItems(items: any | any[], shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number[];
    /** @deprecated please use "updateItemById" method instead */
    updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;
    /**
     * Update an existing item with new properties inside the datagrid
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row index
     */
    updateItem<T = any>(item: T, options?: GridServiceUpdateOption): number;
    /**
     * Update an array of existing items with new properties inside the datagrid
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row indexes
     */
    updateItems<T = any>(items: T | T[], options?: GridServiceUpdateOption): number[];
    /**
     * Update an existing item in the datagrid by it's id and new properties
     * @param itemId: item unique id
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)
     * @return grid row number
     */
    updateItemById<T = any>(itemId: number | string, item: T, options?: GridServiceUpdateOption): number;
    /**
     * Insert a row into the grid if it doesn't already exist or update if it does.
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     */
    upsertItem<T = any>(item: T, options?: GridServiceInsertOption): {
        added: number;
        updated: number;
    };
    /**
     * Update an array of existing items with new properties inside the datagrid
     * @param item object arrays, which must contain unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return row numbers in the grid
     */
    upsertItems<T = any>(items: T | T[], options?: GridServiceInsertOption): {
        added: number;
        updated: number;
    }[];
    /**
     * Update an existing item in the datagrid by it's id and new properties
     * @param itemId: item unique id
     * @param item object which must contain a unique "id" property and any other suitable properties
     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)
     * @return grid row number in the grid
     */
    upsertItemById<T = any>(itemId: number | string, item: T, options?: GridServiceInsertOption): {
        added: number;
        updated: number;
    };
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<GridService, never>;
    static Éµprov: Éµngcc0.ÉµÉµInjectableDef<GridService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,