import { BackendService, Column, ColumnFilters, ColumnSort, CurrentFilter, CurrentPagination, CurrentSorter, FilterChangedArgs, GraphqlCursorPaginationOption, GraphqlDatasetFilter, GraphqlPaginationOption, GraphqlServiceOption, MultiColumnSort, Pagination, PaginationChangedArgs, SortChangedArgs } from './../models/index';
import * as ɵngcc0 from '@angular/core';
export declare class GraphqlService implements BackendService {
    private _currentFilters;
    private _currentPagination;
    private _currentSorters;
    private _columnDefinitions;
    private _grid;
    private _datasetIdPropName;
    options: GraphqlServiceOption;
    pagination: Pagination | undefined;
    defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption;
    /** Getter for the Column Definitions */
    readonly columnDefinitions: Column<any>[];
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    /** Initialization of the service, which acts as a constructor */
    init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void;
    /**
     * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.
     * @param serviceOptions GraphqlServiceOption
     */
    buildQuery(): string;
    /**
     * From an input array of strings, we want to build a GraphQL query string.
     * The process has to take the dot notation and parse it into a valid GraphQL query
     * Following this SO answer https://stackoverflow.com/a/47705476/1212166
     *
     * INPUT
     *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']
     * OUTPUT
     * firstName, lastName, billing{address{street, zip}}
     * @param inputArray
     */
    buildFilterQuery(inputArray: string[]): string;
    clearFilters(): void;
    clearSorters(): void;
    /**
     * Get an initialization of Pagination options
     * @return Pagination Options
     */
    getInitPaginationOptions(): GraphqlDatasetFilter;
    /** Get the GraphQL dataset name */
    getDatasetName(): string;
    /** Get the Filters that are currently used by the grid */
    getCurrentFilters(): ColumnFilters | CurrentFilter[];
    /** Get the Pagination that is currently used by the grid */
    getCurrentPagination(): CurrentPagination;
    /** Get the Sorters that are currently used by the grid */
    getCurrentSorters(): CurrentSorter[];
    resetPaginationOptions(): void;
    updateOptions(serviceOptions?: Partial<GraphqlServiceOption>): void;
    processOnFilterChanged(event: Event, args: FilterChangedArgs): string;
    processOnPaginationChanged(event: Event, args: PaginationChangedArgs): string;
    processOnSortChanged(event: Event, args: SortChangedArgs | ColumnSort | MultiColumnSort): string;
    /**
     * loop through all columns to inspect filters & update backend service filteringOptions
     * @param columnFilters
     */
    updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically: boolean): void;
    /**
     * Update the pagination component with it's new page number and size
     * @param newPage
     * @param pageSize
     */
    updatePagination(newPage: number, pageSize: number): void;
    /**
     * loop through all columns to inspect sorters & update backend service sortingOptions
     * @param columnFilters
     */
    updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]): void;
    /**
     * A function which takes an input string and removes double quotes only
     * on certain fields are identified as GraphQL enums (except fields with dot notation)
     * For example let say we identified ("direction:", "sort") as word which are GraphQL enum fields
     * then the result will be:
     * FROM
     * query { users (orderBy:[{field:"firstName", direction:"ASC"} }]) }
     * TO
     * query { users (orderBy:[{field: firstName, direction: ASC}})}
     *
     * EXCEPTIONS (fields with dot notation "." which are inside a "field:")
     * these fields will keep double quotes while everything else will be stripped of double quotes
     * query { users (orderBy:[{field:"billing.street.name", direction: "ASC"} }
     * TO
     * query { users (orderBy:[{field:"billing.street.name", direction: ASC}}
     * @param inputStr input string
     * @param enumSearchWords array of enum words to filter
     * @returns outputStr output string
     */
    trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean): string;
    /**
     * Cast provided filters (could be in multiple formats) into an array of CurrentFilter
     * @param columnFilters
     */
    private castFilterToColumnFilters;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GraphqlService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GraphqlService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdyYXBocWwuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhY2tlbmRTZXJ2aWNlLCBDb2x1bW4sIENvbHVtbkZpbHRlcnMsIENvbHVtblNvcnQsIEN1cnJlbnRGaWx0ZXIsIEN1cnJlbnRQYWdpbmF0aW9uLCBDdXJyZW50U29ydGVyLCBGaWx0ZXJDaGFuZ2VkQXJncywgR3JhcGhxbEN1cnNvclBhZ2luYXRpb25PcHRpb24sIEdyYXBocWxEYXRhc2V0RmlsdGVyLCBHcmFwaHFsUGFnaW5hdGlvbk9wdGlvbiwgR3JhcGhxbFNlcnZpY2VPcHRpb24sIE11bHRpQ29sdW1uU29ydCwgUGFnaW5hdGlvbiwgUGFnaW5hdGlvbkNoYW5nZWRBcmdzLCBTb3J0Q2hhbmdlZEFyZ3MgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyYXBocWxTZXJ2aWNlIGltcGxlbWVudHMgQmFja2VuZFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudEZpbHRlcnM7XHJcbiAgICBwcml2YXRlIF9jdXJyZW50UGFnaW5hdGlvbjtcclxuICAgIHByaXZhdGUgX2N1cnJlbnRTb3J0ZXJzO1xyXG4gICAgcHJpdmF0ZSBfY29sdW1uRGVmaW5pdGlvbnM7XHJcbiAgICBwcml2YXRlIF9ncmlkO1xyXG4gICAgcHJpdmF0ZSBfZGF0YXNldElkUHJvcE5hbWU7XHJcbiAgICBvcHRpb25zOiBHcmFwaHFsU2VydmljZU9wdGlvbjtcclxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb24gfCB1bmRlZmluZWQ7XHJcbiAgICBkZWZhdWx0UGFnaW5hdGlvbk9wdGlvbnM6IEdyYXBocWxQYWdpbmF0aW9uT3B0aW9uIHwgR3JhcGhxbEN1cnNvclBhZ2luYXRpb25PcHRpb247XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgQ29sdW1uIERlZmluaXRpb25zICovXHJcbiAgICByZWFkb25seSBjb2x1bW5EZWZpbml0aW9uczogQ29sdW1uPGFueT5bXTtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncmlkT3B0aW9ucztcclxuICAgIC8qKiBJbml0aWFsaXphdGlvbiBvZiB0aGUgc2VydmljZSwgd2hpY2ggYWN0cyBhcyBhIGNvbnN0cnVjdG9yICovXHJcbiAgICBpbml0KHNlcnZpY2VPcHRpb25zPzogR3JhcGhxbFNlcnZpY2VPcHRpb24sIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uLCBncmlkPzogYW55KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQnVpbGQgdGhlIEdyYXBoUUwgcXVlcnksIHNpbmNlIHRoZSBzZXJ2aWNlIGluY2x1ZGUvZXhjbHVkZSBjdXJzb3IsIHRoZSBvdXRwdXQgcXVlcnkgd2lsbCBiZSBkaWZmZXJlbnQuXHJcbiAgICAgKiBAcGFyYW0gc2VydmljZU9wdGlvbnMgR3JhcGhxbFNlcnZpY2VPcHRpb25cclxuICAgICAqL1xyXG4gICAgYnVpbGRRdWVyeSgpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEZyb20gYW4gaW5wdXQgYXJyYXkgb2Ygc3RyaW5ncywgd2Ugd2FudCB0byBidWlsZCBhIEdyYXBoUUwgcXVlcnkgc3RyaW5nLlxyXG4gICAgICogVGhlIHByb2Nlc3MgaGFzIHRvIHRha2UgdGhlIGRvdCBub3RhdGlvbiBhbmQgcGFyc2UgaXQgaW50byBhIHZhbGlkIEdyYXBoUUwgcXVlcnlcclxuICAgICAqIEZvbGxvd2luZyB0aGlzIFNPIGFuc3dlciBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc3MDU0NzYvMTIxMjE2NlxyXG4gICAgICpcclxuICAgICAqIElOUFVUXHJcbiAgICAgKiAgWydmaXJzdE5hbWUnLCAnbGFzdE5hbWUnLCAnYmlsbGluZy5hZGRyZXNzLnN0cmVldCcsICdiaWxsaW5nLmFkZHJlc3MuemlwJ11cclxuICAgICAqIE9VVFBVVFxyXG4gICAgICogZmlyc3ROYW1lLCBsYXN0TmFtZSwgYmlsbGluZ3thZGRyZXNze3N0cmVldCwgemlwfX1cclxuICAgICAqIEBwYXJhbSBpbnB1dEFycmF5XHJcbiAgICAgKi9cclxuICAgIGJ1aWxkRmlsdGVyUXVlcnkoaW5wdXRBcnJheTogc3RyaW5nW10pOiBzdHJpbmc7XHJcbiAgICBjbGVhckZpbHRlcnMoKTogdm9pZDtcclxuICAgIGNsZWFyU29ydGVycygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYW4gaW5pdGlhbGl6YXRpb24gb2YgUGFnaW5hdGlvbiBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIFBhZ2luYXRpb24gT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBnZXRJbml0UGFnaW5hdGlvbk9wdGlvbnMoKTogR3JhcGhxbERhdGFzZXRGaWx0ZXI7XHJcbiAgICAvKiogR2V0IHRoZSBHcmFwaFFMIGRhdGFzZXQgbmFtZSAqL1xyXG4gICAgZ2V0RGF0YXNldE5hbWUoKTogc3RyaW5nO1xyXG4gICAgLyoqIEdldCB0aGUgRmlsdGVycyB0aGF0IGFyZSBjdXJyZW50bHkgdXNlZCBieSB0aGUgZ3JpZCAqL1xyXG4gICAgZ2V0Q3VycmVudEZpbHRlcnMoKTogQ29sdW1uRmlsdGVycyB8IEN1cnJlbnRGaWx0ZXJbXTtcclxuICAgIC8qKiBHZXQgdGhlIFBhZ2luYXRpb24gdGhhdCBpcyBjdXJyZW50bHkgdXNlZCBieSB0aGUgZ3JpZCAqL1xyXG4gICAgZ2V0Q3VycmVudFBhZ2luYXRpb24oKTogQ3VycmVudFBhZ2luYXRpb247XHJcbiAgICAvKiogR2V0IHRoZSBTb3J0ZXJzIHRoYXQgYXJlIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBncmlkICovXHJcbiAgICBnZXRDdXJyZW50U29ydGVycygpOiBDdXJyZW50U29ydGVyW107XHJcbiAgICByZXNldFBhZ2luYXRpb25PcHRpb25zKCk6IHZvaWQ7XHJcbiAgICB1cGRhdGVPcHRpb25zKHNlcnZpY2VPcHRpb25zPzogUGFydGlhbDxHcmFwaHFsU2VydmljZU9wdGlvbj4pOiB2b2lkO1xyXG4gICAgcHJvY2Vzc09uRmlsdGVyQ2hhbmdlZChldmVudDogRXZlbnQsIGFyZ3M6IEZpbHRlckNoYW5nZWRBcmdzKTogc3RyaW5nO1xyXG4gICAgcHJvY2Vzc09uUGFnaW5hdGlvbkNoYW5nZWQoZXZlbnQ6IEV2ZW50LCBhcmdzOiBQYWdpbmF0aW9uQ2hhbmdlZEFyZ3MpOiBzdHJpbmc7XHJcbiAgICBwcm9jZXNzT25Tb3J0Q2hhbmdlZChldmVudDogRXZlbnQsIGFyZ3M6IFNvcnRDaGFuZ2VkQXJncyB8IENvbHVtblNvcnQgfCBNdWx0aUNvbHVtblNvcnQpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIGxvb3AgdGhyb3VnaCBhbGwgY29sdW1ucyB0byBpbnNwZWN0IGZpbHRlcnMgJiB1cGRhdGUgYmFja2VuZCBzZXJ2aWNlIGZpbHRlcmluZ09wdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb2x1bW5GaWx0ZXJzXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUZpbHRlcnMoY29sdW1uRmlsdGVyczogQ29sdW1uRmlsdGVycyB8IEN1cnJlbnRGaWx0ZXJbXSwgaXNVcGRhdGVkQnlQcmVzZXRPckR5bmFtaWNhbGx5OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBwYWdpbmF0aW9uIGNvbXBvbmVudCB3aXRoIGl0J3MgbmV3IHBhZ2UgbnVtYmVyIGFuZCBzaXplXHJcbiAgICAgKiBAcGFyYW0gbmV3UGFnZVxyXG4gICAgICogQHBhcmFtIHBhZ2VTaXplXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVBhZ2luYXRpb24obmV3UGFnZTogbnVtYmVyLCBwYWdlU2l6ZTogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogbG9vcCB0aHJvdWdoIGFsbCBjb2x1bW5zIHRvIGluc3BlY3Qgc29ydGVycyAmIHVwZGF0ZSBiYWNrZW5kIHNlcnZpY2Ugc29ydGluZ09wdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb2x1bW5GaWx0ZXJzXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVNvcnRlcnMoc29ydENvbHVtbnM/OiBDb2x1bW5Tb3J0W10sIHByZXNldFNvcnRlcnM/OiBDdXJyZW50U29ydGVyW10pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGFuIGlucHV0IHN0cmluZyBhbmQgcmVtb3ZlcyBkb3VibGUgcXVvdGVzIG9ubHlcclxuICAgICAqIG9uIGNlcnRhaW4gZmllbGRzIGFyZSBpZGVudGlmaWVkIGFzIEdyYXBoUUwgZW51bXMgKGV4Y2VwdCBmaWVsZHMgd2l0aCBkb3Qgbm90YXRpb24pXHJcbiAgICAgKiBGb3IgZXhhbXBsZSBsZXQgc2F5IHdlIGlkZW50aWZpZWQgKFwiZGlyZWN0aW9uOlwiLCBcInNvcnRcIikgYXMgd29yZCB3aGljaCBhcmUgR3JhcGhRTCBlbnVtIGZpZWxkc1xyXG4gICAgICogdGhlbiB0aGUgcmVzdWx0IHdpbGwgYmU6XHJcbiAgICAgKiBGUk9NXHJcbiAgICAgKiBxdWVyeSB7IHVzZXJzIChvcmRlckJ5Olt7ZmllbGQ6XCJmaXJzdE5hbWVcIiwgZGlyZWN0aW9uOlwiQVNDXCJ9IH1dKSB9XHJcbiAgICAgKiBUT1xyXG4gICAgICogcXVlcnkgeyB1c2VycyAob3JkZXJCeTpbe2ZpZWxkOiBmaXJzdE5hbWUsIGRpcmVjdGlvbjogQVNDfX0pfVxyXG4gICAgICpcclxuICAgICAqIEVYQ0VQVElPTlMgKGZpZWxkcyB3aXRoIGRvdCBub3RhdGlvbiBcIi5cIiB3aGljaCBhcmUgaW5zaWRlIGEgXCJmaWVsZDpcIilcclxuICAgICAqIHRoZXNlIGZpZWxkcyB3aWxsIGtlZXAgZG91YmxlIHF1b3RlcyB3aGlsZSBldmVyeXRoaW5nIGVsc2Ugd2lsbCBiZSBzdHJpcHBlZCBvZiBkb3VibGUgcXVvdGVzXHJcbiAgICAgKiBxdWVyeSB7IHVzZXJzIChvcmRlckJ5Olt7ZmllbGQ6XCJiaWxsaW5nLnN0cmVldC5uYW1lXCIsIGRpcmVjdGlvbjogXCJBU0NcIn0gfVxyXG4gICAgICogVE9cclxuICAgICAqIHF1ZXJ5IHsgdXNlcnMgKG9yZGVyQnk6W3tmaWVsZDpcImJpbGxpbmcuc3RyZWV0Lm5hbWVcIiwgZGlyZWN0aW9uOiBBU0N9fVxyXG4gICAgICogQHBhcmFtIGlucHV0U3RyIGlucHV0IHN0cmluZ1xyXG4gICAgICogQHBhcmFtIGVudW1TZWFyY2hXb3JkcyBhcnJheSBvZiBlbnVtIHdvcmRzIHRvIGZpbHRlclxyXG4gICAgICogQHJldHVybnMgb3V0cHV0U3RyIG91dHB1dCBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgdHJpbURvdWJsZVF1b3Rlc09uRW51bUZpZWxkKGlucHV0U3RyOiBzdHJpbmcsIGVudW1TZWFyY2hXb3Jkczogc3RyaW5nW10sIGtlZXBBcmd1bWVudEZpZWxkRG91YmxlUXVvdGVzOiBib29sZWFuKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYXN0IHByb3ZpZGVkIGZpbHRlcnMgKGNvdWxkIGJlIGluIG11bHRpcGxlIGZvcm1hdHMpIGludG8gYW4gYXJyYXkgb2YgQ3VycmVudEZpbHRlclxyXG4gICAgICogQHBhcmFtIGNvbHVtbkZpbHRlcnNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYXN0RmlsdGVyVG9Db2x1bW5GaWx0ZXJzO1xyXG59XHJcbiJdfQ==