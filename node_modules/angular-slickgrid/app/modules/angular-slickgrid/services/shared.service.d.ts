import { Subject } from 'rxjs';
import { Column, CurrentPagination, GridOption } from '../models';
import * as ɵngcc0 from '@angular/core';
export declare class SharedService {
    private _allColumns;
    private _dataView;
    private _groupItemMetadataProvider;
    private _grid;
    private _gridOptions;
    private _currentPagination;
    private _hideHeaderRowAfterPageLoad;
    private _visibleColumns;
    private _hierarchicalDataset;
    private _frozenVisibleColumnId;
    onHeaderMenuHideColumns: Subject<Column<any>[]>;
    /** Getter for All Columns  in the grid (hidden/visible) */
    /** Setter for All Columns  in the grid (hidden/visible) */
    allColumns: Column[];
    /** Getter for the Column Definitions pulled through the Grid Object */
    readonly columnDefinitions: Column[];
    /** Getter for the Current Pagination (when Pagination is enabled) */
    /** Setter for the Current Pagination (when Pagination is enabled) */
    currentPagination: CurrentPagination | undefined;
    /** Getter for SlickGrid DataView object */
    /** Setter for SlickGrid DataView object */
    dataView: any;
    /** Setter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
    /** Getter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
    frozenVisibleColumnId: string | number;
    /** Getter for SlickGrid Grid object */
    /** Setter for SlickGrid Grid object */
    grid: any;
    /** Getter for the Grid Options pulled through the Grid Object */
    /** Setter for the Grid Options pulled through the Grid Object */
    gridOptions: GridOption;
    /** Getter for the Grid Options */
    /** Setter for the Grid Options */
    groupItemMetadataProvider: any;
    /** Getter to know if user want to hide header row after 1st page load */
    /** Setter for knowing if user want to hide header row after 1st page load */
    hideHeaderRowAfterPageLoad: boolean;
    /** Getter for the Visible Columns in the grid */
    /** Setter for the Visible Columns in the grid */
    visibleColumns: Column[];
    /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
    /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
    hierarchicalDataset: any[] | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SharedService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SharedService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsic2hhcmVkLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDb2x1bW4sIEN1cnJlbnRQYWdpbmF0aW9uLCBHcmlkT3B0aW9uIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2hhcmVkU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9hbGxDb2x1bW5zO1xyXG4gICAgcHJpdmF0ZSBfZGF0YVZpZXc7XHJcbiAgICBwcml2YXRlIF9ncm91cEl0ZW1NZXRhZGF0YVByb3ZpZGVyO1xyXG4gICAgcHJpdmF0ZSBfZ3JpZDtcclxuICAgIHByaXZhdGUgX2dyaWRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudFBhZ2luYXRpb247XHJcbiAgICBwcml2YXRlIF9oaWRlSGVhZGVyUm93QWZ0ZXJQYWdlTG9hZDtcclxuICAgIHByaXZhdGUgX3Zpc2libGVDb2x1bW5zO1xyXG4gICAgcHJpdmF0ZSBfaGllcmFyY2hpY2FsRGF0YXNldDtcclxuICAgIHByaXZhdGUgX2Zyb3plblZpc2libGVDb2x1bW5JZDtcclxuICAgIG9uSGVhZGVyTWVudUhpZGVDb2x1bW5zOiBTdWJqZWN0PENvbHVtbjxhbnk+W10+O1xyXG4gICAgLyoqIEdldHRlciBmb3IgQWxsIENvbHVtbnMgIGluIHRoZSBncmlkIChoaWRkZW4vdmlzaWJsZSkgKi9cclxuICAgIC8qKiBTZXR0ZXIgZm9yIEFsbCBDb2x1bW5zICBpbiB0aGUgZ3JpZCAoaGlkZGVuL3Zpc2libGUpICovXHJcbiAgICBhbGxDb2x1bW5zOiBDb2x1bW5bXTtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBDb2x1bW4gRGVmaW5pdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICByZWFkb25seSBjb2x1bW5EZWZpbml0aW9uczogQ29sdW1uW107XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgQ3VycmVudCBQYWdpbmF0aW9uICh3aGVuIFBhZ2luYXRpb24gaXMgZW5hYmxlZCkgKi9cclxuICAgIC8qKiBTZXR0ZXIgZm9yIHRoZSBDdXJyZW50IFBhZ2luYXRpb24gKHdoZW4gUGFnaW5hdGlvbiBpcyBlbmFibGVkKSAqL1xyXG4gICAgY3VycmVudFBhZ2luYXRpb246IEN1cnJlbnRQYWdpbmF0aW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEdldHRlciBmb3IgU2xpY2tHcmlkIERhdGFWaWV3IG9iamVjdCAqL1xyXG4gICAgLyoqIFNldHRlciBmb3IgU2xpY2tHcmlkIERhdGFWaWV3IG9iamVjdCAqL1xyXG4gICAgZGF0YVZpZXc6IGFueTtcclxuICAgIC8qKiBTZXR0ZXIgdG8ga2VlcCB0aGUgZnJvemVuIGNvbHVtbiBpZCBmb3IgcmVmZXJlbmNlIGlmIHdlIGV2ZXIgc2hvdy9oaWRlIGNvbHVtbiBmcm9tIENvbHVtblBpY2tlci9HcmlkTWVudSBhZnRlcndhcmQgKi9cclxuICAgIC8qKiBHZXR0ZXIgdG8ga2VlcCB0aGUgZnJvemVuIGNvbHVtbiBpZCBmb3IgcmVmZXJlbmNlIGlmIHdlIGV2ZXIgc2hvdy9oaWRlIGNvbHVtbiBmcm9tIENvbHVtblBpY2tlci9HcmlkTWVudSBhZnRlcndhcmQgKi9cclxuICAgIGZyb3plblZpc2libGVDb2x1bW5JZDogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgLyoqIEdldHRlciBmb3IgU2xpY2tHcmlkIEdyaWQgb2JqZWN0ICovXHJcbiAgICAvKiogU2V0dGVyIGZvciBTbGlja0dyaWQgR3JpZCBvYmplY3QgKi9cclxuICAgIGdyaWQ6IGFueTtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICAvKiogU2V0dGVyIGZvciB0aGUgR3JpZCBPcHRpb25zIHB1bGxlZCB0aHJvdWdoIHRoZSBHcmlkIE9iamVjdCAqL1xyXG4gICAgZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb247XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgR3JpZCBPcHRpb25zICovXHJcbiAgICAvKiogU2V0dGVyIGZvciB0aGUgR3JpZCBPcHRpb25zICovXHJcbiAgICBncm91cEl0ZW1NZXRhZGF0YVByb3ZpZGVyOiBhbnk7XHJcbiAgICAvKiogR2V0dGVyIHRvIGtub3cgaWYgdXNlciB3YW50IHRvIGhpZGUgaGVhZGVyIHJvdyBhZnRlciAxc3QgcGFnZSBsb2FkICovXHJcbiAgICAvKiogU2V0dGVyIGZvciBrbm93aW5nIGlmIHVzZXIgd2FudCB0byBoaWRlIGhlYWRlciByb3cgYWZ0ZXIgMXN0IHBhZ2UgbG9hZCAqL1xyXG4gICAgaGlkZUhlYWRlclJvd0FmdGVyUGFnZUxvYWQ6IGJvb2xlYW47XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgVmlzaWJsZSBDb2x1bW5zIGluIHRoZSBncmlkICovXHJcbiAgICAvKiogU2V0dGVyIGZvciB0aGUgVmlzaWJsZSBDb2x1bW5zIGluIHRoZSBncmlkICovXHJcbiAgICB2aXNpYmxlQ29sdW1uczogQ29sdW1uW107XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgSGllcmFyY2hpY2FsIFRyZWUgRGF0YSBkYXRhc2V0IHdoZW4gdGhlIGZlYXR1cmUgaXMgZW5hYmxlZCAqL1xyXG4gICAgLyoqIEdldHRlciBmb3IgdGhlIEhpZXJhcmNoaWNhbCBUcmVlIERhdGEgZGF0YXNldCB3aGVuIHRoZSBmZWF0dXJlIGlzIGVuYWJsZWQgKi9cclxuICAgIGhpZXJhcmNoaWNhbERhdGFzZXQ6IGFueVtdIHwgbnVsbDtcclxufVxyXG4iXX0=