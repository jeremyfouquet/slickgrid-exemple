import { Subject } from 'rxjs';
import { Column, ColumnFilter, ColumnFilters, CurrentFilter, EmitterType, FilterConditionOption, SlickEvent, SlickEventHandler } from './../models/index';
import { FilterFactory } from '../filters/filterFactory';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class FilterService {
    private filterFactory;
    private sharedService;
    private _eventHandler;
    private _isFilterFirstRender;
    private _firstColumnIdRendered;
    private _filtersMetadata;
    private _columnFilters;
    private _grid;
    private _onSearchChange;
    private _tmpPreFilteredData;
    private httpCancelRequests$;
    onFilterChanged: Subject<CurrentFilter[]>;
    onFilterCleared: Subject<boolean>;
    constructor(filterFactory: FilterFactory, sharedService: SharedService);
    /** Getter of the SlickGrid Event Handler */
    readonly eventHandler: SlickEventHandler;
    /** Getter to know if the filter was already rendered or if it was its first time render */
    readonly isFilterFirstRender: boolean;
    /** Getter of the SlickGrid Event Handler */
    readonly onSearchChange: SlickEvent | null;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    /** Getter for the Column Definitions pulled through the Grid Object */
    private readonly _columnDefinitions;
    /** Getter of SlickGrid DataView object */
    private readonly _dataView;
    init(grid: any): void;
    dispose(): void;
    /**
     * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns
     */
    disposeColumnFilters(): void;
    /**
     * When clearing or disposing of all filters, we need to loop through all columnFilters and delete them 1 by 1
     * only trying to make columnFilter an empty (without looping) would not trigger a dataset change
     */
    resetColumnFilters(): void;
    /**
     * Bind a backend filter hook to the grid
     * @param grid SlickGrid Grid object
     */
    bindBackendOnFilter(grid: any): void;
    handleBackendOnSearchChange(_e: KeyboardEvent, args: any): void;
    /**
     * Bind a local filter hook to the grid
     * @param grid SlickGrid Grid object
     * @param dataView
     */
    bindLocalOnFilter(grid: any): void;
    handleLocalOnSearchChange(_e: KeyboardEvent, args: any): void;
    clearFilterByColumnId(event: Event, columnId: number | string): void;
    /** Clear the search filters (below the column titles) */
    clearFilters(triggerChange?: boolean): void;
    /** Local Grid Filter search */
    customLocalFilter(item: any, args: any): boolean;
    getFilterConditionOptionsOrBoolean(item: any, columnFilter: ColumnFilter, columnId: string | number, grid: any, dataView: any): FilterConditionOption | boolean;
    /**
     * When using Tree Data, we need to prefilter (search) the data prior, the result will be an array of IDs which are the node(s) and their parent nodes when necessary.
     * This will then be passed to the DataView setFilter(customLocalFilter), which will itself loop through the list of IDs and display/hide the row if found that array of IDs
     * We do this in 2 steps so that we can still use the DataSet setFilter()
     */
    preFilterTreeData(inputArray: any[], columnFilters: ColumnFilters): any[];
    getColumnFilters(): ColumnFilters;
    getFiltersMetadata(): any[];
    getCurrentLocalFilters(): CurrentFilter[];
    /**
     * A simple function that is binded to the subscriber and emit a change when the filter is called.
     * Other services, like Pagination, can then subscribe to it.
     * @param caller
     */
    emitFilterChanged(caller: EmitterType): void;
    onBackendFilterChange(event: KeyboardEvent, args: any): Promise<void>;
    /**
     * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)
     * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)
     * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.
     * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)
     */
    populateColumnFilterSearchTermPresets(filters: CurrentFilter[]): Column<any>[];
    /**
     * when we have a Filter Presets on a Tree Data View grid, we need to call the pre-filtering of tree data
     * we need to do this because Tree Data is the only type of grid that requires a pre-filter (preFilterTreeData) to be executed before the final filtering
     * @param filters
     */
    refreshTreeDataFilters(): void;
    /**
     * Toggle the Filter Functionality
     * @param {boolean} isFilterDisabled - optionally force a disable/enable of the Sort Functionality? Defaults to True
     * @param {boolean} clearFiltersWhenDisabled - when disabling the Filter, do we also want to clear all the filters as well? Defaults to True
     */
    disableFilterFunctionality(isFilterDisabled?: boolean, clearFiltersWhenDisabled?: boolean): void;
    /**
     * Toggle the Filter Functionality (show/hide the header row filter bar as well)
     * @param {boolean} clearFiltersWhenDisabled - when disabling the filters, do we want to clear the filters before hiding the filters? Defaults to True
     */
    toggleFilterFunctionality(clearFiltersWhenDisabled?: boolean): void;
    /**
     * Toggle the Header Row filter bar (this does not disable the Filtering itself, you can use "toggleFilterFunctionality()" instead, however this will reset any column positions)
     */
    toggleHeaderFilterRow(): void;
    /**
     * Set the sort icons in the UI (ONLY the icons, it does not do any sorting)
     * The column sort icons are not necessarily inter-connected to the sorting functionality itself,
     * you can change the sorting icons separately by passing an array of columnId/sortAsc and that will change ONLY the icons
     * @param sortColumns
     */
    setSortColumnIcons(sortColumns: {
        columnId: string;
        sortAsc: boolean;
    }[]): void;
    /**
     * Update Filters dynamically just by providing an array of filter(s).
     * You can also choose emit (default) a Filter Changed event that will be picked by the Grid State Service.
     *
     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,
     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.
     * @param filters array
     * @param triggerEvent defaults to True, do we want to emit a filter changed event?
     * @param triggerBackendQuery defaults to True, which will query the backend.
     */
    updateFilters(filters: CurrentFilter[], emitChangedEvent?: boolean, triggerBackendQuery?: boolean, triggerOnSearchChangeEvent?: boolean): void;
    /** Add all created filters (from their template) to the header row section area */
    private addFilterTemplateToHeaderRow;
    /**
     * Callback method that is called and executed by the individual Filter (DOM element),
     * for example when user type in a word to search (which uses InputFilter), this Filter will execute the callback from an input change event.
     */
    private callbackSearchEvent;
    /**
     * Loop through all column definitions and do the following thing
     * 1. loop through each Header Menu commands and change the "hidden" commands to show/hide depending if it's enabled/disabled
     * Also note that we aren't deleting any properties, we just toggle their flags so that we can reloop through at later point in time.
     * (if we previously deleted these properties we wouldn't be able to change them back since these properties wouldn't exist anymore, hence why we just hide the commands)
     * @param {boolean} isDisabling - are we disabling the filter functionality? Defaults to true
     */
    private disableAllFilteringCommands;
    private updateColumnFilters;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FilterService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZmlsdGVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDb2x1bW4sIENvbHVtbkZpbHRlciwgQ29sdW1uRmlsdGVycywgQ3VycmVudEZpbHRlciwgRW1pdHRlclR5cGUsIEZpbHRlckNvbmRpdGlvbk9wdGlvbiwgU2xpY2tFdmVudCwgU2xpY2tFdmVudEhhbmRsZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IEZpbHRlckZhY3RvcnkgfSBmcm9tICcuLi9maWx0ZXJzL2ZpbHRlckZhY3RvcnknO1xyXG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi9zaGFyZWQuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpbHRlclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJGYWN0b3J5O1xyXG4gICAgcHJpdmF0ZSBzaGFyZWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBfaXNGaWx0ZXJGaXJzdFJlbmRlcjtcclxuICAgIHByaXZhdGUgX2ZpcnN0Q29sdW1uSWRSZW5kZXJlZDtcclxuICAgIHByaXZhdGUgX2ZpbHRlcnNNZXRhZGF0YTtcclxuICAgIHByaXZhdGUgX2NvbHVtbkZpbHRlcnM7XHJcbiAgICBwcml2YXRlIF9ncmlkO1xyXG4gICAgcHJpdmF0ZSBfb25TZWFyY2hDaGFuZ2U7XHJcbiAgICBwcml2YXRlIF90bXBQcmVGaWx0ZXJlZERhdGE7XHJcbiAgICBwcml2YXRlIGh0dHBDYW5jZWxSZXF1ZXN0cyQ7XHJcbiAgICBvbkZpbHRlckNoYW5nZWQ6IFN1YmplY3Q8Q3VycmVudEZpbHRlcltdPjtcclxuICAgIG9uRmlsdGVyQ2xlYXJlZDogU3ViamVjdDxib29sZWFuPjtcclxuICAgIGNvbnN0cnVjdG9yKGZpbHRlckZhY3Rvcnk6IEZpbHRlckZhY3RvcnksIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2UpO1xyXG4gICAgLyoqIEdldHRlciBvZiB0aGUgU2xpY2tHcmlkIEV2ZW50IEhhbmRsZXIgKi9cclxuICAgIHJlYWRvbmx5IGV2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XHJcbiAgICAvKiogR2V0dGVyIHRvIGtub3cgaWYgdGhlIGZpbHRlciB3YXMgYWxyZWFkeSByZW5kZXJlZCBvciBpZiBpdCB3YXMgaXRzIGZpcnN0IHRpbWUgcmVuZGVyICovXHJcbiAgICByZWFkb25seSBpc0ZpbHRlckZpcnN0UmVuZGVyOiBib29sZWFuO1xyXG4gICAgLyoqIEdldHRlciBvZiB0aGUgU2xpY2tHcmlkIEV2ZW50IEhhbmRsZXIgKi9cclxuICAgIHJlYWRvbmx5IG9uU2VhcmNoQ2hhbmdlOiBTbGlja0V2ZW50IHwgbnVsbDtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncmlkT3B0aW9ucztcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBDb2x1bW4gRGVmaW5pdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb2x1bW5EZWZpbml0aW9ucztcclxuICAgIC8qKiBHZXR0ZXIgb2YgU2xpY2tHcmlkIERhdGFWaWV3IG9iamVjdCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGF0YVZpZXc7XHJcbiAgICBpbml0KGdyaWQ6IGFueSk6IHZvaWQ7XHJcbiAgICBkaXNwb3NlKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERpc3Bvc2Ugb2YgdGhlIGZpbHRlcnMsIHNpbmNlIGl0J3MgYSBzaW5nbGV0b24sIHdlIGRvbid0IHdhbnQgdG8gYWZmZWN0IG90aGVyIGdyaWRzIHdpdGggc2FtZSBjb2x1bW5zXHJcbiAgICAgKi9cclxuICAgIGRpc3Bvc2VDb2x1bW5GaWx0ZXJzKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gY2xlYXJpbmcgb3IgZGlzcG9zaW5nIG9mIGFsbCBmaWx0ZXJzLCB3ZSBuZWVkIHRvIGxvb3AgdGhyb3VnaCBhbGwgY29sdW1uRmlsdGVycyBhbmQgZGVsZXRlIHRoZW0gMSBieSAxXHJcbiAgICAgKiBvbmx5IHRyeWluZyB0byBtYWtlIGNvbHVtbkZpbHRlciBhbiBlbXB0eSAod2l0aG91dCBsb29waW5nKSB3b3VsZCBub3QgdHJpZ2dlciBhIGRhdGFzZXQgY2hhbmdlXHJcbiAgICAgKi9cclxuICAgIHJlc2V0Q29sdW1uRmlsdGVycygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCaW5kIGEgYmFja2VuZCBmaWx0ZXIgaG9vayB0byB0aGUgZ3JpZFxyXG4gICAgICogQHBhcmFtIGdyaWQgU2xpY2tHcmlkIEdyaWQgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIGJpbmRCYWNrZW5kT25GaWx0ZXIoZ3JpZDogYW55KTogdm9pZDtcclxuICAgIGhhbmRsZUJhY2tlbmRPblNlYXJjaENoYW5nZShfZTogS2V5Ym9hcmRFdmVudCwgYXJnczogYW55KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQmluZCBhIGxvY2FsIGZpbHRlciBob29rIHRvIHRoZSBncmlkXHJcbiAgICAgKiBAcGFyYW0gZ3JpZCBTbGlja0dyaWQgR3JpZCBvYmplY3RcclxuICAgICAqIEBwYXJhbSBkYXRhVmlld1xyXG4gICAgICovXHJcbiAgICBiaW5kTG9jYWxPbkZpbHRlcihncmlkOiBhbnkpOiB2b2lkO1xyXG4gICAgaGFuZGxlTG9jYWxPblNlYXJjaENoYW5nZShfZTogS2V5Ym9hcmRFdmVudCwgYXJnczogYW55KTogdm9pZDtcclxuICAgIGNsZWFyRmlsdGVyQnlDb2x1bW5JZChldmVudDogRXZlbnQsIGNvbHVtbklkOiBudW1iZXIgfCBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqIENsZWFyIHRoZSBzZWFyY2ggZmlsdGVycyAoYmVsb3cgdGhlIGNvbHVtbiB0aXRsZXMpICovXHJcbiAgICBjbGVhckZpbHRlcnModHJpZ2dlckNoYW5nZT86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqIExvY2FsIEdyaWQgRmlsdGVyIHNlYXJjaCAqL1xyXG4gICAgY3VzdG9tTG9jYWxGaWx0ZXIoaXRlbTogYW55LCBhcmdzOiBhbnkpOiBib29sZWFuO1xyXG4gICAgZ2V0RmlsdGVyQ29uZGl0aW9uT3B0aW9uc09yQm9vbGVhbihpdGVtOiBhbnksIGNvbHVtbkZpbHRlcjogQ29sdW1uRmlsdGVyLCBjb2x1bW5JZDogc3RyaW5nIHwgbnVtYmVyLCBncmlkOiBhbnksIGRhdGFWaWV3OiBhbnkpOiBGaWx0ZXJDb25kaXRpb25PcHRpb24gfCBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHVzaW5nIFRyZWUgRGF0YSwgd2UgbmVlZCB0byBwcmVmaWx0ZXIgKHNlYXJjaCkgdGhlIGRhdGEgcHJpb3IsIHRoZSByZXN1bHQgd2lsbCBiZSBhbiBhcnJheSBvZiBJRHMgd2hpY2ggYXJlIHRoZSBub2RlKHMpIGFuZCB0aGVpciBwYXJlbnQgbm9kZXMgd2hlbiBuZWNlc3NhcnkuXHJcbiAgICAgKiBUaGlzIHdpbGwgdGhlbiBiZSBwYXNzZWQgdG8gdGhlIERhdGFWaWV3IHNldEZpbHRlcihjdXN0b21Mb2NhbEZpbHRlciksIHdoaWNoIHdpbGwgaXRzZWxmIGxvb3AgdGhyb3VnaCB0aGUgbGlzdCBvZiBJRHMgYW5kIGRpc3BsYXkvaGlkZSB0aGUgcm93IGlmIGZvdW5kIHRoYXQgYXJyYXkgb2YgSURzXHJcbiAgICAgKiBXZSBkbyB0aGlzIGluIDIgc3RlcHMgc28gdGhhdCB3ZSBjYW4gc3RpbGwgdXNlIHRoZSBEYXRhU2V0IHNldEZpbHRlcigpXHJcbiAgICAgKi9cclxuICAgIHByZUZpbHRlclRyZWVEYXRhKGlucHV0QXJyYXk6IGFueVtdLCBjb2x1bW5GaWx0ZXJzOiBDb2x1bW5GaWx0ZXJzKTogYW55W107XHJcbiAgICBnZXRDb2x1bW5GaWx0ZXJzKCk6IENvbHVtbkZpbHRlcnM7XHJcbiAgICBnZXRGaWx0ZXJzTWV0YWRhdGEoKTogYW55W107XHJcbiAgICBnZXRDdXJyZW50TG9jYWxGaWx0ZXJzKCk6IEN1cnJlbnRGaWx0ZXJbXTtcclxuICAgIC8qKlxyXG4gICAgICogQSBzaW1wbGUgZnVuY3Rpb24gdGhhdCBpcyBiaW5kZWQgdG8gdGhlIHN1YnNjcmliZXIgYW5kIGVtaXQgYSBjaGFuZ2Ugd2hlbiB0aGUgZmlsdGVyIGlzIGNhbGxlZC5cclxuICAgICAqIE90aGVyIHNlcnZpY2VzLCBsaWtlIFBhZ2luYXRpb24sIGNhbiB0aGVuIHN1YnNjcmliZSB0byBpdC5cclxuICAgICAqIEBwYXJhbSBjYWxsZXJcclxuICAgICAqL1xyXG4gICAgZW1pdEZpbHRlckNoYW5nZWQoY2FsbGVyOiBFbWl0dGVyVHlwZSk6IHZvaWQ7XHJcbiAgICBvbkJhY2tlbmRGaWx0ZXJDaGFuZ2UoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGFyZ3M6IGFueSk6IFByb21pc2U8dm9pZD47XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdXNlciBwYXNzZXMgYW4gYXJyYXkgb2YgcHJlc2V0IGZpbHRlcnMsIHdlIG5lZWQgdG8gcHJlLXBvcHVsYXRlIGVhY2ggY29sdW1uIGZpbHRlciBzZWFyY2hUZXJtKHMpXHJcbiAgICAgKiBUaGUgcHJvY2VzcyBpcyB0byBsb29wIHRocm91Z2ggdGhlIHByZXNldCBmaWx0ZXJzIGFycmF5LCBmaW5kIHRoZSBhc3NvY2lhdGVkIGNvbHVtbiBmcm9tIGNvbHVtbkRlZmluaXRpb25zIGFuZCBmaWxsIGluIHRoZSBmaWx0ZXIgb2JqZWN0IHNlYXJjaFRlcm0ocylcclxuICAgICAqIFRoaXMgaXMgYmFzaWNhbGx5IHRoZSBzYW1lIGFzIGlmIHdlIHdvdWxkIG1hbnVhbGx5IGFkZCBzZWFyY2hUZXJtKHMpIHRvIGEgY29sdW1uIGZpbHRlciBvYmplY3QgaW4gdGhlIGNvbHVtbiBkZWZpbml0aW9uLCBidXQgd2UgZG8gaXQgcHJvZ3JhbW1hdGljYWxseS5cclxuICAgICAqIEF0IHRoZSBlbmQgb2YgdGhlIGRheSwgd2hlbiBjcmVhdGluZyB0aGUgRmlsdGVyIChET00gRWxlbWVudCksIGl0IHdpbGwgdXNlIHRoZXNlIHNlYXJjaFRlcm0ocykgc28gd2UgY2FuIHRha2UgYWR2YW50YWdlIG9mIHRoYXQgd2l0aG91dCByZWNvZGluZyBlYWNoIEZpbHRlciB0eXBlIChET00gZWxlbWVudClcclxuICAgICAqL1xyXG4gICAgcG9wdWxhdGVDb2x1bW5GaWx0ZXJTZWFyY2hUZXJtUHJlc2V0cyhmaWx0ZXJzOiBDdXJyZW50RmlsdGVyW10pOiBDb2x1bW48YW55PltdO1xyXG4gICAgLyoqXHJcbiAgICAgKiB3aGVuIHdlIGhhdmUgYSBGaWx0ZXIgUHJlc2V0cyBvbiBhIFRyZWUgRGF0YSBWaWV3IGdyaWQsIHdlIG5lZWQgdG8gY2FsbCB0aGUgcHJlLWZpbHRlcmluZyBvZiB0cmVlIGRhdGFcclxuICAgICAqIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWNhdXNlIFRyZWUgRGF0YSBpcyB0aGUgb25seSB0eXBlIG9mIGdyaWQgdGhhdCByZXF1aXJlcyBhIHByZS1maWx0ZXIgKHByZUZpbHRlclRyZWVEYXRhKSB0byBiZSBleGVjdXRlZCBiZWZvcmUgdGhlIGZpbmFsIGZpbHRlcmluZ1xyXG4gICAgICogQHBhcmFtIGZpbHRlcnNcclxuICAgICAqL1xyXG4gICAgcmVmcmVzaFRyZWVEYXRhRmlsdGVycygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgdGhlIEZpbHRlciBGdW5jdGlvbmFsaXR5XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRmlsdGVyRGlzYWJsZWQgLSBvcHRpb25hbGx5IGZvcmNlIGEgZGlzYWJsZS9lbmFibGUgb2YgdGhlIFNvcnQgRnVuY3Rpb25hbGl0eT8gRGVmYXVsdHMgdG8gVHJ1ZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjbGVhckZpbHRlcnNXaGVuRGlzYWJsZWQgLSB3aGVuIGRpc2FibGluZyB0aGUgRmlsdGVyLCBkbyB3ZSBhbHNvIHdhbnQgdG8gY2xlYXIgYWxsIHRoZSBmaWx0ZXJzIGFzIHdlbGw/IERlZmF1bHRzIHRvIFRydWVcclxuICAgICAqL1xyXG4gICAgZGlzYWJsZUZpbHRlckZ1bmN0aW9uYWxpdHkoaXNGaWx0ZXJEaXNhYmxlZD86IGJvb2xlYW4sIGNsZWFyRmlsdGVyc1doZW5EaXNhYmxlZD86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgdGhlIEZpbHRlciBGdW5jdGlvbmFsaXR5IChzaG93L2hpZGUgdGhlIGhlYWRlciByb3cgZmlsdGVyIGJhciBhcyB3ZWxsKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjbGVhckZpbHRlcnNXaGVuRGlzYWJsZWQgLSB3aGVuIGRpc2FibGluZyB0aGUgZmlsdGVycywgZG8gd2Ugd2FudCB0byBjbGVhciB0aGUgZmlsdGVycyBiZWZvcmUgaGlkaW5nIHRoZSBmaWx0ZXJzPyBEZWZhdWx0cyB0byBUcnVlXHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZUZpbHRlckZ1bmN0aW9uYWxpdHkoY2xlYXJGaWx0ZXJzV2hlbkRpc2FibGVkPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSB0aGUgSGVhZGVyIFJvdyBmaWx0ZXIgYmFyICh0aGlzIGRvZXMgbm90IGRpc2FibGUgdGhlIEZpbHRlcmluZyBpdHNlbGYsIHlvdSBjYW4gdXNlIFwidG9nZ2xlRmlsdGVyRnVuY3Rpb25hbGl0eSgpXCIgaW5zdGVhZCwgaG93ZXZlciB0aGlzIHdpbGwgcmVzZXQgYW55IGNvbHVtbiBwb3NpdGlvbnMpXHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZUhlYWRlckZpbHRlclJvdygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHNvcnQgaWNvbnMgaW4gdGhlIFVJIChPTkxZIHRoZSBpY29ucywgaXQgZG9lcyBub3QgZG8gYW55IHNvcnRpbmcpXHJcbiAgICAgKiBUaGUgY29sdW1uIHNvcnQgaWNvbnMgYXJlIG5vdCBuZWNlc3NhcmlseSBpbnRlci1jb25uZWN0ZWQgdG8gdGhlIHNvcnRpbmcgZnVuY3Rpb25hbGl0eSBpdHNlbGYsXHJcbiAgICAgKiB5b3UgY2FuIGNoYW5nZSB0aGUgc29ydGluZyBpY29ucyBzZXBhcmF0ZWx5IGJ5IHBhc3NpbmcgYW4gYXJyYXkgb2YgY29sdW1uSWQvc29ydEFzYyBhbmQgdGhhdCB3aWxsIGNoYW5nZSBPTkxZIHRoZSBpY29uc1xyXG4gICAgICogQHBhcmFtIHNvcnRDb2x1bW5zXHJcbiAgICAgKi9cclxuICAgIHNldFNvcnRDb2x1bW5JY29ucyhzb3J0Q29sdW1uczoge1xyXG4gICAgICAgIGNvbHVtbklkOiBzdHJpbmc7XHJcbiAgICAgICAgc29ydEFzYzogYm9vbGVhbjtcclxuICAgIH1bXSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBGaWx0ZXJzIGR5bmFtaWNhbGx5IGp1c3QgYnkgcHJvdmlkaW5nIGFuIGFycmF5IG9mIGZpbHRlcihzKS5cclxuICAgICAqIFlvdSBjYW4gYWxzbyBjaG9vc2UgZW1pdCAoZGVmYXVsdCkgYSBGaWx0ZXIgQ2hhbmdlZCBldmVudCB0aGF0IHdpbGwgYmUgcGlja2VkIGJ5IHRoZSBHcmlkIFN0YXRlIFNlcnZpY2UuXHJcbiAgICAgKlxyXG4gICAgICogQWxzbyBmb3IgYmFja2VuZCBzZXJ2aWNlIG9ubHksIHlvdSBjYW4gY2hvb3NlIHRvIHRyaWdnZXIgYSBiYWNrZW5kIHF1ZXJ5IChkZWZhdWx0KSBvciBub3QgaWYgeW91IHdpc2ggdG8gZG8gaXQgbGF0ZXIsXHJcbiAgICAgKiB0aGlzIGNvdWxkIGJlIHVzZWZ1bCB3aGVuIHVzaW5nIHVwZGF0ZUZpbHRlcnMgJiB1cGRhdGVTb3J0aW5nIGFuZCB5b3Ugd2lzaCB0byBvbmx5IHNlbmQgdGhlIGJhY2tlbmQgcXVlcnkgb25jZS5cclxuICAgICAqIEBwYXJhbSBmaWx0ZXJzIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gdHJpZ2dlckV2ZW50IGRlZmF1bHRzIHRvIFRydWUsIGRvIHdlIHdhbnQgdG8gZW1pdCBhIGZpbHRlciBjaGFuZ2VkIGV2ZW50P1xyXG4gICAgICogQHBhcmFtIHRyaWdnZXJCYWNrZW5kUXVlcnkgZGVmYXVsdHMgdG8gVHJ1ZSwgd2hpY2ggd2lsbCBxdWVyeSB0aGUgYmFja2VuZC5cclxuICAgICAqL1xyXG4gICAgdXBkYXRlRmlsdGVycyhmaWx0ZXJzOiBDdXJyZW50RmlsdGVyW10sIGVtaXRDaGFuZ2VkRXZlbnQ/OiBib29sZWFuLCB0cmlnZ2VyQmFja2VuZFF1ZXJ5PzogYm9vbGVhbiwgdHJpZ2dlck9uU2VhcmNoQ2hhbmdlRXZlbnQ/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBBZGQgYWxsIGNyZWF0ZWQgZmlsdGVycyAoZnJvbSB0aGVpciB0ZW1wbGF0ZSkgdG8gdGhlIGhlYWRlciByb3cgc2VjdGlvbiBhcmVhICovXHJcbiAgICBwcml2YXRlIGFkZEZpbHRlclRlbXBsYXRlVG9IZWFkZXJSb3c7XHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBhbmQgZXhlY3V0ZWQgYnkgdGhlIGluZGl2aWR1YWwgRmlsdGVyIChET00gZWxlbWVudCksXHJcbiAgICAgKiBmb3IgZXhhbXBsZSB3aGVuIHVzZXIgdHlwZSBpbiBhIHdvcmQgdG8gc2VhcmNoICh3aGljaCB1c2VzIElucHV0RmlsdGVyKSwgdGhpcyBGaWx0ZXIgd2lsbCBleGVjdXRlIHRoZSBjYWxsYmFjayBmcm9tIGFuIGlucHV0IGNoYW5nZSBldmVudC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxsYmFja1NlYXJjaEV2ZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb29wIHRocm91Z2ggYWxsIGNvbHVtbiBkZWZpbml0aW9ucyBhbmQgZG8gdGhlIGZvbGxvd2luZyB0aGluZ1xyXG4gICAgICogMS4gbG9vcCB0aHJvdWdoIGVhY2ggSGVhZGVyIE1lbnUgY29tbWFuZHMgYW5kIGNoYW5nZSB0aGUgXCJoaWRkZW5cIiBjb21tYW5kcyB0byBzaG93L2hpZGUgZGVwZW5kaW5nIGlmIGl0J3MgZW5hYmxlZC9kaXNhYmxlZFxyXG4gICAgICogQWxzbyBub3RlIHRoYXQgd2UgYXJlbid0IGRlbGV0aW5nIGFueSBwcm9wZXJ0aWVzLCB3ZSBqdXN0IHRvZ2dsZSB0aGVpciBmbGFncyBzbyB0aGF0IHdlIGNhbiByZWxvb3AgdGhyb3VnaCBhdCBsYXRlciBwb2ludCBpbiB0aW1lLlxyXG4gICAgICogKGlmIHdlIHByZXZpb3VzbHkgZGVsZXRlZCB0aGVzZSBwcm9wZXJ0aWVzIHdlIHdvdWxkbid0IGJlIGFibGUgdG8gY2hhbmdlIHRoZW0gYmFjayBzaW5jZSB0aGVzZSBwcm9wZXJ0aWVzIHdvdWxkbid0IGV4aXN0IGFueW1vcmUsIGhlbmNlIHdoeSB3ZSBqdXN0IGhpZGUgdGhlIGNvbW1hbmRzKVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0Rpc2FibGluZyAtIGFyZSB3ZSBkaXNhYmxpbmcgdGhlIGZpbHRlciBmdW5jdGlvbmFsaXR5PyBEZWZhdWx0cyB0byB0cnVlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGlzYWJsZUFsbEZpbHRlcmluZ0NvbW1hbmRzO1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVDb2x1bW5GaWx0ZXJzO1xyXG59XHJcbiJdfQ==