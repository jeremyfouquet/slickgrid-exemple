import { TranslateService } from '@ngx-translate/core';
import { Extension, SlickEventHandler } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { SharedService } from '../services/shared.service';
import { ExportService } from '../services/export.service';
import { ExcelExportService } from '../services/excelExport.service';
import { TreeDataService } from '../services/treeData.service';
import * as ɵngcc0 from '@angular/core';
export declare class ContextMenuExtension implements Extension {
    private excelExportService;
    private exportService;
    private extensionUtility;
    private sharedService;
    private treeDataService;
    private translate;
    private _addon;
    private _contextMenuOptions;
    private _eventHandler;
    private _userOriginalContextMenu;
    constructor(excelExportService: ExcelExportService, exportService: ExportService, extensionUtility: ExtensionUtility, sharedService: SharedService, treeDataService: TreeDataService, translate: TranslateService);
    readonly eventHandler: SlickEventHandler;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    /**
     * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    register(): any;
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    translateContextMenu(): void;
    /** Create Context Menu with Custom Commands (copy cell value, export) */
    private addMenuCustomCommands;
    /**
     * First get the value, if "exportWithFormatter" is set then we'll use the formatter output
     * Then we create the DOM trick to copy a text value by creating a fake <div> that is not shown to the user
     * and from there we can call the execCommand 'copy' command and expect the value to be in clipboard
     * @param args
     */
    private copyToClipboard;
    /**
     * When a queryFieldNameGetterFn is defined, then get the value from that getter callback function
     * @param columnDef
     * @param dataContext
     * @return cellValue
     */
    private getCellValueFromQueryFieldGetter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContextMenuExtension, [null, null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ContextMenuExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dE1lbnVFeHRlbnNpb24uZC50cyIsInNvdXJjZXMiOlsiY29udGV4dE1lbnVFeHRlbnNpb24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uLCBTbGlja0V2ZW50SGFuZGxlciB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvblV0aWxpdHkgfSBmcm9tICcuL2V4dGVuc2lvblV0aWxpdHknO1xyXG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2hhcmVkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeHBvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZXhwb3J0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeGNlbEV4cG9ydFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9leGNlbEV4cG9ydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVHJlZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHJlZURhdGEuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvbnRleHRNZW51RXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICAgIHByaXZhdGUgZXhjZWxFeHBvcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBleHBvcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBleHRlbnNpb25VdGlsaXR5O1xyXG4gICAgcHJpdmF0ZSBzaGFyZWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSB0cmVlRGF0YVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTtcclxuICAgIHByaXZhdGUgX2FkZG9uO1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dE1lbnVPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBfdXNlck9yaWdpbmFsQ29udGV4dE1lbnU7XHJcbiAgICBjb25zdHJ1Y3RvcihleGNlbEV4cG9ydFNlcnZpY2U6IEV4Y2VsRXhwb3J0U2VydmljZSwgZXhwb3J0U2VydmljZTogRXhwb3J0U2VydmljZSwgZXh0ZW5zaW9uVXRpbGl0eTogRXh0ZW5zaW9uVXRpbGl0eSwgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSwgdHJlZURhdGFTZXJ2aWNlOiBUcmVlRGF0YVNlcnZpY2UsIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSk7XHJcbiAgICByZWFkb25seSBldmVudEhhbmRsZXI6IFNsaWNrRXZlbnRIYW5kbGVyO1xyXG4gICAgZGlzcG9zZSgpOiB2b2lkO1xyXG4gICAgLyoqIEdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlIFNsaWNrR3JpZCBhZGRvbiAoY29udHJvbCBvciBwbHVnaW4pLiAqL1xyXG4gICAgZ2V0QWRkb25JbnN0YW5jZSgpOiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSB0aGUgQWN0aW9uIENlbGwgTWVudSBhbmQgZXhwb3NlIGFsbCB0aGUgYXZhaWxhYmxlIGhvb2tzIHRoYXQgdXNlciBjYW4gc3Vic2NyaWJlIChvbkNvbW1hbmQsIG9uQmVmb3JlTWVudVNob3csIC4uLilcclxuICAgICAqIEBwYXJhbSBncmlkXHJcbiAgICAgKiBAcGFyYW0gZGF0YVZpZXdcclxuICAgICAqIEBwYXJhbSBjb2x1bW5EZWZpbml0aW9uc1xyXG4gICAgICovXHJcbiAgICByZWdpc3RlcigpOiBhbnk7XHJcbiAgICAvKiogVHJhbnNsYXRlIHRoZSBDZWxsIE1lbnUgdGl0bGVzLCB3ZSBuZWVkIHRvIGxvb3AgdGhyb3VnaCBhbGwgY29sdW1uIGRlZmluaXRpb24gdG8gcmUtdHJhbnNsYXRlIHRoZW0gKi9cclxuICAgIHRyYW5zbGF0ZUNvbnRleHRNZW51KCk6IHZvaWQ7XHJcbiAgICAvKiogQ3JlYXRlIENvbnRleHQgTWVudSB3aXRoIEN1c3RvbSBDb21tYW5kcyAoY29weSBjZWxsIHZhbHVlLCBleHBvcnQpICovXHJcbiAgICBwcml2YXRlIGFkZE1lbnVDdXN0b21Db21tYW5kcztcclxuICAgIC8qKlxyXG4gICAgICogRmlyc3QgZ2V0IHRoZSB2YWx1ZSwgaWYgXCJleHBvcnRXaXRoRm9ybWF0dGVyXCIgaXMgc2V0IHRoZW4gd2UnbGwgdXNlIHRoZSBmb3JtYXR0ZXIgb3V0cHV0XHJcbiAgICAgKiBUaGVuIHdlIGNyZWF0ZSB0aGUgRE9NIHRyaWNrIHRvIGNvcHkgYSB0ZXh0IHZhbHVlIGJ5IGNyZWF0aW5nIGEgZmFrZSA8ZGl2PiB0aGF0IGlzIG5vdCBzaG93biB0byB0aGUgdXNlclxyXG4gICAgICogYW5kIGZyb20gdGhlcmUgd2UgY2FuIGNhbGwgdGhlIGV4ZWNDb21tYW5kICdjb3B5JyBjb21tYW5kIGFuZCBleHBlY3QgdGhlIHZhbHVlIHRvIGJlIGluIGNsaXBib2FyZFxyXG4gICAgICogQHBhcmFtIGFyZ3NcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb3B5VG9DbGlwYm9hcmQ7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSBxdWVyeUZpZWxkTmFtZUdldHRlckZuIGlzIGRlZmluZWQsIHRoZW4gZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoYXQgZ2V0dGVyIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0gY29sdW1uRGVmXHJcbiAgICAgKiBAcGFyYW0gZGF0YUNvbnRleHRcclxuICAgICAqIEByZXR1cm4gY2VsbFZhbHVlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Q2VsbFZhbHVlRnJvbVF1ZXJ5RmllbGRHZXR0ZXI7XHJcbn1cclxuIl19