import { TranslateService } from '@ngx-translate/core';
import { Extension, GridOption, SlickEventHandler } from '../models';
import { ExcelExportService } from '../services/excelExport.service';
import { ExportService } from '../services/export.service';
import { ExtensionUtility } from './extensionUtility';
import { FilterService } from '../services/filter.service';
import { SortService } from '../services/sort.service';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class GridMenuExtension implements Extension {
    private excelExportService;
    private exportService;
    private extensionUtility;
    private filterService;
    private sharedService;
    private sortService;
    private translate;
    private _addon;
    private _gridMenuOptions;
    private _areVisibleColumnDifferent;
    private _eventHandler;
    private _locales;
    private _userOriginalGridMenu;
    constructor(excelExportService: ExcelExportService, exportService: ExportService, extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService, sortService: SortService, translate: TranslateService);
    readonly eventHandler: SlickEventHandler;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    /** Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...) */
    register(): any;
    /** Refresh the dataset through the Backend Service */
    refreshBackendDataset(gridOptions?: GridOption): void;
    showGridMenu(e: any): void;
    /** Translate the Grid Menu titles and column picker */
    translateGridMenu(): void;
    /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */
    private addGridMenuCustomCommands;
    /**
     * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe
     * These are the default internal custom commands
     * @param event
     * @param GridMenuItem args
     */
    private executeGridMenuInternalCustomCommands;
    private emptyGridMenuTitles;
    /** @return default Grid Menu options */
    private getDefaultGridMenuOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridMenuExtension, [null, null, null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridMenuExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZE1lbnVFeHRlbnNpb24uZC50cyIsInNvdXJjZXMiOlsiZ3JpZE1lbnVFeHRlbnNpb24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb24sIEdyaWRPcHRpb24sIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuaW1wb3J0IHsgRXhjZWxFeHBvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZXhjZWxFeHBvcnQuc2VydmljZSc7XHJcbmltcG9ydCB7IEV4cG9ydFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9leHBvcnQuc2VydmljZSc7XHJcbmltcG9ydCB7IEV4dGVuc2lvblV0aWxpdHkgfSBmcm9tICcuL2V4dGVuc2lvblV0aWxpdHknO1xyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZmlsdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTb3J0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NvcnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoYXJlZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zaGFyZWQuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyaWRNZW51RXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICAgIHByaXZhdGUgZXhjZWxFeHBvcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBleHBvcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBleHRlbnNpb25VdGlsaXR5O1xyXG4gICAgcHJpdmF0ZSBmaWx0ZXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBzaGFyZWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBzb3J0U2VydmljZTtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlO1xyXG4gICAgcHJpdmF0ZSBfYWRkb247XHJcbiAgICBwcml2YXRlIF9ncmlkTWVudU9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9hcmVWaXNpYmxlQ29sdW1uRGlmZmVyZW50O1xyXG4gICAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyO1xyXG4gICAgcHJpdmF0ZSBfbG9jYWxlcztcclxuICAgIHByaXZhdGUgX3VzZXJPcmlnaW5hbEdyaWRNZW51O1xyXG4gICAgY29uc3RydWN0b3IoZXhjZWxFeHBvcnRTZXJ2aWNlOiBFeGNlbEV4cG9ydFNlcnZpY2UsIGV4cG9ydFNlcnZpY2U6IEV4cG9ydFNlcnZpY2UsIGV4dGVuc2lvblV0aWxpdHk6IEV4dGVuc2lvblV0aWxpdHksIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UsIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2UsIHNvcnRTZXJ2aWNlOiBTb3J0U2VydmljZSwgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlKTtcclxuICAgIHJlYWRvbmx5IGV2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XHJcbiAgICBkaXNwb3NlKCk6IHZvaWQ7XHJcbiAgICAvKiogR2V0IHRoZSBpbnN0YW5jZSBvZiB0aGUgU2xpY2tHcmlkIGFkZG9uIChjb250cm9sIG9yIHBsdWdpbikuICovXHJcbiAgICBnZXRBZGRvbkluc3RhbmNlKCk6IGFueTtcclxuICAgIC8qKiBDcmVhdGUgdGhlIEhlYWRlciBNZW51IGFuZCBleHBvc2UgYWxsIHRoZSBhdmFpbGFibGUgaG9va3MgdGhhdCB1c2VyIGNhbiBzdWJzY3JpYmUgKG9uQ29tbWFuZCwgb25CZWZvcmVNZW51U2hvdywgLi4uKSAqL1xyXG4gICAgcmVnaXN0ZXIoKTogYW55O1xyXG4gICAgLyoqIFJlZnJlc2ggdGhlIGRhdGFzZXQgdGhyb3VnaCB0aGUgQmFja2VuZCBTZXJ2aWNlICovXHJcbiAgICByZWZyZXNoQmFja2VuZERhdGFzZXQoZ3JpZE9wdGlvbnM/OiBHcmlkT3B0aW9uKTogdm9pZDtcclxuICAgIHNob3dHcmlkTWVudShlOiBhbnkpOiB2b2lkO1xyXG4gICAgLyoqIFRyYW5zbGF0ZSB0aGUgR3JpZCBNZW51IHRpdGxlcyBhbmQgY29sdW1uIHBpY2tlciAqL1xyXG4gICAgdHJhbnNsYXRlR3JpZE1lbnUoKTogdm9pZDtcclxuICAgIC8qKiBDcmVhdGUgR3JpZCBNZW51IHdpdGggQ3VzdG9tIENvbW1hbmRzIGlmIHVzZXIgaGFzIGVuYWJsZWQgRmlsdGVycyBhbmQvb3IgdXNlcyBhIEJhY2tlbmQgU2VydmljZSAoT0RhdGEsIEdyYXBoUUwpICovXHJcbiAgICBwcml2YXRlIGFkZEdyaWRNZW51Q3VzdG9tQ29tbWFuZHM7XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGUgdGhlIEdyaWQgTWVudSBDdXN0b20gY29tbWFuZCBjYWxsYmFjayB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIG9uQ29tbWFuZCBzdWJzY3JpYmVcclxuICAgICAqIFRoZXNlIGFyZSB0aGUgZGVmYXVsdCBpbnRlcm5hbCBjdXN0b20gY29tbWFuZHNcclxuICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICogQHBhcmFtIEdyaWRNZW51SXRlbSBhcmdzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZXhlY3V0ZUdyaWRNZW51SW50ZXJuYWxDdXN0b21Db21tYW5kcztcclxuICAgIHByaXZhdGUgZW1wdHlHcmlkTWVudVRpdGxlcztcclxuICAgIC8qKiBAcmV0dXJuIGRlZmF1bHQgR3JpZCBNZW51IG9wdGlvbnMgKi9cclxuICAgIHByaXZhdGUgZ2V0RGVmYXVsdEdyaWRNZW51T3B0aW9ucztcclxufVxyXG4iXX0=