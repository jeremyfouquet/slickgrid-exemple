import { ApplicationRef, ComponentRef, ViewContainerRef } from '@angular/core';
import { Column, Extension, GridOption, RowDetailView, SlickEventHandler } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { AngularUtilService } from '../services/angularUtil.service';
import { FilterService } from '../services/filter.service';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
export interface CreatedView {
    id: string | number;
    dataContext: any;
    componentRef?: ComponentRef<any>;
}
export declare class RowDetailViewExtension implements Extension {
    private angularUtilService;
    private appRef;
    private extensionUtility;
    private filterService;
    private sharedService;
    rowDetailContainer: ViewContainerRef;
    private _addon;
    private _addonOptions;
    private _eventHandler;
    private _preloadComponent;
    private _views;
    private _viewComponent;
    private _subscriptions;
    private _userProcessFn;
    constructor(angularUtilService: AngularUtilService, appRef: ApplicationRef, extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService);
    private readonly datasetIdPropName;
    readonly eventHandler: SlickEventHandler;
    readonly gridOptions: GridOption;
    readonly rowDetailViewOptions: RowDetailView;
    /** Dispose of the RowDetailView Extension */
    dispose(): void;
    /** Dispose of all the opened Row Detail Panels Angular View Components */
    disposeAllViewComponents(): void;
    /**
     * Create the plugin before the Grid creation, else it will behave oddly.
     * Mostly because the column definitions might change after the grid creation
     */
    create(columnDefinitions: Column[], gridOptions: GridOption): any;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    register(rowSelectionPlugin?: any): any;
    /** Redraw (re-render) all the expanded row detail View Components */
    redrawAllViewComponents(): void;
    /** Render all the expanded row detail View Components */
    renderAllViewComponents(): void;
    /** Redraw the necessary View Component */
    redrawViewComponent(createdView: CreatedView): void;
    /** Render (or re-render) the View Component (Row Detail) */
    renderPreloadView(): void;
    /** Render (or re-render) the View Component (Row Detail) */
    renderViewModel(item: any): CreatedView | null;
    private disposeViewComponent;
    /**
     * notify the onAsyncResponse with the "args.item" (required property)
     * the plugin will then use item to populate the row detail panel with the "postTemplate"
     * @param item
     */
    private notifyTemplate;
    /**
     * On Processing, we will notify the plugin with the new item detail once backend server call completes
     * @param item
     */
    private onProcessing;
    /**
     * Just before the row get expanded or collapsed we will do the following
     * First determine if the row is expanding or collapsing,
     * if it's expanding we will add it to our View Components reference array if we don't already have it
     * or if it's collapsing we will remove it from our View Components reference array
     */
    private onBeforeRowDetailToggle;
    /** When Row comes back to Viewport Range, we need to redraw the View */
    private onRowBackToViewportRange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RowDetailViewExtension, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RowDetailViewExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93RGV0YWlsVmlld0V4dGVuc2lvbi5kLnRzIiwic291cmNlcyI6WyJyb3dEZXRhaWxWaWV3RXh0ZW5zaW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2x1bW4sIEV4dGVuc2lvbiwgR3JpZE9wdGlvbiwgUm93RGV0YWlsVmlldywgU2xpY2tFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25VdGlsaXR5IH0gZnJvbSAnLi9leHRlbnNpb25VdGlsaXR5JztcclxuaW1wb3J0IHsgQW5ndWxhclV0aWxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYW5ndWxhclV0aWwuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoYXJlZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zaGFyZWQuc2VydmljZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlZFZpZXcge1xyXG4gICAgaWQ6IHN0cmluZyB8IG51bWJlcjtcclxuICAgIGRhdGFDb250ZXh0OiBhbnk7XHJcbiAgICBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8YW55PjtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSb3dEZXRhaWxWaWV3RXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICAgIHByaXZhdGUgYW5ndWxhclV0aWxTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBhcHBSZWY7XHJcbiAgICBwcml2YXRlIGV4dGVuc2lvblV0aWxpdHk7XHJcbiAgICBwcml2YXRlIGZpbHRlclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHNoYXJlZFNlcnZpY2U7XHJcbiAgICByb3dEZXRhaWxDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBwcml2YXRlIF9hZGRvbjtcclxuICAgIHByaXZhdGUgX2FkZG9uT3B0aW9ucztcclxuICAgIHByaXZhdGUgX2V2ZW50SGFuZGxlcjtcclxuICAgIHByaXZhdGUgX3ByZWxvYWRDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIF92aWV3cztcclxuICAgIHByaXZhdGUgX3ZpZXdDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIF9zdWJzY3JpcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfdXNlclByb2Nlc3NGbjtcclxuICAgIGNvbnN0cnVjdG9yKGFuZ3VsYXJVdGlsU2VydmljZTogQW5ndWxhclV0aWxTZXJ2aWNlLCBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCBleHRlbnNpb25VdGlsaXR5OiBFeHRlbnNpb25VdGlsaXR5LCBmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlLCBzaGFyZWRTZXJ2aWNlOiBTaGFyZWRTZXJ2aWNlKTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YXNldElkUHJvcE5hbWU7XHJcbiAgICByZWFkb25seSBldmVudEhhbmRsZXI6IFNsaWNrRXZlbnRIYW5kbGVyO1xyXG4gICAgcmVhZG9ubHkgZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb247XHJcbiAgICByZWFkb25seSByb3dEZXRhaWxWaWV3T3B0aW9uczogUm93RGV0YWlsVmlldztcclxuICAgIC8qKiBEaXNwb3NlIG9mIHRoZSBSb3dEZXRhaWxWaWV3IEV4dGVuc2lvbiAqL1xyXG4gICAgZGlzcG9zZSgpOiB2b2lkO1xyXG4gICAgLyoqIERpc3Bvc2Ugb2YgYWxsIHRoZSBvcGVuZWQgUm93IERldGFpbCBQYW5lbHMgQW5ndWxhciBWaWV3IENvbXBvbmVudHMgKi9cclxuICAgIGRpc3Bvc2VBbGxWaWV3Q29tcG9uZW50cygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgdGhlIHBsdWdpbiBiZWZvcmUgdGhlIEdyaWQgY3JlYXRpb24sIGVsc2UgaXQgd2lsbCBiZWhhdmUgb2RkbHkuXHJcbiAgICAgKiBNb3N0bHkgYmVjYXVzZSB0aGUgY29sdW1uIGRlZmluaXRpb25zIG1pZ2h0IGNoYW5nZSBhZnRlciB0aGUgZ3JpZCBjcmVhdGlvblxyXG4gICAgICovXHJcbiAgICBjcmVhdGUoY29sdW1uRGVmaW5pdGlvbnM6IENvbHVtbltdLCBncmlkT3B0aW9uczogR3JpZE9wdGlvbik6IGFueTtcclxuICAgIC8qKiBHZXQgdGhlIGluc3RhbmNlIG9mIHRoZSBTbGlja0dyaWQgYWRkb24gKGNvbnRyb2wgb3IgcGx1Z2luKS4gKi9cclxuICAgIGdldEFkZG9uSW5zdGFuY2UoKTogYW55O1xyXG4gICAgcmVnaXN0ZXIocm93U2VsZWN0aW9uUGx1Z2luPzogYW55KTogYW55O1xyXG4gICAgLyoqIFJlZHJhdyAocmUtcmVuZGVyKSBhbGwgdGhlIGV4cGFuZGVkIHJvdyBkZXRhaWwgVmlldyBDb21wb25lbnRzICovXHJcbiAgICByZWRyYXdBbGxWaWV3Q29tcG9uZW50cygpOiB2b2lkO1xyXG4gICAgLyoqIFJlbmRlciBhbGwgdGhlIGV4cGFuZGVkIHJvdyBkZXRhaWwgVmlldyBDb21wb25lbnRzICovXHJcbiAgICByZW5kZXJBbGxWaWV3Q29tcG9uZW50cygpOiB2b2lkO1xyXG4gICAgLyoqIFJlZHJhdyB0aGUgbmVjZXNzYXJ5IFZpZXcgQ29tcG9uZW50ICovXHJcbiAgICByZWRyYXdWaWV3Q29tcG9uZW50KGNyZWF0ZWRWaWV3OiBDcmVhdGVkVmlldyk6IHZvaWQ7XHJcbiAgICAvKiogUmVuZGVyIChvciByZS1yZW5kZXIpIHRoZSBWaWV3IENvbXBvbmVudCAoUm93IERldGFpbCkgKi9cclxuICAgIHJlbmRlclByZWxvYWRWaWV3KCk6IHZvaWQ7XHJcbiAgICAvKiogUmVuZGVyIChvciByZS1yZW5kZXIpIHRoZSBWaWV3IENvbXBvbmVudCAoUm93IERldGFpbCkgKi9cclxuICAgIHJlbmRlclZpZXdNb2RlbChpdGVtOiBhbnkpOiBDcmVhdGVkVmlldyB8IG51bGw7XHJcbiAgICBwcml2YXRlIGRpc3Bvc2VWaWV3Q29tcG9uZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBub3RpZnkgdGhlIG9uQXN5bmNSZXNwb25zZSB3aXRoIHRoZSBcImFyZ3MuaXRlbVwiIChyZXF1aXJlZCBwcm9wZXJ0eSlcclxuICAgICAqIHRoZSBwbHVnaW4gd2lsbCB0aGVuIHVzZSBpdGVtIHRvIHBvcHVsYXRlIHRoZSByb3cgZGV0YWlsIHBhbmVsIHdpdGggdGhlIFwicG9zdFRlbXBsYXRlXCJcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5VGVtcGxhdGU7XHJcbiAgICAvKipcclxuICAgICAqIE9uIFByb2Nlc3NpbmcsIHdlIHdpbGwgbm90aWZ5IHRoZSBwbHVnaW4gd2l0aCB0aGUgbmV3IGl0ZW0gZGV0YWlsIG9uY2UgYmFja2VuZCBzZXJ2ZXIgY2FsbCBjb21wbGV0ZXNcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25Qcm9jZXNzaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBKdXN0IGJlZm9yZSB0aGUgcm93IGdldCBleHBhbmRlZCBvciBjb2xsYXBzZWQgd2Ugd2lsbCBkbyB0aGUgZm9sbG93aW5nXHJcbiAgICAgKiBGaXJzdCBkZXRlcm1pbmUgaWYgdGhlIHJvdyBpcyBleHBhbmRpbmcgb3IgY29sbGFwc2luZyxcclxuICAgICAqIGlmIGl0J3MgZXhwYW5kaW5nIHdlIHdpbGwgYWRkIGl0IHRvIG91ciBWaWV3IENvbXBvbmVudHMgcmVmZXJlbmNlIGFycmF5IGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBpdFxyXG4gICAgICogb3IgaWYgaXQncyBjb2xsYXBzaW5nIHdlIHdpbGwgcmVtb3ZlIGl0IGZyb20gb3VyIFZpZXcgQ29tcG9uZW50cyByZWZlcmVuY2UgYXJyYXlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkJlZm9yZVJvd0RldGFpbFRvZ2dsZTtcclxuICAgIC8qKiBXaGVuIFJvdyBjb21lcyBiYWNrIHRvIFZpZXdwb3J0IFJhbmdlLCB3ZSBuZWVkIHRvIHJlZHJhdyB0aGUgVmlldyAqL1xyXG4gICAgcHJpdmF0ZSBvblJvd0JhY2tUb1ZpZXdwb3J0UmFuZ2U7XHJcbn1cclxuIl19