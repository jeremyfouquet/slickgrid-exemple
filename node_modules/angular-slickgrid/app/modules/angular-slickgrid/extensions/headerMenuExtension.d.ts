import { TranslateService } from '@ngx-translate/core';
import { Column, Extension, SlickEventHandler } from '../models/index';
import { FilterService } from '../services/filter.service';
import { SortService } from '../services/sort.service';
import { SharedService } from '../services/shared.service';
import { ExtensionUtility } from './extensionUtility';
import * as ɵngcc0 from '@angular/core';
export declare class HeaderMenuExtension implements Extension {
    private extensionUtility;
    private filterService;
    private sharedService;
    private sortService;
    private translate;
    private _addon;
    private _eventHandler;
    private _locales;
    constructor(extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService, sortService: SortService, translate: TranslateService);
    readonly eventHandler: SlickEventHandler;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    /**
     * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    register(): any;
    /**
     * Create Header Menu with Custom Commands if user has enabled Header Menu
     * @param options
     * @param columnDefinitions
     * @return header menu
     */
    private addHeaderMenuCustomCommands;
    /** Hide a column from the grid */
    hideColumn(column: Column): void;
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateHeaderMenu(): void;
    /** @return default Header Menu options */
    private getDefaultHeaderMenuOptions;
    /**
     * Reset all the internal Menu options which have text to translate
     * @param header menu object
     */
    private resetHeaderMenuTranslations;
    /** Clear the Filter on the current column (if it's actually filtered) */
    private clearColumnFilter;
    /** Clear the Sort on the current column (if it's actually sorted) */
    private clearColumnSort;
    /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */
    private executeHeaderMenuInternalCommands;
    /** Sort the current column */
    private sortColumn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeaderMenuExtension, [null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HeaderMenuExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyTWVudUV4dGVuc2lvbi5kLnRzIiwic291cmNlcyI6WyJoZWFkZXJNZW51RXh0ZW5zaW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgQ29sdW1uLCBFeHRlbnNpb24sIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgRmlsdGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2ZpbHRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU29ydFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zb3J0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2hhcmVkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25VdGlsaXR5IH0gZnJvbSAnLi9leHRlbnNpb25VdGlsaXR5JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSGVhZGVyTWVudUV4dGVuc2lvbiBpbXBsZW1lbnRzIEV4dGVuc2lvbiB7XHJcbiAgICBwcml2YXRlIGV4dGVuc2lvblV0aWxpdHk7XHJcbiAgICBwcml2YXRlIGZpbHRlclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHNoYXJlZFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHNvcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGU7XHJcbiAgICBwcml2YXRlIF9hZGRvbjtcclxuICAgIHByaXZhdGUgX2V2ZW50SGFuZGxlcjtcclxuICAgIHByaXZhdGUgX2xvY2FsZXM7XHJcbiAgICBjb25zdHJ1Y3RvcihleHRlbnNpb25VdGlsaXR5OiBFeHRlbnNpb25VdGlsaXR5LCBmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlLCBzaGFyZWRTZXJ2aWNlOiBTaGFyZWRTZXJ2aWNlLCBzb3J0U2VydmljZTogU29ydFNlcnZpY2UsIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSk7XHJcbiAgICByZWFkb25seSBldmVudEhhbmRsZXI6IFNsaWNrRXZlbnRIYW5kbGVyO1xyXG4gICAgZGlzcG9zZSgpOiB2b2lkO1xyXG4gICAgLyoqIEdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlIFNsaWNrR3JpZCBhZGRvbiAoY29udHJvbCBvciBwbHVnaW4pLiAqL1xyXG4gICAgZ2V0QWRkb25JbnN0YW5jZSgpOiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSB0aGUgSGVhZGVyIE1lbnUgYW5kIGV4cG9zZSBhbGwgdGhlIGF2YWlsYWJsZSBob29rcyB0aGF0IHVzZXIgY2FuIHN1YnNjcmliZSAob25Db21tYW5kLCBvbkJlZm9yZU1lbnVTaG93LCAuLi4pXHJcbiAgICAgKiBAcGFyYW0gZ3JpZFxyXG4gICAgICogQHBhcmFtIGRhdGFWaWV3XHJcbiAgICAgKiBAcGFyYW0gY29sdW1uRGVmaW5pdGlvbnNcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXIoKTogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgSGVhZGVyIE1lbnUgd2l0aCBDdXN0b20gQ29tbWFuZHMgaWYgdXNlciBoYXMgZW5hYmxlZCBIZWFkZXIgTWVudVxyXG4gICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb2x1bW5EZWZpbml0aW9uc1xyXG4gICAgICogQHJldHVybiBoZWFkZXIgbWVudVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFkZEhlYWRlck1lbnVDdXN0b21Db21tYW5kcztcclxuICAgIC8qKiBIaWRlIGEgY29sdW1uIGZyb20gdGhlIGdyaWQgKi9cclxuICAgIGhpZGVDb2x1bW4oY29sdW1uOiBDb2x1bW4pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGUgdGhlIEhlYWRlciBNZW51IHRpdGxlcywgd2UgbmVlZCB0byBsb29wIHRocm91Z2ggYWxsIGNvbHVtbiBkZWZpbml0aW9uIHRvIHJlLXRyYW5zbGF0ZSB0aGVtXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZUhlYWRlck1lbnUoKTogdm9pZDtcclxuICAgIC8qKiBAcmV0dXJuIGRlZmF1bHQgSGVhZGVyIE1lbnUgb3B0aW9ucyAqL1xyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0SGVhZGVyTWVudU9wdGlvbnM7XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IGFsbCB0aGUgaW50ZXJuYWwgTWVudSBvcHRpb25zIHdoaWNoIGhhdmUgdGV4dCB0byB0cmFuc2xhdGVcclxuICAgICAqIEBwYXJhbSBoZWFkZXIgbWVudSBvYmplY3RcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNldEhlYWRlck1lbnVUcmFuc2xhdGlvbnM7XHJcbiAgICAvKiogQ2xlYXIgdGhlIEZpbHRlciBvbiB0aGUgY3VycmVudCBjb2x1bW4gKGlmIGl0J3MgYWN0dWFsbHkgZmlsdGVyZWQpICovXHJcbiAgICBwcml2YXRlIGNsZWFyQ29sdW1uRmlsdGVyO1xyXG4gICAgLyoqIENsZWFyIHRoZSBTb3J0IG9uIHRoZSBjdXJyZW50IGNvbHVtbiAoaWYgaXQncyBhY3R1YWxseSBzb3J0ZWQpICovXHJcbiAgICBwcml2YXRlIGNsZWFyQ29sdW1uU29ydDtcclxuICAgIC8qKiBFeGVjdXRlIHRoZSBIZWFkZXIgTWVudSBDb21tYW5kcyB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIG9uQ29tbWFuZCBzdWJzY3JpYmUgKi9cclxuICAgIHByaXZhdGUgZXhlY3V0ZUhlYWRlck1lbnVJbnRlcm5hbENvbW1hbmRzO1xyXG4gICAgLyoqIFNvcnQgdGhlIGN1cnJlbnQgY29sdW1uICovXHJcbiAgICBwcml2YXRlIHNvcnRDb2x1bW47XHJcbn1cclxuIl19