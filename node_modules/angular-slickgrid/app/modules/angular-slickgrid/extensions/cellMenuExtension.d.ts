import { TranslateService } from '@ngx-translate/core';
import { Column, Extension, SlickEventHandler } from '../models/index';
import { SharedService } from '../services/shared.service';
import { ExtensionUtility } from './extensionUtility';
import * as ɵngcc0 from '@angular/core';
export declare class CellMenuExtension implements Extension {
    private extensionUtility;
    private sharedService;
    private translate;
    private _addon;
    private _cellMenuOptions;
    private _eventHandler;
    private _locales;
    constructor(extensionUtility: ExtensionUtility, sharedService: SharedService, translate: TranslateService);
    readonly eventHandler: SlickEventHandler;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    /**
     * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    register(): any;
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    translateCellMenu(): void;
    /**
     * @return default Action Cell Menu options
     */
    private getDefaultCellMenuOptions;
    /**
     * Reset all the internal Menu options which have text to translate
     * @param grid menu object
     */
    private resetMenuTranslations;
    sortMenuItems(columnDefinitions: Column[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CellMenuExtension, [null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CellMenuExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbE1lbnVFeHRlbnNpb24uZC50cyIsInNvdXJjZXMiOlsiY2VsbE1lbnVFeHRlbnNpb24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgQ29sdW1uLCBFeHRlbnNpb24sIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgU2hhcmVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVXRpbGl0eSB9IGZyb20gJy4vZXh0ZW5zaW9uVXRpbGl0eSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENlbGxNZW51RXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICAgIHByaXZhdGUgZXh0ZW5zaW9uVXRpbGl0eTtcclxuICAgIHByaXZhdGUgc2hhcmVkU2VydmljZTtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlO1xyXG4gICAgcHJpdmF0ZSBfYWRkb247XHJcbiAgICBwcml2YXRlIF9jZWxsTWVudU9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9ldmVudEhhbmRsZXI7XHJcbiAgICBwcml2YXRlIF9sb2NhbGVzO1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZW5zaW9uVXRpbGl0eTogRXh0ZW5zaW9uVXRpbGl0eSwgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSwgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlKTtcclxuICAgIHJlYWRvbmx5IGV2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XHJcbiAgICBkaXNwb3NlKCk6IHZvaWQ7XHJcbiAgICAvKiogR2V0IHRoZSBpbnN0YW5jZSBvZiB0aGUgU2xpY2tHcmlkIGFkZG9uIChjb250cm9sIG9yIHBsdWdpbikuICovXHJcbiAgICBnZXRBZGRvbkluc3RhbmNlKCk6IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIHRoZSBBY3Rpb24gQ2VsbCBNZW51IGFuZCBleHBvc2UgYWxsIHRoZSBhdmFpbGFibGUgaG9va3MgdGhhdCB1c2VyIGNhbiBzdWJzY3JpYmUgKG9uQ29tbWFuZCwgb25CZWZvcmVNZW51U2hvdywgLi4uKVxyXG4gICAgICogQHBhcmFtIGdyaWRcclxuICAgICAqIEBwYXJhbSBkYXRhVmlld1xyXG4gICAgICogQHBhcmFtIGNvbHVtbkRlZmluaXRpb25zXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyKCk6IGFueTtcclxuICAgIC8qKiBUcmFuc2xhdGUgdGhlIENlbGwgTWVudSB0aXRsZXMsIHdlIG5lZWQgdG8gbG9vcCB0aHJvdWdoIGFsbCBjb2x1bW4gZGVmaW5pdGlvbiB0byByZS10cmFuc2xhdGUgdGhlbSAqL1xyXG4gICAgdHJhbnNsYXRlQ2VsbE1lbnUoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiBkZWZhdWx0IEFjdGlvbiBDZWxsIE1lbnUgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldERlZmF1bHRDZWxsTWVudU9wdGlvbnM7XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IGFsbCB0aGUgaW50ZXJuYWwgTWVudSBvcHRpb25zIHdoaWNoIGhhdmUgdGV4dCB0byB0cmFuc2xhdGVcclxuICAgICAqIEBwYXJhbSBncmlkIG1lbnUgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVzZXRNZW51VHJhbnNsYXRpb25zO1xyXG4gICAgc29ydE1lbnVJdGVtcyhjb2x1bW5EZWZpbml0aW9uczogQ29sdW1uW10pOiB2b2lkO1xyXG59XHJcbiJdfQ==