import { EditCommand, EditUndoRedoBuffer, ExcelCopyBufferOption, Extension, SlickEventHandler } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class CellExternalCopyManagerExtension implements Extension {
    private extensionUtility;
    private sharedService;
    private _addon;
    private _addonOptions;
    private _bindingEventService;
    private _cellSelectionModel;
    private _eventHandler;
    private _commandQueue;
    private _undoRedoBuffer;
    constructor(extensionUtility: ExtensionUtility, sharedService: SharedService);
    readonly addonOptions: ExcelCopyBufferOption | null;
    readonly eventHandler: SlickEventHandler;
    readonly commandQueue: EditCommand[];
    readonly undoRedoBuffer: EditUndoRedoBuffer;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): any;
    register(): any;
    /** Create an undo redo buffer used by the Excel like copy */
    private createUndoRedoBuffer;
    /** @return default plugin (addon) options */
    private getDefaultOptions;
    /** Hook an undo shortcut key hook that will redo/undo the copy buffer using Ctrl+(Shift)+Z keyboard events */
    private handleKeyDown;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CellExternalCopyManagerExtension, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CellExternalCopyManagerExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbEV4dGVybmFsQ29weU1hbmFnZXJFeHRlbnNpb24uZC50cyIsInNvdXJjZXMiOlsiY2VsbEV4dGVybmFsQ29weU1hbmFnZXJFeHRlbnNpb24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdENvbW1hbmQsIEVkaXRVbmRvUmVkb0J1ZmZlciwgRXhjZWxDb3B5QnVmZmVyT3B0aW9uLCBFeHRlbnNpb24sIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVXRpbGl0eSB9IGZyb20gJy4vZXh0ZW5zaW9uVXRpbGl0eSc7XHJcbmltcG9ydCB7IFNoYXJlZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zaGFyZWQuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENlbGxFeHRlcm5hbENvcHlNYW5hZ2VyRXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICAgIHByaXZhdGUgZXh0ZW5zaW9uVXRpbGl0eTtcclxuICAgIHByaXZhdGUgc2hhcmVkU2VydmljZTtcclxuICAgIHByaXZhdGUgX2FkZG9uO1xyXG4gICAgcHJpdmF0ZSBfYWRkb25PcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfYmluZGluZ0V2ZW50U2VydmljZTtcclxuICAgIHByaXZhdGUgX2NlbGxTZWxlY3Rpb25Nb2RlbDtcclxuICAgIHByaXZhdGUgX2V2ZW50SGFuZGxlcjtcclxuICAgIHByaXZhdGUgX2NvbW1hbmRRdWV1ZTtcclxuICAgIHByaXZhdGUgX3VuZG9SZWRvQnVmZmVyO1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZW5zaW9uVXRpbGl0eTogRXh0ZW5zaW9uVXRpbGl0eSwgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSk7XHJcbiAgICByZWFkb25seSBhZGRvbk9wdGlvbnM6IEV4Y2VsQ29weUJ1ZmZlck9wdGlvbiB8IG51bGw7XHJcbiAgICByZWFkb25seSBldmVudEhhbmRsZXI6IFNsaWNrRXZlbnRIYW5kbGVyO1xyXG4gICAgcmVhZG9ubHkgY29tbWFuZFF1ZXVlOiBFZGl0Q29tbWFuZFtdO1xyXG4gICAgcmVhZG9ubHkgdW5kb1JlZG9CdWZmZXI6IEVkaXRVbmRvUmVkb0J1ZmZlcjtcclxuICAgIGRpc3Bvc2UoKTogdm9pZDtcclxuICAgIC8qKiBHZXQgdGhlIGluc3RhbmNlIG9mIHRoZSBTbGlja0dyaWQgYWRkb24gKGNvbnRyb2wgb3IgcGx1Z2luKS4gKi9cclxuICAgIGdldEFkZG9uSW5zdGFuY2UoKTogYW55O1xyXG4gICAgcmVnaXN0ZXIoKTogYW55O1xyXG4gICAgLyoqIENyZWF0ZSBhbiB1bmRvIHJlZG8gYnVmZmVyIHVzZWQgYnkgdGhlIEV4Y2VsIGxpa2UgY29weSAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVVbmRvUmVkb0J1ZmZlcjtcclxuICAgIC8qKiBAcmV0dXJuIGRlZmF1bHQgcGx1Z2luIChhZGRvbikgb3B0aW9ucyAqL1xyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0T3B0aW9ucztcclxuICAgIC8qKiBIb29rIGFuIHVuZG8gc2hvcnRjdXQga2V5IGhvb2sgdGhhdCB3aWxsIHJlZG8vdW5kbyB0aGUgY29weSBidWZmZXIgdXNpbmcgQ3RybCsoU2hpZnQpK1oga2V5Ym9hcmQgZXZlbnRzICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUtleURvd247XHJcbn1cclxuIl19