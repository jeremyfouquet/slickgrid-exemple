/** Provides a list of different Formatters that will change the cell value displayed in the UI */
export declare const Formatters: {
    /** Align cell value to the center (alias to Formatters.center)  */
    alignCenter: import("../models").Formatter;
    /** Align cell value to the right */
    alignRight: import("../models").Formatter;
    /**
     * Takes an array of complex objects converts it to a comma delimited string.
     * Requires to pass an array of "propertyNames" in the column definition the generic "params" property
     * For example, if we have an array of user objects that have the property of firstName & lastName then we need to pass in your column definition::
     * params: { propertyNames: ['firtName', 'lastName'] } => 'John Doe, Jane Doe'
     */
    arrayObjectToCsv: import("../models").Formatter;
    /** Takes an array of string and converts it to a comma delimited string */
    arrayToCsv: import("../models").Formatter;
    /** show value in bold font weight */
    bold: import("../models").Formatter;
    /** boostrap dropdown formatter */
    bsDropdown: import("../models").Formatter;
    /** Center a text value horizontally */
    center: import("../models").Formatter;
    /** When value is filled (true), it will display a checkbox Unicode icon */
    checkbox: import("../models").Formatter;
    /**
     * When value is filled, or if the value is a number and is bigger than 0, it will display a Font-Awesome icon (fa-check).
     * The icon will NOT be displayed when the value is any of the following ("false", false, "0", 0, -0.5, null, undefined)
     * Anything else than the condition specified will display the icon, so a text with "00123" will display the icon but "0" will not.
     * Also note that a string ("null", "undefined") will display the icon but (null, undefined) will not, so the typeof is also important
     */
    checkmark: import("../models").Formatter;
    /**
     * Takes a complex data object and return the data under that property (for example: "user.firstName" will return the first name "John")
     * You can pass the complex structure in the "field" or the "params: { complexField: string }" properties.
     * For example::
     * this.columnDefs = [{ id: 'username', field: 'user.firstName', ... }]
     * OR this.columnDefs = [{ id: 'username', field: 'user', params: { complexField: 'user.firstName' }, ... }]
     */
    complex: import("../models").Formatter;
    complexObject: import("../models").Formatter;
    /**
     * Looks up values from the columnDefinition.params.collection property and displays the label in CSV or string format
     * @example
     * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset
     * { params: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}
     * const dataset = [1, 2];
     */
    collection: import("../models").Formatter;
    /**
     * Roughly the same as the "collectionFormatter" except that it
     * looks up values from the columnDefinition.editor.collection (instead of params) property and displays the label in CSV or string format
     * @example
     * // the grid will display 'foo' and 'bar' and not 1 and 2 from your dataset
     * { editor: { collection: [{ value: 1, label: 'foo'}, {value: 2, label: 'bar' }] }}
     * const dataset = [1, 2];
     */
    collectionEditor: import("../models").Formatter;
    /** Takes a Date object and displays it as an ISO Date format (YYYY-MM-DD) */
    dateIso: import("../models").Formatter;
    /** Takes a Date object and displays it as an ISO Date+Time format (YYYY-MM-DD HH:mm:ss) */
    dateTimeIso: import("../models").Formatter;
    /** Takes a Date object and displays it as an ISO Date+Time (without seconds) format (YYYY-MM-DD HH:mm) */
    dateTimeShortIso: import("../models").Formatter;
    /** Takes a Date object and displays it as an ISO Date+Time+(am/pm) format (YYYY-MM-DD h:mm:ss a) */
    dateTimeIsoAmPm: import("../models").Formatter;
    /** Takes a Date object and displays it as an Euro Date format (DD/MM/YYYY) */
    dateEuro: import("../models").Formatter;
    /** Takes a Date object and displays it as an Euro Date+Time format (DD/MM/YYYY HH:mm:ss) */
    dateTimeEuro: import("../models").Formatter;
    /** Takes a Date object and displays it as an Euro Date+Time (without seconds) format (DD/MM/YYYY HH:mm) */
    dateTimeShortEuro: import("../models").Formatter;
    /** Takes a Date object and displays it as an Euro Date+Time+(am/pm) format (DD/MM/YYYY hh:mm:ss a) */
    dateTimeEuroAmPm: import("../models").Formatter;
    /** Takes a Date object and displays it as an US Date format (MM/DD/YYYY) */
    dateUs: import("../models").Formatter;
    /** Takes a Date object and displays it as an US Date+Time format (MM/DD/YYYY HH:mm:ss) */
    dateTimeUs: import("../models").Formatter;
    /** Takes a Date object and displays it as an US Date+Time (without seconds) format (MM/DD/YYYY HH:mm:ss) */
    dateTimeShortUs: import("../models").Formatter;
    /** Takes a Date object and displays it as an US Date+Time+(am/pm) format (MM/DD/YYYY hh:mm:ss a) */
    dateTimeUsAmPm: import("../models").Formatter;
    /** Displays a Font-Awesome delete icon (fa-trash) */
    deleteIcon: import("../models").Formatter;
    /**
     * Display the value as x decimals formatted, defaults to 2 decimals.
     * You can pass "decimalPlaces" or "minDecimalPlaces" and/or "maxDecimalPlaces" to the "params" property.
     * For example:: `{ formatter: Formatters.decimal, params: { decimalPlaces: 3 }}`
     * The property "decimalPlaces" is an alias of "minDecimalPlaces"
     */
    decimal: import("../models").Formatter;
    /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value */
    dollar: import("../models").Formatter;
    /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */
    dollarColored: import("../models").Formatter;
    /** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value, show it in bold font weight as well */
    dollarColoredBold: import("../models").Formatter;
    /** Displays a Font-Awesome edit icon (fa-pencil) */
    editIcon: import("../models").Formatter;
    /** Takes any text value and display it as a fake a hyperlink (only styled as an hyperlink), this can be used in combo with "onCellClick" event */
    fakeHyperlink: import("../models").Formatter;
    /**
     * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).
     * The structure will be "<a href="hyperlink">hyperlink</a>"
     *
     * You can optionally change the hyperlink text displayed by using the generic params "hyperlinkText" in the column definition
     * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display "<a href="link">Company Website</a>"
     *
     * You can also optionally provide the hyperlink URL by using the generic params "hyperlinkUrl" in the column definition
     * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display "<a href="http://www.somewhere.com">Company Website</a>"
     */
    hyperlink: import("../models").Formatter;
    /** Display whichever icon you want (library agnostic, it could be Font-Awesome or any other) */
    icon: import("../models").Formatter;
    /** Displays a Font-Awesome edit icon (fa-info-circle) */
    infoIcon: import("../models").Formatter;
    /** show input text value as italic text */
    italic: import("../models").Formatter;
    /** Takes a value and displays it all lowercase */
    lowercase: import("../models").Formatter;
    /**
     * Takes a value display it according to a mask provided
     * e.: 1234567890 with mask "(000) 000-0000" will display "(123) 456-7890"
     */
    mask: import("../models").Formatter;
    /**
     * You can pipe multiple formatters (executed in sequence), use params to pass the list of formatters.
     * Requires to pass an array of "formatters" in the column definition the generic "params" property
     * For example::
     * { field: 'title', formatter: Formatters.multiple, params: { formatters: [ Formatters.lowercase, Formatters.uppercase ] }
     */
    multiple: import("../models").Formatter;
    /** Takes a cell value number (between 0.0-1.0) and displays a red (<50) or green (>=50) bar */
    percent: import("../models").Formatter;
    /** Takes a cell value number (between 0.0-100) and displays a red (<50) or green (>=50) bar */
    percentComplete: import("../models").Formatter;
    /** Takes a cell value number (between 0-100) and displays Bootstrap "percent-complete-bar" a red (<30), silver (>30 & <70) or green (>=70) bar */
    percentCompleteBar: import("../models").Formatter;
    /** Takes a cell value number (between 0-100) and add the "%" after the number */
    percentSymbol: import("../models").Formatter;
    /** Takes a cell value number (between 0-100) and displays Bootstrap "progress-bar" a red (<30), silver (>30 & <70) or green (>=70) bar */
    progressBar: import("../models").Formatter;
    /** Takes a cell value and translates it (i18n). Requires an instance of the Translate Service:: `i18n: this.translate */
    translate: import("../models").Formatter;
    /** Takes a boolean value, cast it to upperCase string and finally translates it (i18n). */
    translateBoolean: import("../models").Formatter;
    /** Formatter that must be use with a Tree Data column */
    tree: import("../models").Formatter;
    /** Takes a value and displays it all uppercase */
    uppercase: import("../models").Formatter;
    /** Takes a boolean value and display a string 'Yes' or 'No' */
    yesNo: import("../models").Formatter;
};
