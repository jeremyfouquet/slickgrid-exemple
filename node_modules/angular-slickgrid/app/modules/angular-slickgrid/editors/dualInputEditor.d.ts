/// <reference types="jquery" />
import { DOMEvent, Column, ColumnEditor, ColumnEditorDualInput, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, GridOption, SlickEventHandler } from '../models/index';
export declare class DualInputEditor implements Editor {
    private args;
    private _bindEventService;
    private _eventHandler;
    private _isValueSaveCalled;
    private _lastEventType;
    private _lastInputKeyEvent;
    private _leftInput;
    private _rightInput;
    private _leftFieldName;
    private _rightFieldName;
    originalLeftValue: string | number;
    originalRightValue: string | number;
    /** SlickGrid Grid object */
    grid: any;
    /** Grid options */
    gridOptions: GridOption;
    constructor(args: EditorArguments);
    /** Get Column Definition object */
    readonly columnDef: Column | undefined;
    /** Get Column Editor object */
    readonly columnEditor: ColumnEditor;
    /** Get the Editor DOM Element */
    readonly editorDomElement: {
        leftInput: HTMLInputElement;
        rightInput: HTMLInputElement;
    };
    readonly editorParams: ColumnEditorDualInput;
    readonly eventHandler: SlickEventHandler;
    readonly hasAutoCommitEdit: any;
    readonly isValueSaveCalled: boolean;
    /** Get the Shared Validator function, can be passed in Editor property or Column Definition */
    readonly validator: EditorValidator | undefined;
    init(): void;
    handleFocusOut(event: DOMEvent<HTMLInputElement>, position: 'leftInput' | 'rightInput'): void;
    handleKeyDown(event: JQuery.Event): void;
    destroy(): void;
    createInput(position: 'leftInput' | 'rightInput'): HTMLInputElement;
    focus(): void;
    getValues(): {
        [fieldName: string]: string | number;
    };
    setValues(values: Array<number | string>): void;
    applyValue(item: any, state: any): void;
    applyValueByPosition(item: any, state: any, position: 'leftInput' | 'rightInput'): void;
    isValueChanged(): boolean;
    loadValue(item: any): void;
    loadValueByPosition(item: any, position: 'leftInput' | 'rightInput'): void;
    save(): void;
    serializeValue(): {};
    serializeValueByPosition(position: 'leftInput' | 'rightInput'): string | number;
    getDecimalPlaces(position: 'leftInput' | 'rightInput'): number;
    getInputDecimalSteps(position: 'leftInput' | 'rightInput'): string;
    validate(inputValidation?: {
        position: 'leftInput' | 'rightInput';
        inputValue: any;
    }): EditorValidatorOutput;
    validateByPosition(position: 'leftInput' | 'rightInput', inputValue?: any): EditorValidatorOutput;
}
