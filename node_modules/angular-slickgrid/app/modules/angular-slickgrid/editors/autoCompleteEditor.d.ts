import { AutocompleteOption, CollectionCustomStructure, Column, ColumnEditor, Editor, EditorArguments, EditorValidator, EditorValidatorOutput, GridOption } from './../models/index';
export declare class AutoCompleteEditor implements Editor {
    private args;
    private _autoCompleteOptions;
    private _currentValue;
    private _defaultTextValue;
    private _elementCollection;
    private _lastInputEvent;
    /** The JQuery DOM element */
    private _$editorElm;
    /** SlickGrid Grid object */
    grid: any;
    /** The property name for labels in the collection */
    labelName: string;
    /** The property name for a prefix that can be added to the labels in the collection */
    labelPrefixName: string;
    /** The property name for a suffix that can be added to the labels in the collection */
    labelSuffixName: string;
    /** The property name for values in the collection */
    valueName: string;
    forceUserInput: boolean;
    constructor(args: EditorArguments);
    /** Getter for the Autocomplete Option */
    readonly autoCompleteOptions: Partial<AutocompleteOption>;
    /** Get the Collection */
    readonly editorCollection: any[];
    /** Get the Final Collection used in the AutoCompleted Source (this may vary from the "collection" especially when providing a customStructure) */
    readonly elementCollection: any[] | null;
    /** Get Column Definition object */
    readonly columnDef: Column | undefined;
    /** Get Column Editor object */
    readonly columnEditor: ColumnEditor;
    /** Getter for the Custom Structure if exist */
    readonly customStructure: CollectionCustomStructure;
    readonly hasAutoCommitEdit: boolean;
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    readonly validator: EditorValidator;
    readonly editorOptions: any;
    /** jQuery UI AutoComplete instance */
    readonly instance: any;
    /** Getter for the Grid Options pulled through the Grid Object */
    readonly gridOptions: GridOption;
    /** Get the Editor DOM Element */
    readonly editorDomElement: any;
    init(): void;
    destroy(): void;
    focus(): void;
    getValue(): any;
    setValue(value: string): void;
    applyValue(item: any, state: any): void;
    isValueChanged(): boolean;
    loadValue(item: any): void;
    save(): void;
    serializeValue(): any;
    validate(inputValue?: any): EditorValidatorOutput;
    onSelect(_event: Event, ui: {
        item: any;
    }): boolean;
    private renderCustomItem;
    private renderCollectionItem;
    private renderDomElement;
}
