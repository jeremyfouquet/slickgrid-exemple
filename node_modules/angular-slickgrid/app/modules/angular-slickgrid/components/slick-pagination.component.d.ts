import { OnDestroy, OnInit } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { GridOption } from './../models/index';
import { PaginationService } from '../services/pagination.service';
import * as ɵngcc0 from '@angular/core';
export declare class SlickPaginationComponent implements OnDestroy, OnInit {
    private paginationService;
    private translate;
    gridOptions: GridOption;
    private subscriptions;
    private _enableTranslate;
    private _gridOptions;
    private _locales;
    textItemsPerPage: string;
    textItems: string;
    textOf: string;
    textPage: string;
    /** Constructor */
    constructor(paginationService: PaginationService, translate: TranslateService);
    readonly availablePageSizes: number[];
    readonly dataFrom: number;
    readonly dataTo: number;
    /** is the left side pagination disabled? */
    readonly isLeftPaginationDisabled: boolean;
    /** is the right side pagination disabled? */
    readonly isRightPaginationDisabled: boolean;
    readonly itemsPerPage: number;
    readonly pageCount: number;
    pageNumber: number;
    readonly totalItems: number;
    ngOnDestroy(): void;
    ngOnInit(): void;
    changeToFirstPage(event: MouseEvent): void;
    changeToLastPage(event: MouseEvent): void;
    changeToNextPage(event: MouseEvent): void;
    changeToPreviousPage(event: MouseEvent): void;
    changeToCurrentPage(event: any): void;
    changeItemPerPage(event: any): void;
    dispose(): void;
    /** Translate all the texts shown in the UI, use ngx-translate service when available or custom locales when service is null */
    private translateAllUiTexts;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SlickPaginationComponent, [null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SlickPaginationComponent, "slick-pagination", never, { "gridOptions": "gridOptions"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpY2stcGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2xpY2stcGFnaW5hdGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBHcmlkT3B0aW9uIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBQYWdpbmF0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BhZ2luYXRpb24uc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWNrUGFnaW5hdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcclxuICAgIHByaXZhdGUgcGFnaW5hdGlvblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTtcclxuICAgIGdyaWRPcHRpb25zOiBHcmlkT3B0aW9uO1xyXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfZW5hYmxlVHJhbnNsYXRlO1xyXG4gICAgcHJpdmF0ZSBfZ3JpZE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9sb2NhbGVzO1xyXG4gICAgdGV4dEl0ZW1zUGVyUGFnZTogc3RyaW5nO1xyXG4gICAgdGV4dEl0ZW1zOiBzdHJpbmc7XHJcbiAgICB0ZXh0T2Y6IHN0cmluZztcclxuICAgIHRleHRQYWdlOiBzdHJpbmc7XHJcbiAgICAvKiogQ29uc3RydWN0b3IgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhZ2luYXRpb25TZXJ2aWNlOiBQYWdpbmF0aW9uU2VydmljZSwgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlKTtcclxuICAgIHJlYWRvbmx5IGF2YWlsYWJsZVBhZ2VTaXplczogbnVtYmVyW107XHJcbiAgICByZWFkb25seSBkYXRhRnJvbTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgZGF0YVRvOiBudW1iZXI7XHJcbiAgICAvKiogaXMgdGhlIGxlZnQgc2lkZSBwYWdpbmF0aW9uIGRpc2FibGVkPyAqL1xyXG4gICAgcmVhZG9ubHkgaXNMZWZ0UGFnaW5hdGlvbkRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIGlzIHRoZSByaWdodCBzaWRlIHBhZ2luYXRpb24gZGlzYWJsZWQ/ICovXHJcbiAgICByZWFkb25seSBpc1JpZ2h0UGFnaW5hdGlvbkRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgaXRlbXNQZXJQYWdlOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBwYWdlQ291bnQ6IG51bWJlcjtcclxuICAgIHBhZ2VOdW1iZXI6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHRvdGFsSXRlbXM6IG51bWJlcjtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgY2hhbmdlVG9GaXJzdFBhZ2UoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgY2hhbmdlVG9MYXN0UGFnZShldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICBjaGFuZ2VUb05leHRQYWdlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGNoYW5nZVRvUHJldmlvdXNQYWdlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGNoYW5nZVRvQ3VycmVudFBhZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBjaGFuZ2VJdGVtUGVyUGFnZShldmVudDogYW55KTogdm9pZDtcclxuICAgIGRpc3Bvc2UoKTogdm9pZDtcclxuICAgIC8qKiBUcmFuc2xhdGUgYWxsIHRoZSB0ZXh0cyBzaG93biBpbiB0aGUgVUksIHVzZSBuZ3gtdHJhbnNsYXRlIHNlcnZpY2Ugd2hlbiBhdmFpbGFibGUgb3IgY3VzdG9tIGxvY2FsZXMgd2hlbiBzZXJ2aWNlIGlzIG51bGwgKi9cclxuICAgIHByaXZhdGUgdHJhbnNsYXRlQWxsVWlUZXh0cztcclxufVxyXG4iXX0=