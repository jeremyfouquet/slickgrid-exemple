import { TranslateService } from '@ngx-translate/core';
import { Subscription, Subject, Observable } from 'rxjs';
import { AutocompleteOption, CollectionCustomStructure, CollectionOption, Column, ColumnFilter, Filter, FilterArguments, FilterCallback, GridOption, OperatorType, OperatorString, SearchTerm } from './../models/index';
import { CollectionService } from '../services/collection.service';
import * as ɵngcc0 from '@angular/core';
export declare class AutoCompleteFilter implements Filter {
    protected translate: TranslateService;
    protected collectionService: CollectionService;
    private _autoCompleteOptions;
    private _clearFilterTriggered;
    private _collection;
    private _shouldTriggerQuery;
    /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */
    elementName: string;
    /** The JQuery DOM element */
    $filterElm: any;
    grid: any;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    isFilled: boolean;
    /** The property name for labels in the collection */
    labelName: string;
    /** The property name for a prefix that can be added to the labels in the collection */
    labelPrefixName: string;
    /** The property name for a suffix that can be added to the labels in the collection */
    labelSuffixName: string;
    /** The property name for values in the collection */
    optionLabel: string;
    /** The property name for values in the collection */
    valueName: string;
    enableTranslateLabel: boolean;
    subscriptions: Subscription[];
    /**
     * Initialize the Filter
     */
    constructor(translate: TranslateService, collectionService: CollectionService);
    /** Getter for the Autocomplete Option */
    readonly autoCompleteOptions: Partial<AutocompleteOption>;
    /** Getter for the Collection Options */
    protected readonly collectionOptions: CollectionOption;
    /** Getter for the Collection Used by the Filter */
    readonly collection: any[] | null;
    /** Getter for the Column Filter */
    readonly columnFilter: ColumnFilter;
    /** Get the Editor DOM Element */
    readonly filterDomElement: any;
    readonly filterOptions: AutocompleteOption;
    /** Getter for the Custom Structure if exist */
    readonly customStructure: CollectionCustomStructure | undefined;
    /** Getter to know what would be the default operator when none is specified */
    readonly defaultOperator: OperatorType | OperatorString;
    /** Getter for the Grid Options pulled through the Grid Object */
    readonly gridOptions: GridOption;
    /** jQuery UI AutoComplete instance */
    readonly instance: any;
    /** Getter of the Operator to use when doing the filter comparing */
    /** Setter for the filter operator */
    operator: OperatorType | OperatorString;
    /**
     * Initialize the filter template
     */
    init(args: FilterArguments): Promise<boolean>;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /** Set value(s) on the DOM element */
    setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    protected filterCollection(inputCollection: any[]): any[];
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    protected sortCollection(inputCollection: any[]): any[];
    protected renderOptionsAsync(collectionAsync: Promise<any> | Observable<any> | Subject<any>): Promise<boolean>;
    /** Create or recreate an Observable Subject and reassign it to the "collectionAsync" object so user can call a "collectionAsync.next()" on it */
    protected createCollectionAsyncSubject(): void;
    /**
     * When user use a CollectionAsync we will use the returned collection to render the filter DOM element
     * and reinitialize filter collection with this new collection
     */
    protected renderDomElementFromCollectionAsync(collection: any): void;
    protected renderDomElement(collection: any[]): void;
    /**
     * Create the HTML template as a string
     */
    private buildTemplateHtmlString;
    /**
     * From the html template string, create a DOM element
     * @param filterTemplate
     */
    private createDomElement;
    onSelect(event: Event, ui: {
        item: any;
    }): boolean;
    protected renderCustomItem(ul: HTMLElement, item: any): any;
    protected renderCollectionItem(ul: any, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AutoCompleteFilter, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AutoCompleteFilter>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b0NvbXBsZXRlRmlsdGVyLmQudHMiLCJzb3VyY2VzIjpbImF1dG9Db21wbGV0ZUZpbHRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZU9wdGlvbiwgQ29sbGVjdGlvbkN1c3RvbVN0cnVjdHVyZSwgQ29sbGVjdGlvbk9wdGlvbiwgQ29sdW1uLCBDb2x1bW5GaWx0ZXIsIEZpbHRlciwgRmlsdGVyQXJndW1lbnRzLCBGaWx0ZXJDYWxsYmFjaywgR3JpZE9wdGlvbiwgT3BlcmF0b3JUeXBlLCBPcGVyYXRvclN0cmluZywgU2VhcmNoVGVybSB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgQ29sbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2xsZWN0aW9uLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRvQ29tcGxldGVGaWx0ZXIgaW1wbGVtZW50cyBGaWx0ZXIge1xyXG4gICAgcHJvdGVjdGVkIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBjb2xsZWN0aW9uU2VydmljZTogQ29sbGVjdGlvblNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF9hdXRvQ29tcGxldGVPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfY2xlYXJGaWx0ZXJUcmlnZ2VyZWQ7XHJcbiAgICBwcml2YXRlIF9jb2xsZWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfc2hvdWxkVHJpZ2dlclF1ZXJ5O1xyXG4gICAgLyoqIERPTSBFbGVtZW50IE5hbWUsIHVzZWZ1bCBmb3IgYXV0by1kZXRlY3RpbmcgcG9zaXRpb25pbmcgKGRyb3B1cCAvIGRyb3Bkb3duKSAqL1xyXG4gICAgZWxlbWVudE5hbWU6IHN0cmluZztcclxuICAgIC8qKiBUaGUgSlF1ZXJ5IERPTSBlbGVtZW50ICovXHJcbiAgICAkZmlsdGVyRWxtOiBhbnk7XHJcbiAgICBncmlkOiBhbnk7XHJcbiAgICBzZWFyY2hUZXJtczogU2VhcmNoVGVybVtdO1xyXG4gICAgY29sdW1uRGVmOiBDb2x1bW47XHJcbiAgICBjYWxsYmFjazogRmlsdGVyQ2FsbGJhY2s7XHJcbiAgICBpc0ZpbGxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBUaGUgcHJvcGVydHkgbmFtZSBmb3IgbGFiZWxzIGluIHRoZSBjb2xsZWN0aW9uICovXHJcbiAgICBsYWJlbE5hbWU6IHN0cmluZztcclxuICAgIC8qKiBUaGUgcHJvcGVydHkgbmFtZSBmb3IgYSBwcmVmaXggdGhhdCBjYW4gYmUgYWRkZWQgdG8gdGhlIGxhYmVscyBpbiB0aGUgY29sbGVjdGlvbiAqL1xyXG4gICAgbGFiZWxQcmVmaXhOYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIHByb3BlcnR5IG5hbWUgZm9yIGEgc3VmZml4IHRoYXQgY2FuIGJlIGFkZGVkIHRvIHRoZSBsYWJlbHMgaW4gdGhlIGNvbGxlY3Rpb24gKi9cclxuICAgIGxhYmVsU3VmZml4TmFtZTogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBwcm9wZXJ0eSBuYW1lIGZvciB2YWx1ZXMgaW4gdGhlIGNvbGxlY3Rpb24gKi9cclxuICAgIG9wdGlvbkxhYmVsOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIHByb3BlcnR5IG5hbWUgZm9yIHZhbHVlcyBpbiB0aGUgY29sbGVjdGlvbiAqL1xyXG4gICAgdmFsdWVOYW1lOiBzdHJpbmc7XHJcbiAgICBlbmFibGVUcmFuc2xhdGVMYWJlbDogYm9vbGVhbjtcclxuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIHRoZSBGaWx0ZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBjb2xsZWN0aW9uU2VydmljZTogQ29sbGVjdGlvblNlcnZpY2UpO1xyXG4gICAgLyoqIEdldHRlciBmb3IgdGhlIEF1dG9jb21wbGV0ZSBPcHRpb24gKi9cclxuICAgIHJlYWRvbmx5IGF1dG9Db21wbGV0ZU9wdGlvbnM6IFBhcnRpYWw8QXV0b2NvbXBsZXRlT3B0aW9uPjtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBDb2xsZWN0aW9uIE9wdGlvbnMgKi9cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBjb2xsZWN0aW9uT3B0aW9uczogQ29sbGVjdGlvbk9wdGlvbjtcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBDb2xsZWN0aW9uIFVzZWQgYnkgdGhlIEZpbHRlciAqL1xyXG4gICAgcmVhZG9ubHkgY29sbGVjdGlvbjogYW55W10gfCBudWxsO1xyXG4gICAgLyoqIEdldHRlciBmb3IgdGhlIENvbHVtbiBGaWx0ZXIgKi9cclxuICAgIHJlYWRvbmx5IGNvbHVtbkZpbHRlcjogQ29sdW1uRmlsdGVyO1xyXG4gICAgLyoqIEdldCB0aGUgRWRpdG9yIERPTSBFbGVtZW50ICovXHJcbiAgICByZWFkb25seSBmaWx0ZXJEb21FbGVtZW50OiBhbnk7XHJcbiAgICByZWFkb25seSBmaWx0ZXJPcHRpb25zOiBBdXRvY29tcGxldGVPcHRpb247XHJcbiAgICAvKiogR2V0dGVyIGZvciB0aGUgQ3VzdG9tIFN0cnVjdHVyZSBpZiBleGlzdCAqL1xyXG4gICAgcmVhZG9ubHkgY3VzdG9tU3RydWN0dXJlOiBDb2xsZWN0aW9uQ3VzdG9tU3RydWN0dXJlIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEdldHRlciB0byBrbm93IHdoYXQgd291bGQgYmUgdGhlIGRlZmF1bHQgb3BlcmF0b3Igd2hlbiBub25lIGlzIHNwZWNpZmllZCAqL1xyXG4gICAgcmVhZG9ubHkgZGVmYXVsdE9wZXJhdG9yOiBPcGVyYXRvclR5cGUgfCBPcGVyYXRvclN0cmluZztcclxuICAgIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgICByZWFkb25seSBncmlkT3B0aW9uczogR3JpZE9wdGlvbjtcclxuICAgIC8qKiBqUXVlcnkgVUkgQXV0b0NvbXBsZXRlIGluc3RhbmNlICovXHJcbiAgICByZWFkb25seSBpbnN0YW5jZTogYW55O1xyXG4gICAgLyoqIEdldHRlciBvZiB0aGUgT3BlcmF0b3IgdG8gdXNlIHdoZW4gZG9pbmcgdGhlIGZpbHRlciBjb21wYXJpbmcgKi9cclxuICAgIC8qKiBTZXR0ZXIgZm9yIHRoZSBmaWx0ZXIgb3BlcmF0b3IgKi9cclxuICAgIG9wZXJhdG9yOiBPcGVyYXRvclR5cGUgfCBPcGVyYXRvclN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgZmlsdGVyIHRlbXBsYXRlXHJcbiAgICAgKi9cclxuICAgIGluaXQoYXJnczogRmlsdGVyQXJndW1lbnRzKTogUHJvbWlzZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXIgdGhlIGZpbHRlciB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBjbGVhcihzaG91bGRUcmlnZ2VyUXVlcnk/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogZGVzdHJveSB0aGUgZmlsdGVyXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKiBTZXQgdmFsdWUocykgb24gdGhlIERPTSBlbGVtZW50ICovXHJcbiAgICBzZXRWYWx1ZXModmFsdWVzOiBTZWFyY2hUZXJtIHwgU2VhcmNoVGVybVtdLCBvcGVyYXRvcj86IE9wZXJhdG9yVHlwZSB8IE9wZXJhdG9yU3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogdXNlciBtaWdodCB3YW50IHRvIGZpbHRlciBjZXJ0YWluIGl0ZW1zIG9mIHRoZSBjb2xsZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRDb2xsZWN0aW9uXHJcbiAgICAgKiBAcmV0dXJuIG91dHB1dENvbGxlY3Rpb24gZmlsdGVyZWQgYW5kL29yIHNvcnRlZCBjb2xsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBmaWx0ZXJDb2xsZWN0aW9uKGlucHV0Q29sbGVjdGlvbjogYW55W10pOiBhbnlbXTtcclxuICAgIC8qKlxyXG4gICAgICogdXNlciBtaWdodCB3YW50IHRvIHNvcnQgdGhlIGNvbGxlY3Rpb24gaW4gYSBjZXJ0YWluIHdheVxyXG4gICAgICogQHBhcmFtIGlucHV0Q29sbGVjdGlvblxyXG4gICAgICogQHJldHVybiBvdXRwdXRDb2xsZWN0aW9uIGZpbHRlcmVkIGFuZC9vciBzb3J0ZWQgY29sbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgc29ydENvbGxlY3Rpb24oaW5wdXRDb2xsZWN0aW9uOiBhbnlbXSk6IGFueVtdO1xyXG4gICAgcHJvdGVjdGVkIHJlbmRlck9wdGlvbnNBc3luYyhjb2xsZWN0aW9uQXN5bmM6IFByb21pc2U8YW55PiB8IE9ic2VydmFibGU8YW55PiB8IFN1YmplY3Q8YW55Pik6IFByb21pc2U8Ym9vbGVhbj47XHJcbiAgICAvKiogQ3JlYXRlIG9yIHJlY3JlYXRlIGFuIE9ic2VydmFibGUgU3ViamVjdCBhbmQgcmVhc3NpZ24gaXQgdG8gdGhlIFwiY29sbGVjdGlvbkFzeW5jXCIgb2JqZWN0IHNvIHVzZXIgY2FuIGNhbGwgYSBcImNvbGxlY3Rpb25Bc3luYy5uZXh0KClcIiBvbiBpdCAqL1xyXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUNvbGxlY3Rpb25Bc3luY1N1YmplY3QoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbiB1c2VyIHVzZSBhIENvbGxlY3Rpb25Bc3luYyB3ZSB3aWxsIHVzZSB0aGUgcmV0dXJuZWQgY29sbGVjdGlvbiB0byByZW5kZXIgdGhlIGZpbHRlciBET00gZWxlbWVudFxyXG4gICAgICogYW5kIHJlaW5pdGlhbGl6ZSBmaWx0ZXIgY29sbGVjdGlvbiB3aXRoIHRoaXMgbmV3IGNvbGxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlbmRlckRvbUVsZW1lbnRGcm9tQ29sbGVjdGlvbkFzeW5jKGNvbGxlY3Rpb246IGFueSk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyRG9tRWxlbWVudChjb2xsZWN0aW9uOiBhbnlbXSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSB0aGUgSFRNTCB0ZW1wbGF0ZSBhcyBhIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGJ1aWxkVGVtcGxhdGVIdG1sU3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGcm9tIHRoZSBodG1sIHRlbXBsYXRlIHN0cmluZywgY3JlYXRlIGEgRE9NIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBmaWx0ZXJUZW1wbGF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZURvbUVsZW1lbnQ7XHJcbiAgICBvblNlbGVjdChldmVudDogRXZlbnQsIHVpOiB7XHJcbiAgICAgICAgaXRlbTogYW55O1xyXG4gICAgfSk6IGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyQ3VzdG9tSXRlbSh1bDogSFRNTEVsZW1lbnQsIGl0ZW06IGFueSk6IGFueTtcclxuICAgIHByb3RlY3RlZCByZW5kZXJDb2xsZWN0aW9uSXRlbSh1bDogYW55LCBpdGVtOiBhbnkpOiBhbnk7XHJcbn1cclxuIl19