import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Constants } from '../constants';
import { ExtensionName, } from '../models/index';
import { SharedService } from '../services/shared.service';
import { ExtensionUtility } from './extensionUtility';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
let CellMenuExtension = class CellMenuExtension {
    constructor(extensionUtility, sharedService, translate) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this.translate = translate;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._cellMenuOptions);
        this._addon = null;
        this._cellMenuOptions = null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /**
     * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    register() {
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // get locales provided by user in main file or else use default English locales via the Constants
            this._locales = this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.cellMenu);
            this._cellMenuOptions = Object.assign({}, this.getDefaultCellMenuOptions(), this.sharedService.gridOptions.cellMenu);
            this.sharedService.gridOptions.cellMenu = this._cellMenuOptions;
            // translate the item keys when necessary
            if (this.sharedService.gridOptions.enableTranslate) {
                this.translateCellMenu();
            }
            // sort all menu items by their position order when defined
            this.sortMenuItems(this.sharedService.allColumns);
            this._addon = new Slick.Plugins.CellMenu(this._cellMenuOptions);
            this.sharedService.grid.registerPlugin(this._addon);
            // hook all events
            if (this._cellMenuOptions) {
                if (this._cellMenuOptions.onExtensionRegistered) {
                    this._cellMenuOptions.onExtensionRegistered(this._addon);
                }
                if (this._cellMenuOptions && typeof this._cellMenuOptions.onCommand === 'function') {
                    this._eventHandler.subscribe(this._addon.onCommand, (event, args) => {
                        this._cellMenuOptions.onCommand(event, args);
                    });
                }
                if (this._cellMenuOptions && typeof this._cellMenuOptions.onOptionSelected === 'function') {
                    this._eventHandler.subscribe(this._addon.onOptionSelected, (event, args) => {
                        this._cellMenuOptions.onOptionSelected(event, args);
                    });
                }
                if (this._cellMenuOptions && typeof this._cellMenuOptions.onAfterMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onAfterMenuShow, (event, args) => {
                        this._cellMenuOptions.onAfterMenuShow(event, args);
                    });
                }
                if (this._cellMenuOptions && typeof this._cellMenuOptions.onBeforeMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (event, args) => {
                        this._cellMenuOptions.onBeforeMenuShow(event, args);
                    });
                }
                if (this._cellMenuOptions && typeof this._cellMenuOptions.onBeforeMenuClose === 'function') {
                    this._eventHandler.subscribe(this._addon.onBeforeMenuClose, (event, args) => {
                        this._cellMenuOptions.onBeforeMenuClose(event, args);
                    });
                }
            }
            return this._addon;
        }
        return null;
    }
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    translateCellMenu() {
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.cellMenu) {
            this.resetMenuTranslations(this.sharedService.allColumns);
        }
    }
    /**
     * @return default Action Cell Menu options
     */
    getDefaultCellMenuOptions() {
        return {
            width: 180,
        };
    }
    /**
     * Reset all the internal Menu options which have text to translate
     * @param grid menu object
     */
    resetMenuTranslations(columnDefinitions) {
        const gridOptions = this.sharedService && this.sharedService.gridOptions;
        if (gridOptions && gridOptions.enableTranslate) {
            columnDefinitions.forEach((columnDef) => {
                if (columnDef && columnDef.cellMenu && (Array.isArray(columnDef.cellMenu.commandItems) || Array.isArray(columnDef.cellMenu.optionItems))) {
                    // get both items list
                    const columnCellMenuCommandItems = columnDef.cellMenu.commandItems || [];
                    const columnCellMenuOptionItems = columnDef.cellMenu.optionItems || [];
                    // translate their titles only if they have a titleKey defined
                    if (columnDef.cellMenu.commandTitleKey) {
                        columnDef.cellMenu.commandTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(columnDef.cellMenu.commandTitleKey) || this._locales && this._locales.TEXT_COMMANDS || columnDef.cellMenu.commandTitle;
                    }
                    if (columnDef.cellMenu.optionTitleKey) {
                        columnDef.cellMenu.optionTitle = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant(columnDef.cellMenu.optionTitleKey) || columnDef.cellMenu.optionTitle;
                    }
                    // translate both command/option items (whichever is provided)
                    this.extensionUtility.translateItems(columnCellMenuCommandItems, 'titleKey', 'title');
                    this.extensionUtility.translateItems(columnCellMenuOptionItems, 'titleKey', 'title');
                }
            });
        }
    }
    sortMenuItems(columnDefinitions) {
        columnDefinitions.forEach((columnDef) => {
            if (columnDef && columnDef.cellMenu && columnDef.cellMenu.commandItems) {
                // get both items list
                const columnCellMenuCommandItems = columnDef.cellMenu.commandItems || [];
                const columnCellMenuOptionItems = columnDef.cellMenu.optionItems || [];
                this.extensionUtility.sortItems(columnCellMenuCommandItems, 'positionOrder');
                this.extensionUtility.sortItems(columnCellMenuOptionItems, 'positionOrder');
            }
        });
    }
};
CellMenuExtension.ɵfac = function CellMenuExtension_Factory(t) { return new (t || CellMenuExtension)(ɵngcc0.ɵɵinject(ExtensionUtility), ɵngcc0.ɵɵinject(SharedService), ɵngcc0.ɵɵinject(ɵngcc1.TranslateService, 8)); };
CellMenuExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CellMenuExtension, factory: CellMenuExtension.ɵfac });
CellMenuExtension.ctorParameters = () => [
    { type: ExtensionUtility },
    { type: SharedService },
    { type: TranslateService, decorators: [{ type: Optional }] }
];
CellMenuExtension = tslib_1.__decorate([ tslib_1.__param(2, Optional())
], CellMenuExtension);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CellMenuExtension, [{
        type: Injectable
    }], function () { return [{ type: ExtensionUtility }, { type: SharedService }, { type: ɵngcc1.TranslateService, decorators: [{
                type: Optional
            }] }]; }, null); })();
export { CellMenuExtension };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,