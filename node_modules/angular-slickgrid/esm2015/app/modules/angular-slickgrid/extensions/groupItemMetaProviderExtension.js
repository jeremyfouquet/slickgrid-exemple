import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
let GroupItemMetaProviderExtension = class GroupItemMetaProviderExtension {
    constructor(sharedService) {
        this.sharedService = sharedService;
    }
    dispose() {
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this._addon = null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /** register the group item metadata provider to add expand/collapse group handlers */
    register() {
        if (this.sharedService && this.sharedService.grid) {
            this._addon = this.sharedService.groupItemMetadataProvider || {};
            this.sharedService.grid.registerPlugin(this._addon);
            return this._addon;
        }
        return null;
    }
};
GroupItemMetaProviderExtension.ɵfac = function GroupItemMetaProviderExtension_Factory(t) { return new (t || GroupItemMetaProviderExtension)(ɵngcc0.ɵɵinject(SharedService)); };
GroupItemMetaProviderExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GroupItemMetaProviderExtension, factory: GroupItemMetaProviderExtension.ɵfac });
GroupItemMetaProviderExtension.ctorParameters = () => [
    { type: SharedService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupItemMetaProviderExtension, [{
        type: Injectable
    }], function () { return [{ type: SharedService }]; }, null); })();
export { GroupItemMetaProviderExtension };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBJdGVtTWV0YVByb3ZpZGVyRXh0ZW5zaW9uLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhci1zbGlja2dyaWQvYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZXh0ZW5zaW9ucy9ncm91cEl0ZW1NZXRhUHJvdmlkZXJFeHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUczRCxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtBQUFHLElBRzVDLFlBQW9CLGFBQTRCO0FBQUksUUFBaEMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxJQUFHLENBQUM7QUFDdkQsSUFDRSxPQUFPO0FBQ1QsUUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDNUMsWUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzVCLFNBQUs7QUFDTCxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBQ0UsbUVBQW1FO0FBQ3JFLElBQUUsZ0JBQWdCO0FBQ2xCLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNILElBQ0Usc0ZBQXNGO0FBQ3hGLElBQUUsUUFBUTtBQUFLLFFBQ1gsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3ZELFlBQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUF5QixJQUFJLEVBQUUsQ0FBQztBQUN2RSxZQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsWUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDekIsU0FBSztBQUNMLFFBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7MEpBQUE7QUFDRDtBQUF3RCxZQXhCbkIsYUFBYTtBQUFHO0FBSHhDLDhCQUE4Qiw0QkFEMUMsVUFBVSxFQUFFLElBQ0E7ZUFBOEIsQ0EwQjFDO3VFQUNEOztBQWhDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBdkJBLEFBQUEsQUFIQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTBCQSxBQTFCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2hhcmVkLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR3JvdXBJdGVtTWV0YVByb3ZpZGVyRXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICBwcml2YXRlIF9hZGRvbjogYW55O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2UpIHsgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgaWYgKHRoaXMuX2FkZG9uICYmIHRoaXMuX2FkZG9uLmRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy5fYWRkb24uZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fYWRkb24gPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlIFNsaWNrR3JpZCBhZGRvbiAoY29udHJvbCBvciBwbHVnaW4pLiAqL1xyXG4gIGdldEFkZG9uSW5zdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWRkb247XHJcbiAgfVxyXG5cclxuICAvKiogcmVnaXN0ZXIgdGhlIGdyb3VwIGl0ZW0gbWV0YWRhdGEgcHJvdmlkZXIgdG8gYWRkIGV4cGFuZC9jb2xsYXBzZSBncm91cCBoYW5kbGVycyAqL1xyXG4gIHJlZ2lzdGVyKCk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkKSB7XHJcbiAgICAgIHRoaXMuX2FkZG9uID0gdGhpcy5zaGFyZWRTZXJ2aWNlLmdyb3VwSXRlbU1ldGFkYXRhUHJvdmlkZXIgfHwge307XHJcbiAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLnJlZ2lzdGVyUGx1Z2luKHRoaXMuX2FkZG9uKTtcclxuICAgICAgcmV0dXJuIHRoaXMuX2FkZG9uO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==