import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { SharedService } from '../services/shared.service';
let ColumnPickerExtension = class ColumnPickerExtension {
    constructor(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._columnPicker);
        this._addon = null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    register() {
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.columnPicker);
            // localization support for the picker
            const columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');
            const forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');
            const syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');
            this._columnPicker = this.sharedService.gridOptions.columnPicker || {};
            this.sharedService.gridOptions.columnPicker = this._columnPicker;
            this._columnPicker.columnTitle = this._columnPicker.columnTitle || columnTitle;
            this._columnPicker.forceFitTitle = this._columnPicker.forceFitTitle || forceFitTitle;
            this._columnPicker.syncResizeTitle = this._columnPicker.syncResizeTitle || syncResizeTitle;
            this._addon = new Slick.Controls.ColumnPicker(this.sharedService.allColumns, this.sharedService.grid, this.sharedService.gridOptions);
            if (this.sharedService.grid && this.sharedService.gridOptions.enableColumnPicker) {
                if (this._columnPicker.onExtensionRegistered) {
                    this._columnPicker.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onColumnsChanged, (e, args) => {
                    if (this._columnPicker && typeof this._columnPicker.onColumnsChanged === 'function') {
                        this._columnPicker.onColumnsChanged(e, args);
                    }
                    if (args && Array.isArray(args.columns) && args.columns.length !== this.sharedService.visibleColumns.length) {
                        this.sharedService.visibleColumns = args.columns;
                    }
                    // if we're using frozen columns, we need to readjust pinning when the new hidden column becomes visible again on the left pinning container
                    // we need to readjust frozenColumn index because SlickGrid freezes by index and has no knowledge of the columns themselves
                    const frozenColumnIndex = this.sharedService.gridOptions.frozenColumn !== undefined ? this.sharedService.gridOptions.frozenColumn : -1;
                    if (frozenColumnIndex >= 0) {
                        const { showing: isColumnShown, columnId, allColumns, columns: visibleColumns } = args;
                        this.extensionUtility.readjustFrozenColumnIndexWhenNeeded(columnId, frozenColumnIndex, isColumnShown, allColumns, visibleColumns);
                    }
                });
            }
            return this._addon;
        }
        return null;
    }
    /** Translate the Column Picker headers and also the last 2 checkboxes */
    translateColumnPicker() {
        // update the properties by pointers, that is the only way to get Column Picker Control to see the new values
        if (this._columnPicker) {
            this.emptyColumnPickerTitles();
            this._columnPicker.columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');
            this._columnPicker.forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');
            this._columnPicker.syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');
        }
        // translate all columns (including hidden columns)
        // eventually deprecate the "headerKey" and use only the "nameKey"
        this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');
        this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');
        // update the Titles of each sections (command, customTitle, ...)
        if (this._addon && this._addon.updateAllTitles && this._columnPicker) {
            this._addon.updateAllTitles(this._columnPicker);
        }
    }
    emptyColumnPickerTitles() {
        if (this._columnPicker) {
            this._columnPicker.columnTitle = '';
            this._columnPicker.forceFitTitle = '';
            this._columnPicker.syncResizeTitle = '';
        }
    }
};
ColumnPickerExtension.ctorParameters = () => [
    { type: ExtensionUtility },
    { type: SharedService }
];
ColumnPickerExtension = tslib_1.__decorate([
    Injectable()
], ColumnPickerExtension);
export { ColumnPickerExtension };
//# sourceMappingURL=data:application/json;base64,