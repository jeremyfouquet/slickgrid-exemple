import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName, } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { BindingEventService } from '../services/bindingEvent.service';
import { sanitizeHtmlToText } from '../services/utilities';
import { SharedService } from '../services/shared.service';
let CellExternalCopyManagerExtension = class CellExternalCopyManagerExtension {
    constructor(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
        this._bindingEventService = new BindingEventService();
    }
    get addonOptions() {
        return this._addonOptions;
    }
    get eventHandler() {
        return this._eventHandler;
    }
    get commandQueue() {
        return this._commandQueue;
    }
    get undoRedoBuffer() {
        return this._undoRedoBuffer;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        this._bindingEventService.unbindAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        if (this._cellSelectionModel && this._cellSelectionModel.destroy) {
            this._cellSelectionModel.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._addonOptions);
        this._addon = null;
        this._addonOptions = null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    register() {
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.cellExternalCopyManager);
            this.createUndoRedoBuffer();
            this._bindingEventService.bind(document.body, 'keydown', this.handleKeyDown.bind(this));
            this._addonOptions = Object.assign({}, this.getDefaultOptions(), this.sharedService.gridOptions.excelCopyBufferOptions);
            this._cellSelectionModel = new Slick.CellSelectionModel();
            this.sharedService.grid.setSelectionModel(this._cellSelectionModel);
            this._addon = new Slick.CellExternalCopyManager(this._addonOptions);
            if (this._addon) {
                this.sharedService.grid.registerPlugin(this._addon);
            }
            // hook to all possible events
            if (this.sharedService.grid && this._addonOptions) {
                if (this._addonOptions.onExtensionRegistered) {
                    this._addonOptions.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onCopyCells, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onCopyCells === 'function') {
                        this._addonOptions.onCopyCells(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onCopyCancelled, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onCopyCancelled === 'function') {
                        this._addonOptions.onCopyCancelled(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onPasteCells, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onPasteCells === 'function') {
                        this._addonOptions.onPasteCells(e, args);
                    }
                });
            }
            return this._addon;
        }
        return null;
    }
    /** Create an undo redo buffer used by the Excel like copy */
    createUndoRedoBuffer() {
        let commandCtr = 0;
        this._commandQueue = [];
        this._undoRedoBuffer = {
            queueAndExecuteCommand: (editCommand) => {
                this._commandQueue[commandCtr] = editCommand;
                commandCtr++;
                editCommand.execute();
            },
            undo: () => {
                if (commandCtr === 0) {
                    return;
                }
                commandCtr--;
                const command = this._commandQueue[commandCtr];
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.undo();
                }
            },
            redo: () => {
                if (commandCtr >= this._commandQueue.length) {
                    return;
                }
                const command = this._commandQueue[commandCtr];
                commandCtr++;
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.execute();
                }
            }
        };
    }
    /** @return default plugin (addon) options */
    getDefaultOptions() {
        let newRowIds = 0;
        return {
            clipboardCommandHandler: (editCommand) => {
                this._undoRedoBuffer.queueAndExecuteCommand.call(this._undoRedoBuffer, editCommand);
            },
            dataItemColumnValueExtractor: (item, columnDef) => {
                // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed
                // to decide if we evaluate the Formatter, we will use the same flag from Export which is "exportWithFormatter"
                if (!this.sharedService.gridOptions.editable || !columnDef.editor) {
                    const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.exportWithFormatter);
                    if (columnDef.formatter && isEvaluatingFormatter) {
                        const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this.sharedService.grid);
                        if (columnDef.sanitizeDataExport || (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.sanitizeDataExport)) {
                            let outputString = formattedOutput;
                            if (formattedOutput && typeof formattedOutput === 'object' && formattedOutput.hasOwnProperty('text')) {
                                outputString = formattedOutput.text;
                            }
                            if (outputString === null) {
                                outputString = '';
                            }
                            return sanitizeHtmlToText(outputString);
                        }
                        return formattedOutput;
                    }
                }
                // else use the default "dataItemColumnValueExtractor" from the plugin itself
                // we can do that by setting back the getter with null
                return null;
            },
            readOnlyMode: false,
            includeHeaderWhenCopying: false,
            newRowCreator: (count) => {
                for (let i = 0; i < count; i++) {
                    const item = {
                        id: 'newRow_' + newRowIds++
                    };
                    this.sharedService.grid.getData().addItem(item);
                }
            }
        };
    }
    /** Hook an undo shortcut key hook that will redo/undo the copy buffer using Ctrl+(Shift)+Z keyboard events */
    handleKeyDown(e) {
        const keyCode = e.keyCode || e.code;
        if (keyCode === 90 && (e.ctrlKey || e.metaKey)) {
            if (e.shiftKey) {
                this._undoRedoBuffer.redo(); // Ctrl + Shift + Z
            }
            else {
                this._undoRedoBuffer.undo(); // Ctrl + Z
            }
        }
    }
};
CellExternalCopyManagerExtension.ctorParameters = () => [
    { type: ExtensionUtility },
    { type: SharedService }
];
CellExternalCopyManagerExtension = tslib_1.__decorate([
    Injectable()
], CellExternalCopyManagerExtension);
export { CellExternalCopyManagerExtension };
//# sourceMappingURL=data:application/json;base64,