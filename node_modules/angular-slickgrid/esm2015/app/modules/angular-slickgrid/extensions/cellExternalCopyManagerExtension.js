import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName, } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { BindingEventService } from '../services/bindingEvent.service';
import { sanitizeHtmlToText } from '../services/utilities';
import { SharedService } from '../services/shared.service';
import * as ɵngcc0 from '@angular/core';
let CellExternalCopyManagerExtension = class CellExternalCopyManagerExtension {
    constructor(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
        this._bindingEventService = new BindingEventService();
    }
    get addonOptions() {
        return this._addonOptions;
    }
    get eventHandler() {
        return this._eventHandler;
    }
    get commandQueue() {
        return this._commandQueue;
    }
    get undoRedoBuffer() {
        return this._undoRedoBuffer;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        this._bindingEventService.unbindAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        if (this._cellSelectionModel && this._cellSelectionModel.destroy) {
            this._cellSelectionModel.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._addonOptions);
        this._addon = null;
        this._addonOptions = null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    register() {
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.cellExternalCopyManager);
            this.createUndoRedoBuffer();
            this._bindingEventService.bind(document.body, 'keydown', this.handleKeyDown.bind(this));
            this._addonOptions = Object.assign({}, this.getDefaultOptions(), this.sharedService.gridOptions.excelCopyBufferOptions);
            this._cellSelectionModel = new Slick.CellSelectionModel();
            this.sharedService.grid.setSelectionModel(this._cellSelectionModel);
            this._addon = new Slick.CellExternalCopyManager(this._addonOptions);
            if (this._addon) {
                this.sharedService.grid.registerPlugin(this._addon);
            }
            // hook to all possible events
            if (this.sharedService.grid && this._addonOptions) {
                if (this._addonOptions.onExtensionRegistered) {
                    this._addonOptions.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onCopyCells, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onCopyCells === 'function') {
                        this._addonOptions.onCopyCells(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onCopyCancelled, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onCopyCancelled === 'function') {
                        this._addonOptions.onCopyCancelled(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onPasteCells, (e, args) => {
                    if (this._addonOptions && typeof this._addonOptions.onPasteCells === 'function') {
                        this._addonOptions.onPasteCells(e, args);
                    }
                });
            }
            return this._addon;
        }
        return null;
    }
    /** Create an undo redo buffer used by the Excel like copy */
    createUndoRedoBuffer() {
        let commandCtr = 0;
        this._commandQueue = [];
        this._undoRedoBuffer = {
            queueAndExecuteCommand: (editCommand) => {
                this._commandQueue[commandCtr] = editCommand;
                commandCtr++;
                editCommand.execute();
            },
            undo: () => {
                if (commandCtr === 0) {
                    return;
                }
                commandCtr--;
                const command = this._commandQueue[commandCtr];
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.undo();
                }
            },
            redo: () => {
                if (commandCtr >= this._commandQueue.length) {
                    return;
                }
                const command = this._commandQueue[commandCtr];
                commandCtr++;
                if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {
                    command.execute();
                }
            }
        };
    }
    /** @return default plugin (addon) options */
    getDefaultOptions() {
        let newRowIds = 0;
        return {
            clipboardCommandHandler: (editCommand) => {
                this._undoRedoBuffer.queueAndExecuteCommand.call(this._undoRedoBuffer, editCommand);
            },
            dataItemColumnValueExtractor: (item, columnDef) => {
                // when grid or cell is not editable, we will possibly evaluate the Formatter if it was passed
                // to decide if we evaluate the Formatter, we will use the same flag from Export which is "exportWithFormatter"
                if (!this.sharedService.gridOptions.editable || !columnDef.editor) {
                    const isEvaluatingFormatter = (columnDef.exportWithFormatter !== undefined) ? columnDef.exportWithFormatter : (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.exportWithFormatter);
                    if (columnDef.formatter && isEvaluatingFormatter) {
                        const formattedOutput = columnDef.formatter(0, 0, item[columnDef.field], columnDef, item, this.sharedService.grid);
                        if (columnDef.sanitizeDataExport || (this.sharedService.gridOptions.exportOptions && this.sharedService.gridOptions.exportOptions.sanitizeDataExport)) {
                            let outputString = formattedOutput;
                            if (formattedOutput && typeof formattedOutput === 'object' && formattedOutput.hasOwnProperty('text')) {
                                outputString = formattedOutput.text;
                            }
                            if (outputString === null) {
                                outputString = '';
                            }
                            return sanitizeHtmlToText(outputString);
                        }
                        return formattedOutput;
                    }
                }
                // else use the default "dataItemColumnValueExtractor" from the plugin itself
                // we can do that by setting back the getter with null
                return null;
            },
            readOnlyMode: false,
            includeHeaderWhenCopying: false,
            newRowCreator: (count) => {
                for (let i = 0; i < count; i++) {
                    const item = {
                        id: 'newRow_' + newRowIds++
                    };
                    this.sharedService.grid.getData().addItem(item);
                }
            }
        };
    }
    /** Hook an undo shortcut key hook that will redo/undo the copy buffer using Ctrl+(Shift)+Z keyboard events */
    handleKeyDown(e) {
        const keyCode = e.keyCode || e.code;
        if (keyCode === 90 && (e.ctrlKey || e.metaKey)) {
            if (e.shiftKey) {
                this._undoRedoBuffer.redo(); // Ctrl + Shift + Z
            }
            else {
                this._undoRedoBuffer.undo(); // Ctrl + Z
            }
        }
    }
};
CellExternalCopyManagerExtension.ɵfac = function CellExternalCopyManagerExtension_Factory(t) { return new (t || CellExternalCopyManagerExtension)(ɵngcc0.ɵɵinject(ExtensionUtility), ɵngcc0.ɵɵinject(SharedService)); };
CellExternalCopyManagerExtension.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CellExternalCopyManagerExtension, factory: CellExternalCopyManagerExtension.ɵfac });
CellExternalCopyManagerExtension.ctorParameters = () => [
    { type: ExtensionUtility },
    { type: SharedService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CellExternalCopyManagerExtension, [{
        type: Injectable
    }], function () { return [{ type: ExtensionUtility }, { type: SharedService }]; }, null); })();
export { CellExternalCopyManagerExtension };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbEV4dGVybmFsQ29weU1hbmFnZXJFeHRlbnNpb24uanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLXNsaWNrZ3JpZC9hcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9leHRlbnNpb25zL2NlbGxFeHRlcm5hbENvcHlNYW5hZ2VyRXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFNTCxhQUFhLEdBR2QsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBTzNELElBQWEsZ0NBQWdDLEdBQTdDLE1BQWEsZ0NBQWdDO0FBQUcsSUFTOUMsWUFBb0IsZ0JBQWtDLEVBQVUsYUFBNEI7QUFDOUYsUUFEc0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQVMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUMzRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2xELFFBQUksSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksbUJBQW1CLEVBQUUsQ0FBQztBQUMxRCxJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksWUFBWTtBQUFLLFFBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksWUFBWTtBQUFLLFFBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksWUFBWTtBQUFLLFFB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QSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBOUtBLEFBQUEsQUFBQSxBQUFBLEFBVEEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF1TEEsQUF2TEEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBDb2x1bW4sXHJcbiAgRWRpdENvbW1hbmQsXHJcbiAgRWRpdFVuZG9SZWRvQnVmZmVyLFxyXG4gIEV4Y2VsQ29weUJ1ZmZlck9wdGlvbixcclxuICBFeHRlbnNpb24sXHJcbiAgRXh0ZW5zaW9uTmFtZSxcclxuICBTZWxlY3RlZFJhbmdlLFxyXG4gIFNsaWNrRXZlbnRIYW5kbGVyLFxyXG59IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvblV0aWxpdHkgfSBmcm9tICcuL2V4dGVuc2lvblV0aWxpdHknO1xyXG5pbXBvcnQgeyBCaW5kaW5nRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYmluZGluZ0V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBzYW5pdGl6ZUh0bWxUb1RleHQgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc2hhcmVkLnNlcnZpY2UnO1xyXG5cclxuLy8gdXNpbmcgZXh0ZXJuYWwgbm9uLXR5cGVkIGpzIGxpYnJhcmllc1xyXG5kZWNsYXJlIGNvbnN0IFNsaWNrOiBhbnk7XHJcbmRlY2xhcmUgY29uc3QgJDogYW55O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2VsbEV4dGVybmFsQ29weU1hbmFnZXJFeHRlbnNpb24gaW1wbGVtZW50cyBFeHRlbnNpb24ge1xyXG4gIHByaXZhdGUgX2FkZG9uOiBhbnk7XHJcbiAgcHJpdmF0ZSBfYWRkb25PcHRpb25zOiBFeGNlbENvcHlCdWZmZXJPcHRpb24gfCBudWxsO1xyXG4gIHByaXZhdGUgX2JpbmRpbmdFdmVudFNlcnZpY2U6IEJpbmRpbmdFdmVudFNlcnZpY2U7XHJcbiAgcHJpdmF0ZSBfY2VsbFNlbGVjdGlvbk1vZGVsOiBhbnk7XHJcbiAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyOiBTbGlja0V2ZW50SGFuZGxlcjtcclxuICBwcml2YXRlIF9jb21tYW5kUXVldWU6IEVkaXRDb21tYW5kW107XHJcbiAgcHJpdmF0ZSBfdW5kb1JlZG9CdWZmZXI6IEVkaXRVbmRvUmVkb0J1ZmZlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBleHRlbnNpb25VdGlsaXR5OiBFeHRlbnNpb25VdGlsaXR5LCBwcml2YXRlIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2UpIHtcclxuICAgIHRoaXMuX2V2ZW50SGFuZGxlciA9IG5ldyBTbGljay5FdmVudEhhbmRsZXIoKTtcclxuICAgIHRoaXMuX2JpbmRpbmdFdmVudFNlcnZpY2UgPSBuZXcgQmluZGluZ0V2ZW50U2VydmljZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGFkZG9uT3B0aW9ucygpOiBFeGNlbENvcHlCdWZmZXJPcHRpb24gfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLl9hZGRvbk9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICBnZXQgZXZlbnRIYW5kbGVyKCk6IFNsaWNrRXZlbnRIYW5kbGVyIHtcclxuICAgIHJldHVybiB0aGlzLl9ldmVudEhhbmRsZXI7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tbWFuZFF1ZXVlKCk6IEVkaXRDb21tYW5kW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRRdWV1ZTtcclxuICB9XHJcblxyXG4gIGdldCB1bmRvUmVkb0J1ZmZlcigpOiBFZGl0VW5kb1JlZG9CdWZmZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3VuZG9SZWRvQnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIC8vIHVuc3Vic2NyaWJlIGFsbCBTbGlja0dyaWQgZXZlbnRzXHJcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIudW5zdWJzY3JpYmVBbGwoKTtcclxuICAgIHRoaXMuX2JpbmRpbmdFdmVudFNlcnZpY2UudW5iaW5kQWxsKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2FkZG9uICYmIHRoaXMuX2FkZG9uLmRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy5fYWRkb24uZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuX2NlbGxTZWxlY3Rpb25Nb2RlbCAmJiB0aGlzLl9jZWxsU2VsZWN0aW9uTW9kZWwuZGVzdHJveSkge1xyXG4gICAgICB0aGlzLl9jZWxsU2VsZWN0aW9uTW9kZWwuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5leHRlbnNpb25VdGlsaXR5Lm51bGxpZnlGdW5jdGlvbk5hbWVTdGFydGluZ1dpdGhPbih0aGlzLl9hZGRvbk9wdGlvbnMpO1xyXG4gICAgdGhpcy5fYWRkb24gPSBudWxsO1xyXG4gICAgdGhpcy5fYWRkb25PcHRpb25zID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgdGhlIGluc3RhbmNlIG9mIHRoZSBTbGlja0dyaWQgYWRkb24gKGNvbnRyb2wgb3IgcGx1Z2luKS4gKi9cclxuICBnZXRBZGRvbkluc3RhbmNlKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWRkb247XHJcbiAgfVxyXG5cclxuICByZWdpc3RlcigpOiBhbnkge1xyXG4gICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZSAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZCAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMpIHtcclxuICAgICAgLy8gZHluYW1pY2FsbHkgaW1wb3J0IHRoZSBTbGlja0dyaWQgcGx1Z2luIChhZGRvbikgd2l0aCBSZXF1aXJlSlNcclxuICAgICAgdGhpcy5leHRlbnNpb25VdGlsaXR5LmxvYWRFeHRlbnNpb25EeW5hbWljYWxseShFeHRlbnNpb25OYW1lLmNlbGxFeHRlcm5hbENvcHlNYW5hZ2VyKTtcclxuICAgICAgdGhpcy5jcmVhdGVVbmRvUmVkb0J1ZmZlcigpO1xyXG4gICAgICB0aGlzLl9iaW5kaW5nRXZlbnRTZXJ2aWNlLmJpbmQoZG9jdW1lbnQuYm9keSwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICB0aGlzLl9hZGRvbk9wdGlvbnMgPSB7IC4uLnRoaXMuZ2V0RGVmYXVsdE9wdGlvbnMoKSwgLi4udGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmV4Y2VsQ29weUJ1ZmZlck9wdGlvbnMgfSBhcyBFeGNlbENvcHlCdWZmZXJPcHRpb247XHJcbiAgICAgIHRoaXMuX2NlbGxTZWxlY3Rpb25Nb2RlbCA9IG5ldyBTbGljay5DZWxsU2VsZWN0aW9uTW9kZWwoKTtcclxuICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQuc2V0U2VsZWN0aW9uTW9kZWwodGhpcy5fY2VsbFNlbGVjdGlvbk1vZGVsKTtcclxuICAgICAgdGhpcy5fYWRkb24gPSBuZXcgU2xpY2suQ2VsbEV4dGVybmFsQ29weU1hbmFnZXIodGhpcy5fYWRkb25PcHRpb25zKTtcclxuICAgICAgaWYgKHRoaXMuX2FkZG9uKSB7XHJcbiAgICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQucmVnaXN0ZXJQbHVnaW4odGhpcy5fYWRkb24pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBob29rIHRvIGFsbCBwb3NzaWJsZSBldmVudHNcclxuICAgICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkICYmIHRoaXMuX2FkZG9uT3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLl9hZGRvbk9wdGlvbnMub25FeHRlbnNpb25SZWdpc3RlcmVkKSB7XHJcbiAgICAgICAgICB0aGlzLl9hZGRvbk9wdGlvbnMub25FeHRlbnNpb25SZWdpc3RlcmVkKHRoaXMuX2FkZG9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLnN1YnNjcmliZSh0aGlzLl9hZGRvbi5vbkNvcHlDZWxscywgKGU6IGFueSwgYXJnczogeyByYW5nZXM6IFNlbGVjdGVkUmFuZ2VbXSB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fYWRkb25PcHRpb25zICYmIHR5cGVvZiB0aGlzLl9hZGRvbk9wdGlvbnMub25Db3B5Q2VsbHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkb25PcHRpb25zLm9uQ29weUNlbGxzKGUsIGFyZ3MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlci5zdWJzY3JpYmUodGhpcy5fYWRkb24ub25Db3B5Q2FuY2VsbGVkLCAoZTogYW55LCBhcmdzOiB7IHJhbmdlczogU2VsZWN0ZWRSYW5nZVtdIH0pID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLl9hZGRvbk9wdGlvbnMgJiYgdHlwZW9mIHRoaXMuX2FkZG9uT3B0aW9ucy5vbkNvcHlDYW5jZWxsZWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkb25PcHRpb25zLm9uQ29weUNhbmNlbGxlZChlLCBhcmdzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIuc3Vic2NyaWJlKHRoaXMuX2FkZG9uLm9uUGFzdGVDZWxscywgKGU6IGFueSwgYXJnczogeyByYW5nZXM6IFNlbGVjdGVkUmFuZ2VbXSB9KSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fYWRkb25PcHRpb25zICYmIHR5cGVvZiB0aGlzLl9hZGRvbk9wdGlvbnMub25QYXN0ZUNlbGxzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZG9uT3B0aW9ucy5vblBhc3RlQ2VsbHMoZSwgYXJncyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLl9hZGRvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqIENyZWF0ZSBhbiB1bmRvIHJlZG8gYnVmZmVyIHVzZWQgYnkgdGhlIEV4Y2VsIGxpa2UgY29weSAqL1xyXG4gIHByaXZhdGUgY3JlYXRlVW5kb1JlZG9CdWZmZXIoKSB7XHJcbiAgICBsZXQgY29tbWFuZEN0ciA9IDA7XHJcbiAgICB0aGlzLl9jb21tYW5kUXVldWUgPSBbXTtcclxuXHJcbiAgICB0aGlzLl91bmRvUmVkb0J1ZmZlciA9IHtcclxuICAgICAgcXVldWVBbmRFeGVjdXRlQ29tbWFuZDogKGVkaXRDb21tYW5kOiBFZGl0Q29tbWFuZCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NvbW1hbmRRdWV1ZVtjb21tYW5kQ3RyXSA9IGVkaXRDb21tYW5kO1xyXG4gICAgICAgIGNvbW1hbmRDdHIrKztcclxuICAgICAgICBlZGl0Q29tbWFuZC5leGVjdXRlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHVuZG86ICgpID0+IHtcclxuICAgICAgICBpZiAoY29tbWFuZEN0ciA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21tYW5kQ3RyLS07XHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuX2NvbW1hbmRRdWV1ZVtjb21tYW5kQ3RyXTtcclxuICAgICAgICBpZiAoY29tbWFuZCAmJiBTbGljay5HbG9iYWxFZGl0b3JMb2NrLmNhbmNlbEN1cnJlbnRFZGl0KCkpIHtcclxuICAgICAgICAgIGNvbW1hbmQudW5kbygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgcmVkbzogKCkgPT4ge1xyXG4gICAgICAgIGlmIChjb21tYW5kQ3RyID49IHRoaXMuX2NvbW1hbmRRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuX2NvbW1hbmRRdWV1ZVtjb21tYW5kQ3RyXTtcclxuICAgICAgICBjb21tYW5kQ3RyKys7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQgJiYgU2xpY2suR2xvYmFsRWRpdG9yTG9jay5jYW5jZWxDdXJyZW50RWRpdCgpKSB7XHJcbiAgICAgICAgICBjb21tYW5kLmV4ZWN1dGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKiogQHJldHVybiBkZWZhdWx0IHBsdWdpbiAoYWRkb24pIG9wdGlvbnMgKi9cclxuICBwcml2YXRlIGdldERlZmF1bHRPcHRpb25zKCk6IEV4Y2VsQ29weUJ1ZmZlck9wdGlvbiB7XHJcbiAgICBsZXQgbmV3Um93SWRzID0gMDtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjbGlwYm9hcmRDb21tYW5kSGFuZGxlcjogKGVkaXRDb21tYW5kOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLl91bmRvUmVkb0J1ZmZlci5xdWV1ZUFuZEV4ZWN1dGVDb21tYW5kLmNhbGwodGhpcy5fdW5kb1JlZG9CdWZmZXIsIGVkaXRDb21tYW5kKTtcclxuICAgICAgfSxcclxuICAgICAgZGF0YUl0ZW1Db2x1bW5WYWx1ZUV4dHJhY3RvcjogKGl0ZW06IGFueSwgY29sdW1uRGVmOiBDb2x1bW4pID0+IHtcclxuICAgICAgICAvLyB3aGVuIGdyaWQgb3IgY2VsbCBpcyBub3QgZWRpdGFibGUsIHdlIHdpbGwgcG9zc2libHkgZXZhbHVhdGUgdGhlIEZvcm1hdHRlciBpZiBpdCB3YXMgcGFzc2VkXHJcbiAgICAgICAgLy8gdG8gZGVjaWRlIGlmIHdlIGV2YWx1YXRlIHRoZSBGb3JtYXR0ZXIsIHdlIHdpbGwgdXNlIHRoZSBzYW1lIGZsYWcgZnJvbSBFeHBvcnQgd2hpY2ggaXMgXCJleHBvcnRXaXRoRm9ybWF0dGVyXCJcclxuICAgICAgICBpZiAoIXRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5lZGl0YWJsZSB8fCAhY29sdW1uRGVmLmVkaXRvcikge1xyXG4gICAgICAgICAgY29uc3QgaXNFdmFsdWF0aW5nRm9ybWF0dGVyID0gKGNvbHVtbkRlZi5leHBvcnRXaXRoRm9ybWF0dGVyICE9PSB1bmRlZmluZWQpID8gY29sdW1uRGVmLmV4cG9ydFdpdGhGb3JtYXR0ZXIgOiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmV4cG9ydE9wdGlvbnMgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmV4cG9ydE9wdGlvbnMuZXhwb3J0V2l0aEZvcm1hdHRlcik7XHJcbiAgICAgICAgICBpZiAoY29sdW1uRGVmLmZvcm1hdHRlciAmJiBpc0V2YWx1YXRpbmdGb3JtYXR0ZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkT3V0cHV0ID0gY29sdW1uRGVmLmZvcm1hdHRlcigwLCAwLCBpdGVtW2NvbHVtbkRlZi5maWVsZF0sIGNvbHVtbkRlZiwgaXRlbSwgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQpO1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uRGVmLnNhbml0aXplRGF0YUV4cG9ydCB8fCAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmV4cG9ydE9wdGlvbnMgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmV4cG9ydE9wdGlvbnMuc2FuaXRpemVEYXRhRXhwb3J0KSkge1xyXG4gICAgICAgICAgICAgIGxldCBvdXRwdXRTdHJpbmcgPSBmb3JtYXR0ZWRPdXRwdXQgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWRPdXRwdXQgJiYgdHlwZW9mIGZvcm1hdHRlZE91dHB1dCA9PT0gJ29iamVjdCcgJiYgZm9ybWF0dGVkT3V0cHV0Lmhhc093blByb3BlcnR5KCd0ZXh0JykpIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dFN0cmluZyA9IGZvcm1hdHRlZE91dHB1dC50ZXh0O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAob3V0cHV0U3RyaW5nID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRTdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNhbml0aXplSHRtbFRvVGV4dChvdXRwdXRTdHJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRPdXRwdXQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVsc2UgdXNlIHRoZSBkZWZhdWx0IFwiZGF0YUl0ZW1Db2x1bW5WYWx1ZUV4dHJhY3RvclwiIGZyb20gdGhlIHBsdWdpbiBpdHNlbGZcclxuICAgICAgICAvLyB3ZSBjYW4gZG8gdGhhdCBieSBzZXR0aW5nIGJhY2sgdGhlIGdldHRlciB3aXRoIG51bGxcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfSxcclxuICAgICAgcmVhZE9ubHlNb2RlOiBmYWxzZSxcclxuICAgICAgaW5jbHVkZUhlYWRlcldoZW5Db3B5aW5nOiBmYWxzZSxcclxuICAgICAgbmV3Um93Q3JlYXRvcjogKGNvdW50OiBudW1iZXIpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7XHJcbiAgICAgICAgICAgIGlkOiAnbmV3Um93XycgKyBuZXdSb3dJZHMrK1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLmdldERhdGEoKS5hZGRJdGVtKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKiBIb29rIGFuIHVuZG8gc2hvcnRjdXQga2V5IGhvb2sgdGhhdCB3aWxsIHJlZG8vdW5kbyB0aGUgY29weSBidWZmZXIgdXNpbmcgQ3RybCsoU2hpZnQpK1oga2V5Ym9hcmQgZXZlbnRzICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVLZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGUgfHwgZS5jb2RlO1xyXG4gICAgaWYgKGtleUNvZGUgPT09IDkwICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkge1xyXG4gICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgIHRoaXMuX3VuZG9SZWRvQnVmZmVyLnJlZG8oKTsgLy8gQ3RybCArIFNoaWZ0ICsgWlxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX3VuZG9SZWRvQnVmZmVyLnVuZG8oKTsgLy8gQ3RybCArIFpcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=