import * as tslib_1 from "tslib";
import { SharedService } from './shared.service';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let TreeDataService = class TreeDataService {
    constructor(sharedService) {
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
    }
    get dataset() {
        return this.dataView && this.dataView.getItems && this.dataView.getItems();
    }
    get datasetHierarchical() {
        return this.sharedService.hierarchicalDataset;
    }
    get dataView() {
        return this._grid && this._grid.getData && this._grid.getData();
    }
    get gridOptions() {
        return this._grid && this._grid.getOptions && this._grid.getOptions() || {};
    }
    /** Getter of the SlickGrid Event Handler */
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        if (this._eventHandler && this._eventHandler.unsubscribeAll) {
            this._eventHandler.unsubscribeAll();
        }
    }
    init(grid) {
        this._grid = grid;
        // subscribe to the SlickGrid event and call the backend execution
        this._eventHandler.subscribe(grid.onClick, this.handleOnCellClick.bind(this));
    }
    handleOnCellClick(event, args) {
        if (event && args) {
            const targetElm = event.target || {};
            const treeDataOptions = this.gridOptions.treeDataOptions;
            const collapsedPropName = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';
            const idPropName = this.gridOptions.datasetIdPropertyName || 'id';
            if (targetElm && targetElm.className) {
                const hasToggleClass = targetElm.className.indexOf('toggle') >= 0 || false;
                if (hasToggleClass) {
                    const item = this.dataView.getItem(args.row);
                    if (item) {
                        item[collapsedPropName] = !item[collapsedPropName] ? true : false;
                        this.dataView.updateItem(item[idPropName], item);
                        this._grid.invalidate();
                    }
                    event.stopImmediatePropagation();
                }
            }
        }
    }
    toggleTreeDataCollapse(collapsing) {
        if (this.gridOptions) {
            const treeDataOptions = this.gridOptions.treeDataOptions;
            if (this.gridOptions.enableTreeData) {
                const items = this.dataView.getItems() || [];
                const collapsedPropName = treeDataOptions && treeDataOptions.collapsedPropName || '__collapsed';
                items.forEach((item) => item[collapsedPropName] = collapsing);
                this.dataView.setItems(items);
                this._grid.invalidate();
            }
        }
    }
};
TreeDataService.ɵfac = function TreeDataService_Factory(t) { return new (t || TreeDataService)(ɵngcc0.ɵɵinject(SharedService)); };
TreeDataService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeDataService, factory: TreeDataService.ɵfac });
TreeDataService.ctorParameters = () => [
    { type: SharedService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeDataService, [{
        type: Injectable
    }], function () { return [{ type: SharedService }]; }, null); })();
export { TreeDataService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,