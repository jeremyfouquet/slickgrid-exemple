import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isObservable, Subject } from 'rxjs';
import * as isequal_ from 'lodash.isequal';
const isequal = isequal_; // patch to fix rollup to work
import { FilterService } from './filter.service';
import { GridService } from './grid.service';
import { SharedService } from './shared.service';
import { executeBackendProcessesCallback, onBackendError } from './backend-utilities';
import { unsubscribeAllObservables } from './utilities';
let PaginationService = class PaginationService {
    /** Constructor */
    constructor(filterService, gridService, sharedService) {
        this.filterService = filterService;
        this.gridService = gridService;
        this.sharedService = sharedService;
        this._initialized = false;
        this._isLocalGrid = true;
        this._dataFrom = 1;
        this._dataTo = 1;
        this._pageCount = 1;
        this._pageNumber = 1;
        this._totalItems = 0;
        this._eventHandler = new Slick.EventHandler();
        this._subscriptions = [];
        this.onPaginationChanged = new Subject();
        this.onPaginationVisibilityChanged = new Subject();
    }
    get paginationOptions() {
        return this._paginationOptions;
    }
    set paginationOptions(paginationOptions) {
        this._paginationOptions = paginationOptions;
    }
    get availablePageSizes() {
        return this._availablePageSizes;
    }
    get dataFrom() {
        return this._dataFrom;
    }
    get dataTo() {
        return this._dataTo;
    }
    get itemsPerPage() {
        return this._itemsPerPage;
    }
    get pageCount() {
        return this._pageCount;
    }
    get pageNumber() {
        return this._pageNumber;
    }
    set totalItems(totalItems) {
        this._totalItems = totalItems;
        if (this._initialized) {
            this.refreshPagination();
        }
    }
    get totalItems() {
        return this._totalItems;
    }
    init(grid, dataView, paginationOptions, backendServiceApi) {
        this._availablePageSizes = paginationOptions.pageSizes;
        this.dataView = dataView;
        this.grid = grid;
        this._backendServiceApi = backendServiceApi;
        this._paginationOptions = paginationOptions;
        this._isLocalGrid = !backendServiceApi;
        this._pageNumber = paginationOptions.pageNumber || 1;
        if (backendServiceApi && (!backendServiceApi.service || !backendServiceApi.process)) {
            throw new Error(`BackendServiceApi requires the following 2 properties "process" and "service" to be defined.`);
        }
        if (this._isLocalGrid && this.dataView) {
            this._eventHandler.subscribe(this.dataView.onPagingInfoChanged, (e, pagingInfo) => {
                if (this._totalItems !== pagingInfo.totalRows) {
                    this.updateTotalItems(pagingInfo.totalRows);
                }
            });
            dataView.setRefreshHints({ isFilterUnchanged: true });
            dataView.setPagingOptions({ pageSize: this.paginationOptions.pageSize, pageNum: (this._pageNumber - 1) }); // dataView page starts at 0 instead of 1
        }
        // Subscribe to Filter Clear & Changed and go back to page 1 when that happen
        this._subscriptions.push(this.filterService.onFilterChanged.subscribe(() => this.resetPagination()));
        this._subscriptions.push(this.filterService.onFilterCleared.subscribe(() => this.resetPagination()));
        // Subscribe to any dataview row count changed so that when Adding/Deleting item(s) through the DataView
        // that would trigger a refresh of the pagination numbers
        if (this.dataView) {
            this._subscriptions.push(this.gridService.onItemAdded.subscribe((items) => this.processOnItemAddedOrRemoved(items, true)));
            this._subscriptions.push(this.gridService.onItemDeleted.subscribe((items) => this.processOnItemAddedOrRemoved(items, false)));
        }
        this.refreshPagination(false, false);
        this._initialized = true;
    }
    dispose() {
        this._initialized = false;
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        // also unsubscribe all Angular Subscriptions
        this._subscriptions = unsubscribeAllObservables(this._subscriptions);
    }
    getCurrentPageNumber() {
        return this._pageNumber;
    }
    getCurrentPagination() {
        return {
            pageNumber: this._pageNumber,
            pageSize: this._itemsPerPage,
            pageSizes: this._availablePageSizes,
        };
    }
    getFullPagination() {
        return {
            pageCount: this._pageCount,
            pageNumber: this._pageNumber,
            pageSize: this._itemsPerPage,
            pageSizes: this._availablePageSizes,
            totalItems: this._totalItems,
            dataFrom: this._dataFrom,
            dataTo: this._dataTo,
        };
    }
    getCurrentItemPerPage() {
        return this._itemsPerPage;
    }
    changeItemPerPage(itemsPerPage, event) {
        this._pageNumber = 1;
        this._pageCount = Math.ceil(this._totalItems / itemsPerPage);
        this._itemsPerPage = itemsPerPage;
        return this.processOnPageChanged(this._pageNumber, event);
    }
    goToFirstPage(event) {
        this._pageNumber = 1;
        return this.processOnPageChanged(this._pageNumber, event);
    }
    goToLastPage(event) {
        this._pageNumber = this._pageCount || 1;
        return this.processOnPageChanged(this._pageNumber, event);
    }
    goToNextPage(event) {
        if (this._pageNumber < this._pageCount) {
            this._pageNumber++;
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(resolve => resolve(false));
        }
    }
    goToPageNumber(pageNumber, event) {
        const previousPageNumber = this._pageNumber;
        if (pageNumber < 1) {
            this._pageNumber = 1;
        }
        else if (pageNumber > this._pageCount) {
            this._pageNumber = this._pageCount;
        }
        else {
            this._pageNumber = pageNumber;
        }
        if (this._pageNumber !== previousPageNumber) {
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(resolve => resolve(false));
        }
    }
    goToPreviousPage(event) {
        if (this._pageNumber > 1) {
            this._pageNumber--;
            return this.processOnPageChanged(this._pageNumber, event);
        }
        else {
            return new Promise(resolve => resolve(false));
        }
    }
    refreshPagination(isPageNumberReset = false, triggerChangedEvent = true) {
        const previousPagination = Object.assign({}, this.getCurrentPagination());
        if (this._paginationOptions) {
            const pagination = this._paginationOptions;
            // set the number of items per page if not already set
            if (!this._itemsPerPage) {
                if (this._isLocalGrid) {
                    this._itemsPerPage = pagination.pageSize;
                }
                else {
                    this._itemsPerPage = +((this._backendServiceApi && this._backendServiceApi.options && this._backendServiceApi.options.paginationOptions && this._backendServiceApi.options.paginationOptions.first) ? this._backendServiceApi.options.paginationOptions.first : pagination.pageSize);
                }
            }
            // if totalItems changed, we should always go back to the first page and recalculation the From-To indexes
            if (isPageNumberReset || this._totalItems !== pagination.totalItems) {
                if (isPageNumberReset) {
                    this._pageNumber = 1;
                    this.paginationOptions.pageNumber = 1;
                }
                else if (!this._initialized && pagination.pageNumber && pagination.pageNumber > 1) {
                    this._pageNumber = pagination.pageNumber || 1;
                }
                // when page number is set to 1 then also reset the "offset" of backend service
                if (this._pageNumber === 1 && this._backendServiceApi) {
                    this._backendServiceApi.service.resetPaginationOptions();
                }
            }
            // calculate and refresh the multiple properties of the pagination UI
            this._availablePageSizes = pagination.pageSizes;
            if (!this._totalItems && pagination.totalItems) {
                this._totalItems = pagination.totalItems;
            }
            this.recalculateFromToIndexes();
        }
        this._pageCount = Math.ceil(this._totalItems / this._itemsPerPage);
        const currentPagination = this.getCurrentPagination();
        this.sharedService.currentPagination = currentPagination;
        if (triggerChangedEvent && !isequal(previousPagination, currentPagination)) {
            this.onPaginationChanged.next(currentPagination);
        }
    }
    processOnPageChanged(pageNumber, event) {
        return new Promise((resolve, reject) => {
            this.recalculateFromToIndexes();
            if (this._isLocalGrid && this.dataView) {
                this.dataView.setPagingOptions({ pageSize: this._itemsPerPage, pageNum: (pageNumber - 1) }); // dataView page starts at 0 instead of 1
                this.onPaginationChanged.next(this.getFullPagination());
            }
            else {
                const itemsPerPage = +this._itemsPerPage;
                // keep start time & end timestamps & return it after process execution
                const startTime = new Date();
                // run any pre-process, if defined, for example a spinner
                if (this._backendServiceApi.preProcess) {
                    this._backendServiceApi.preProcess();
                }
                const query = this._backendServiceApi.service.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: itemsPerPage });
                // the processes can be Promises or an Observables (like HttpClient)
                const process = this._backendServiceApi.process(query);
                if (process instanceof Promise) {
                    process
                        .then((processResult) => {
                        resolve(executeBackendProcessesCallback(startTime, processResult, this._backendServiceApi, this._totalItems));
                    })
                        .catch((error) => {
                        onBackendError(error, this._backendServiceApi);
                        reject(process);
                    });
                }
                else if (isObservable(process)) {
                    this._subscriptions.push(process.subscribe((processResult) => {
                        resolve(executeBackendProcessesCallback(startTime, processResult, this._backendServiceApi, this._totalItems));
                    }, (error) => {
                        onBackendError(error, this._backendServiceApi);
                        reject(process);
                    }));
                }
                this.onPaginationChanged.next(this.getFullPagination());
            }
        });
    }
    recalculateFromToIndexes() {
        if (this._totalItems === 0) {
            this._dataFrom = 0;
            this._dataTo = 1;
            this._pageNumber = 0;
        }
        else {
            this._dataFrom = this._pageNumber > 1 ? ((this._pageNumber * this._itemsPerPage) - this._itemsPerPage + 1) : 1;
            this._dataTo = (this._totalItems < this._itemsPerPage) ? this._totalItems : ((this._pageNumber || 1) * this._itemsPerPage);
            if (this._dataTo > this._totalItems) {
                this._dataTo = this._totalItems;
            }
        }
        this._pageNumber = (this._totalItems > 0 && this._pageNumber === 0) ? 1 : this._pageNumber;
        // do a final check on the From/To and make sure they are not over or below min/max acceptable values
        if (this._dataTo > this._totalItems) {
            this._dataTo = this._totalItems;
        }
        else if (this._totalItems < this._itemsPerPage) {
            this._dataTo = this._totalItems;
        }
    }
    /** Reset the Pagination to first page and recalculate necessary numbers */
    resetPagination(triggerChangedEvent = true) {
        if (this._isLocalGrid) {
            // on a local grid we also need to reset the DataView paging to 1st page
            this.dataView.setPagingOptions({ pageSize: this._itemsPerPage, pageNum: 0 });
        }
        this.refreshPagination(true, triggerChangedEvent);
    }
    /**
     * Toggle the Pagination (show/hide), it will use the visible if defined else it will automatically inverse when called without argument
     *
     * IMPORTANT NOTE:
     * The Pagination must be created on initial page load, then only after can you toggle it.
     * Basically this method WILL NOT WORK to show the Pagination if it was not there from the start.
     */
    togglePaginationVisibility(visible) {
        if (this.grid && this.sharedService && this.sharedService.gridOptions) {
            const isVisible = visible !== undefined ? visible : !this.sharedService.gridOptions.enablePagination;
            this.sharedService.gridOptions.enablePagination = isVisible;
            this.onPaginationVisibilityChanged.next({ visible: isVisible });
            // make sure to reset the Pagination and go back to first page to avoid any issues with Pagination being offset
            if (isVisible) {
                this.goToFirstPage();
            }
            // when using a local grid, we can reset the DataView pagination by changing its page size
            // page size of 0 would show all, hence cancel the pagination
            if (this._isLocalGrid) {
                const pageSize = visible ? this._itemsPerPage : 0;
                this.dataView.setPagingOptions({ pageSize, pageNum: 0 });
            }
        }
    }
    // --
    // private functions
    // --------------------
    updateTotalItems(totalItems, triggerChangedEvent = false) {
        this._totalItems = totalItems;
        if (this._paginationOptions) {
            this._paginationOptions.totalItems = totalItems;
            this.refreshPagination(false, triggerChangedEvent);
        }
    }
    /**
     * When item is added or removed, we will refresh the numbers on the pagination however we won't trigger a backend change
     * This will have a side effect though, which is that the "To" count won't be matching the "items per page" count,
     * that is a necessary side effect to avoid triggering a backend query just to refresh the paging,
     * basically we assume that this offset is fine for the time being,
     * until user does an action which will refresh the data hence the pagination which will then become normal again
     */
    processOnItemAddedOrRemoved(items, isItemAdded = true) {
        if (items !== null) {
            const previousDataTo = this._dataTo;
            const itemCount = Array.isArray(items) ? items.length : 1;
            const itemCountWithDirection = isItemAdded ? +itemCount : -itemCount;
            // refresh the total count in the pagination and in the UI
            this._totalItems += itemCountWithDirection;
            this.recalculateFromToIndexes();
            // finally refresh the "To" count and we know it might be different than the "items per page" count
            // but this is necessary since we don't want an actual backend refresh
            this._dataTo = previousDataTo + itemCountWithDirection;
            this.onPaginationChanged.next(this.getFullPagination());
        }
    }
};
PaginationService.ctorParameters = () => [
    { type: FilterService },
    { type: GridService },
    { type: SharedService }
];
PaginationService = tslib_1.__decorate([
    Injectable()
], PaginationService);
export { PaginationService };
//# sourceMappingURL=data:application/json;base64,