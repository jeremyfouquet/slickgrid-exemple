import { Subject } from 'rxjs';
export class SharedService {
    constructor() {
        this._hideHeaderRowAfterPageLoad = false;
        this.onHeaderMenuHideColumns = new Subject();
    }
    // --
    // public
    /** Getter for All Columns  in the grid (hidden/visible) */
    get allColumns() {
        return this._allColumns;
    }
    /** Setter for All Columns  in the grid (hidden/visible) */
    set allColumns(allColumns) {
        this._allColumns = allColumns;
    }
    /** Getter for the Column Definitions pulled through the Grid Object */
    get columnDefinitions() {
        return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
    }
    /** Getter for the Current Pagination (when Pagination is enabled) */
    get currentPagination() {
        return this._currentPagination;
    }
    /** Setter for the Current Pagination (when Pagination is enabled) */
    set currentPagination(currentPagination) {
        this._currentPagination = currentPagination;
    }
    /** Getter for SlickGrid DataView object */
    get dataView() {
        return this._dataView;
    }
    /** Setter for SlickGrid DataView object */
    set dataView(dataView) {
        this._dataView = dataView;
    }
    /** Setter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
    get frozenVisibleColumnId() {
        return this._frozenVisibleColumnId;
    }
    /** Getter to keep the frozen column id for reference if we ever show/hide column from ColumnPicker/GridMenu afterward */
    set frozenVisibleColumnId(columnId) {
        this._frozenVisibleColumnId = columnId;
    }
    /** Getter for SlickGrid Grid object */
    get grid() {
        return this._grid;
    }
    /** Setter for SlickGrid Grid object */
    set grid(grid) {
        this._grid = grid;
    }
    /** Getter for the Grid Options pulled through the Grid Object */
    get gridOptions() {
        return this._gridOptions || this._grid && this._grid.getOptions && this._grid.getOptions() || {};
    }
    /** Setter for the Grid Options pulled through the Grid Object */
    set gridOptions(gridOptions) {
        this._gridOptions = gridOptions;
    }
    /** Getter for the Grid Options */
    get groupItemMetadataProvider() {
        return this._groupItemMetadataProvider;
    }
    /** Setter for the Grid Options */
    set groupItemMetadataProvider(groupItemMetadataProvider) {
        this._groupItemMetadataProvider = groupItemMetadataProvider;
    }
    /** Getter to know if user want to hide header row after 1st page load */
    get hideHeaderRowAfterPageLoad() {
        return this._hideHeaderRowAfterPageLoad;
    }
    /** Setter for knowing if user want to hide header row after 1st page load */
    set hideHeaderRowAfterPageLoad(hideHeaderRowAfterPageLoad) {
        this._hideHeaderRowAfterPageLoad = hideHeaderRowAfterPageLoad;
    }
    /** Getter for the Visible Columns in the grid */
    get visibleColumns() {
        return this._visibleColumns;
    }
    /** Setter for the Visible Columns in the grid */
    set visibleColumns(visibleColumns) {
        this._visibleColumns = visibleColumns;
    }
    /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
    get hierarchicalDataset() {
        return this._hierarchicalDataset;
    }
    /** Getter for the Hierarchical Tree Data dataset when the feature is enabled */
    set hierarchicalDataset(hierarchicalDataset) {
        this._hierarchicalDataset = hierarchicalDataset;
    }
}
//# sourceMappingURL=data:application/json;base64,