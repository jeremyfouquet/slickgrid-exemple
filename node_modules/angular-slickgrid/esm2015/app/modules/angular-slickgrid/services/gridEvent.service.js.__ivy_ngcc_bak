export class GridEventService {
    get eventHandler() {
        return this._eventHandler;
    }
    constructor() {
        this._eventHandler = new Slick.EventHandler();
    }
    dispose() {
        this._eventHandler.unsubscribeAll();
        this.handleOnCellChange = null;
        this.handleOnCellClick = null;
    }
    /* OnCellChange Event */
    bindOnCellChange(grid, dataView) {
        // subscribe to this Slickgrid event of onCellChange
        this._eventHandler.subscribe(grid.onCellChange, (e, args) => {
            this.handleOnCellChange.call(this, grid, dataView, e, args);
        });
    }
    /* OnClick Event */
    bindOnClick(grid, dataView) {
        this._eventHandler.subscribe(grid.onClick, (e, args) => {
            this.handleOnCellClick.call(this, grid, dataView, e, args);
        });
    }
    //
    // private functions
    // ------------------
    /* OnCellChange Event Handler */
    handleOnCellChange(grid, dataView, e, args) {
        if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
            return;
        }
        const column = grid.getColumns()[args.cell];
        // if the column definition has a onCellChange property (a callback function), then run it
        if (typeof column.onCellChange === 'function') {
            // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange
            const returnedArgs = {
                row: args.row,
                cell: args.cell,
                dataView,
                grid,
                columnDef: column,
                dataContext: grid.getDataItem(args.row)
            };
            // finally call up the Slick.column.onCellChanges.... function
            column.onCellChange(e, returnedArgs);
        }
    }
    /* OnCellClick Event Handler */
    handleOnCellClick(grid, dataView, e, args) {
        if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
            return;
        }
        const column = grid && grid.getColumns && grid.getColumns()[args.cell];
        const gridOptions = grid && grid.getOptions && grid.getOptions() || {};
        // only when using autoCommitEdit, we will make the cell active (in focus) when clicked
        // setting the cell as active as a side effect and if autoCommitEdit is set to false then the Editors won't save correctly
        if (gridOptions.enableCellNavigation && (!gridOptions.editable || (gridOptions.editable && gridOptions.autoCommitEdit))) {
            grid.setActiveCell(args.row, args.cell);
        }
        // if the column definition has a onCellClick property (a callback function), then run it
        if (typeof column.onCellClick === 'function') {
            // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick
            const returnedArgs = {
                row: args.row,
                cell: args.cell,
                dataView,
                grid,
                columnDef: column,
                dataContext: grid.getDataItem(args.row)
            };
            // finally call up the Slick.column.onCellClick.... function
            column.onCellClick(e, returnedArgs);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,