export function exportWithFormatterWhenDefined(row, col, dataContext, columnDef, grid, exportOptions) {
    let output = '';
    let isEvaluatingFormatter = false;
    // first check if there are any export options provided (as Grid Options)
    if (exportOptions && exportOptions.hasOwnProperty('exportWithFormatter')) {
        isEvaluatingFormatter = !!exportOptions.exportWithFormatter;
    }
    // second check if "exportWithFormatter" is provided in the column definition, if so it will have precendence over the Grid Options exportOptions
    if (columnDef && columnDef.hasOwnProperty('exportWithFormatter')) {
        isEvaluatingFormatter = !!columnDef.exportWithFormatter;
    }
    // did the user provide a Custom Formatter for the export
    const exportCustomFormatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;
    // does the field have the dot (.) notation and is a complex object? if so pull the first property name
    const fieldId = columnDef.field || columnDef.id || '';
    let fieldProperty = fieldId;
    if (typeof columnDef.field === 'string' && columnDef.field.indexOf('.') > 0) {
        const props = columnDef.field.split('.');
        fieldProperty = (props.length > 0) ? props[0] : columnDef.field;
    }
    const cellValue = dataContext.hasOwnProperty(fieldProperty) ? dataContext[fieldProperty] : null;
    if (dataContext && exportCustomFormatter !== undefined) {
        const formattedData = exportCustomFormatter(row, col, cellValue, columnDef, dataContext, grid);
        output = formattedData;
        if (formattedData && typeof formattedData === 'object' && formattedData.hasOwnProperty('text')) {
            output = formattedData.text;
        }
        if (output === null || output === undefined) {
            output = '';
        }
    }
    else if (isEvaluatingFormatter && columnDef.formatter) {
        const formattedData = columnDef.formatter(row, col, cellValue, columnDef, dataContext, grid);
        output = formattedData;
        if (formattedData && typeof formattedData === 'object' && formattedData.hasOwnProperty('text')) {
            output = formattedData.text;
        }
        if (output === null || output === undefined) {
            output = '';
        }
    }
    else {
        output = (!dataContext.hasOwnProperty(fieldProperty)) ? '' : cellValue;
        if (output === null || output === undefined) {
            output = '';
        }
    }
    return output;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LXV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc2VydmljZXMvZXhwb3J0LXV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsOEJBQThCLENBQUMsR0FBVyxFQUFFLEdBQVcsRUFBRSxXQUFnQixFQUFFLFNBQWlCLEVBQUUsSUFBUyxFQUFFLGFBQWdEO0lBQ3ZLLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLHFCQUFxQixHQUFHLEtBQUssQ0FBQztJQUVsQyx5RUFBeUU7SUFDekUsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1FBQ3hFLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7S0FDN0Q7SUFFRCxpSkFBaUo7SUFDakosSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1FBQ2hFLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7S0FDekQ7SUFFRCx5REFBeUQ7SUFDekQsTUFBTSxxQkFBcUIsR0FBMEIsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRW5KLHVHQUF1RztJQUN2RyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3RELElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQztJQUM1QixJQUFJLE9BQU8sU0FBUyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzNFLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUNqRTtJQUVELE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRWhHLElBQUksV0FBVyxJQUFJLHFCQUFxQixLQUFLLFNBQVMsRUFBRTtRQUN0RCxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9GLE1BQU0sR0FBRyxhQUF1QixDQUFDO1FBQ2pDLElBQUksYUFBYSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzlGLE1BQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO0tBQ0Y7U0FBTSxJQUFJLHFCQUFxQixJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUU7UUFDdkQsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdGLE1BQU0sR0FBRyxhQUF1QixDQUFDO1FBQ2pDLElBQUksYUFBYSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzlGLE1BQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN2RSxJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUMzQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEV4cG9ydE9wdGlvbiwgRXhjZWxFeHBvcnRPcHRpb24sIEZvcm1hdHRlciB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0V2l0aEZvcm1hdHRlcldoZW5EZWZpbmVkKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgZGF0YUNvbnRleHQ6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGdyaWQ6IGFueSwgZXhwb3J0T3B0aW9ucz86IEV4cG9ydE9wdGlvbiB8IEV4Y2VsRXhwb3J0T3B0aW9uKSB7XHJcbiAgbGV0IG91dHB1dCA9ICcnO1xyXG4gIGxldCBpc0V2YWx1YXRpbmdGb3JtYXR0ZXIgPSBmYWxzZTtcclxuXHJcbiAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBleHBvcnQgb3B0aW9ucyBwcm92aWRlZCAoYXMgR3JpZCBPcHRpb25zKVxyXG4gIGlmIChleHBvcnRPcHRpb25zICYmIGV4cG9ydE9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2V4cG9ydFdpdGhGb3JtYXR0ZXInKSkge1xyXG4gICAgaXNFdmFsdWF0aW5nRm9ybWF0dGVyID0gISFleHBvcnRPcHRpb25zLmV4cG9ydFdpdGhGb3JtYXR0ZXI7XHJcbiAgfVxyXG5cclxuICAvLyBzZWNvbmQgY2hlY2sgaWYgXCJleHBvcnRXaXRoRm9ybWF0dGVyXCIgaXMgcHJvdmlkZWQgaW4gdGhlIGNvbHVtbiBkZWZpbml0aW9uLCBpZiBzbyBpdCB3aWxsIGhhdmUgcHJlY2VuZGVuY2Ugb3ZlciB0aGUgR3JpZCBPcHRpb25zIGV4cG9ydE9wdGlvbnNcclxuICBpZiAoY29sdW1uRGVmICYmIGNvbHVtbkRlZi5oYXNPd25Qcm9wZXJ0eSgnZXhwb3J0V2l0aEZvcm1hdHRlcicpKSB7XHJcbiAgICBpc0V2YWx1YXRpbmdGb3JtYXR0ZXIgPSAhIWNvbHVtbkRlZi5leHBvcnRXaXRoRm9ybWF0dGVyO1xyXG4gIH1cclxuXHJcbiAgLy8gZGlkIHRoZSB1c2VyIHByb3ZpZGUgYSBDdXN0b20gRm9ybWF0dGVyIGZvciB0aGUgZXhwb3J0XHJcbiAgY29uc3QgZXhwb3J0Q3VzdG9tRm9ybWF0dGVyOiBGb3JtYXR0ZXIgfCB1bmRlZmluZWQgPSAoY29sdW1uRGVmLmV4cG9ydEN1c3RvbUZvcm1hdHRlciAhPT0gdW5kZWZpbmVkKSA/IGNvbHVtbkRlZi5leHBvcnRDdXN0b21Gb3JtYXR0ZXIgOiB1bmRlZmluZWQ7XHJcblxyXG4gIC8vIGRvZXMgdGhlIGZpZWxkIGhhdmUgdGhlIGRvdCAoLikgbm90YXRpb24gYW5kIGlzIGEgY29tcGxleCBvYmplY3Q/IGlmIHNvIHB1bGwgdGhlIGZpcnN0IHByb3BlcnR5IG5hbWVcclxuICBjb25zdCBmaWVsZElkID0gY29sdW1uRGVmLmZpZWxkIHx8IGNvbHVtbkRlZi5pZCB8fCAnJztcclxuICBsZXQgZmllbGRQcm9wZXJ0eSA9IGZpZWxkSWQ7XHJcbiAgaWYgKHR5cGVvZiBjb2x1bW5EZWYuZmllbGQgPT09ICdzdHJpbmcnICYmIGNvbHVtbkRlZi5maWVsZC5pbmRleE9mKCcuJykgPiAwKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IGNvbHVtbkRlZi5maWVsZC5zcGxpdCgnLicpO1xyXG4gICAgZmllbGRQcm9wZXJ0eSA9IChwcm9wcy5sZW5ndGggPiAwKSA/IHByb3BzWzBdIDogY29sdW1uRGVmLmZpZWxkO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY2VsbFZhbHVlID0gZGF0YUNvbnRleHQuaGFzT3duUHJvcGVydHkoZmllbGRQcm9wZXJ0eSkgPyBkYXRhQ29udGV4dFtmaWVsZFByb3BlcnR5XSA6IG51bGw7XHJcblxyXG4gIGlmIChkYXRhQ29udGV4dCAmJiBleHBvcnRDdXN0b21Gb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0YSA9IGV4cG9ydEN1c3RvbUZvcm1hdHRlcihyb3csIGNvbCwgY2VsbFZhbHVlLCBjb2x1bW5EZWYsIGRhdGFDb250ZXh0LCBncmlkKTtcclxuICAgIG91dHB1dCA9IGZvcm1hdHRlZERhdGEgYXMgc3RyaW5nO1xyXG4gICAgaWYgKGZvcm1hdHRlZERhdGEgJiYgdHlwZW9mIGZvcm1hdHRlZERhdGEgPT09ICdvYmplY3QnICYmIGZvcm1hdHRlZERhdGEuaGFzT3duUHJvcGVydHkoJ3RleHQnKSkge1xyXG4gICAgICBvdXRwdXQgPSBmb3JtYXR0ZWREYXRhLnRleHQ7XHJcbiAgICB9XHJcbiAgICBpZiAob3V0cHV0ID09PSBudWxsIHx8IG91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG91dHB1dCA9ICcnO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaXNFdmFsdWF0aW5nRm9ybWF0dGVyICYmIGNvbHVtbkRlZi5mb3JtYXR0ZXIpIHtcclxuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBjb2x1bW5EZWYuZm9ybWF0dGVyKHJvdywgY29sLCBjZWxsVmFsdWUsIGNvbHVtbkRlZiwgZGF0YUNvbnRleHQsIGdyaWQpO1xyXG4gICAgb3V0cHV0ID0gZm9ybWF0dGVkRGF0YSBhcyBzdHJpbmc7XHJcbiAgICBpZiAoZm9ybWF0dGVkRGF0YSAmJiB0eXBlb2YgZm9ybWF0dGVkRGF0YSA9PT0gJ29iamVjdCcgJiYgZm9ybWF0dGVkRGF0YS5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpKSB7XHJcbiAgICAgIG91dHB1dCA9IGZvcm1hdHRlZERhdGEudGV4dDtcclxuICAgIH1cclxuICAgIGlmIChvdXRwdXQgPT09IG51bGwgfHwgb3V0cHV0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3V0cHV0ID0gJyc7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG91dHB1dCA9ICghZGF0YUNvbnRleHQuaGFzT3duUHJvcGVydHkoZmllbGRQcm9wZXJ0eSkpID8gJycgOiBjZWxsVmFsdWU7XHJcbiAgICBpZiAob3V0cHV0ID09PSBudWxsIHx8IG91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG91dHB1dCA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG4iXX0=