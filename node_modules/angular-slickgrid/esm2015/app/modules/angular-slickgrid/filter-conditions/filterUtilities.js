/**
 * Compare 2 objects,
 * we will loop through all properties of the object to compare the entire content of both objects
 * Optionally we can compare by a property key, when that is provided we will compare the object content
 * @param o1
 * @param o2
 * @param compareKey optional
 * @return boolean are objects equals?
 */
export function compareObjects(o1, o2, compareKey) {
    // if user provided an object compare key then compare directly both objects by that key
    if (compareKey && ((o1 && o1.hasOwnProperty(compareKey)) || (o2 && o2.hasOwnProperty(compareKey)))) {
        return o1[compareKey] === o2 || o1 === o2[compareKey] || o1[compareKey] === o2[compareKey];
    }
    // loop through all object properties to compare the full content of the object
    // we'll return false as soon as a difference is detected
    for (const p in o1) {
        if (o1.hasOwnProperty(p)) {
            if (o1[p] !== o2[p]) {
                return false;
            }
        }
    }
    return true;
}
export const testFilterCondition = (operator, value1, value2) => {
    switch (operator) {
        case '<':
        case 'LT': return (value1 < value2);
        case '<=':
        case 'LE': return (value1 <= value2);
        case '>':
        case 'GT': return (value1 > value2);
        case '>=':
        case 'GE': return (value1 >= value2);
        case '!=':
        case '<>':
        case 'NE': return (value1 !== value2);
        case '=':
        case '==':
        case 'EQ': return (value1 === value2);
        case 'IN': return ((value2 && value2.indexOf) ? (value2.indexOf(value1) > -1) : false);
        case 'NIN':
        case 'NOT_IN':
            return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);
        case 'IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);
            }
            return false;
        case 'NIN_CONTAINS':
        case 'NOT_IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);
            }
            return false;
    }
    return true;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9maWx0ZXJVdGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQU8sRUFBRSxFQUFPLEVBQUUsVUFBbUI7SUFDbEUsd0ZBQXdGO0lBQ3hGLElBQUksVUFBVSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2xHLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDNUY7SUFFRCwrRUFBK0U7SUFDL0UseURBQXlEO0lBQ3pELEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2xCLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4QixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxRQUF3QixFQUFFLE1BQVcsRUFBRSxNQUFXLEVBQVcsRUFBRTtJQUNqRyxRQUFRLFFBQVEsRUFBRTtRQUNoQixLQUFLLEdBQUcsQ0FBQztRQUNULEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNwQyxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQztRQUNyQyxLQUFLLEdBQUcsQ0FBQztRQUNULEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNwQyxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDdEMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkYsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLFFBQVE7WUFDWCxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RSxLQUFLLGFBQWE7WUFDaEIsSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUN2RCxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixLQUFLLGNBQWMsQ0FBQztRQUNwQixLQUFLLGlCQUFpQjtZQUNwQixJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0RTtZQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVyYXRvclN0cmluZyB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcblxyXG4vKipcclxuICogQ29tcGFyZSAyIG9iamVjdHMsXHJcbiAqIHdlIHdpbGwgbG9vcCB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgdG8gY29tcGFyZSB0aGUgZW50aXJlIGNvbnRlbnQgb2YgYm90aCBvYmplY3RzXHJcbiAqIE9wdGlvbmFsbHkgd2UgY2FuIGNvbXBhcmUgYnkgYSBwcm9wZXJ0eSBrZXksIHdoZW4gdGhhdCBpcyBwcm92aWRlZCB3ZSB3aWxsIGNvbXBhcmUgdGhlIG9iamVjdCBjb250ZW50XHJcbiAqIEBwYXJhbSBvMVxyXG4gKiBAcGFyYW0gbzJcclxuICogQHBhcmFtIGNvbXBhcmVLZXkgb3B0aW9uYWxcclxuICogQHJldHVybiBib29sZWFuIGFyZSBvYmplY3RzIGVxdWFscz9cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlT2JqZWN0cyhvMTogYW55LCBvMjogYW55LCBjb21wYXJlS2V5Pzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgLy8gaWYgdXNlciBwcm92aWRlZCBhbiBvYmplY3QgY29tcGFyZSBrZXkgdGhlbiBjb21wYXJlIGRpcmVjdGx5IGJvdGggb2JqZWN0cyBieSB0aGF0IGtleVxyXG4gIGlmIChjb21wYXJlS2V5ICYmICgobzEgJiYgbzEuaGFzT3duUHJvcGVydHkoY29tcGFyZUtleSkpIHx8IChvMiAmJiBvMi5oYXNPd25Qcm9wZXJ0eShjb21wYXJlS2V5KSkpKSB7XHJcbiAgICByZXR1cm4gbzFbY29tcGFyZUtleV0gPT09IG8yIHx8IG8xID09PSBvMltjb21wYXJlS2V5XSB8fCBvMVtjb21wYXJlS2V5XSA9PT0gbzJbY29tcGFyZUtleV07XHJcbiAgfVxyXG5cclxuICAvLyBsb29wIHRocm91Z2ggYWxsIG9iamVjdCBwcm9wZXJ0aWVzIHRvIGNvbXBhcmUgdGhlIGZ1bGwgY29udGVudCBvZiB0aGUgb2JqZWN0XHJcbiAgLy8gd2UnbGwgcmV0dXJuIGZhbHNlIGFzIHNvb24gYXMgYSBkaWZmZXJlbmNlIGlzIGRldGVjdGVkXHJcbiAgZm9yIChjb25zdCBwIGluIG8xKSB7XHJcbiAgICBpZiAobzEuaGFzT3duUHJvcGVydHkocCkpIHtcclxuICAgICAgaWYgKG8xW3BdICE9PSBvMltwXSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRlc3RGaWx0ZXJDb25kaXRpb24gPSAob3BlcmF0b3I6IE9wZXJhdG9yU3RyaW5nLCB2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnkpOiBib29sZWFuID0+IHtcclxuICBzd2l0Y2ggKG9wZXJhdG9yKSB7XHJcbiAgICBjYXNlICc8JzpcclxuICAgIGNhc2UgJ0xUJzogcmV0dXJuICh2YWx1ZTEgPCB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnPD0nOlxyXG4gICAgY2FzZSAnTEUnOiByZXR1cm4gKHZhbHVlMSA8PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnPic6XHJcbiAgICBjYXNlICdHVCc6IHJldHVybiAodmFsdWUxID4gdmFsdWUyKTtcclxuICAgIGNhc2UgJz49JzpcclxuICAgIGNhc2UgJ0dFJzogcmV0dXJuICh2YWx1ZTEgPj0gdmFsdWUyKTtcclxuICAgIGNhc2UgJyE9JzpcclxuICAgIGNhc2UgJzw+JzpcclxuICAgIGNhc2UgJ05FJzogcmV0dXJuICh2YWx1ZTEgIT09IHZhbHVlMik7XHJcbiAgICBjYXNlICc9JzpcclxuICAgIGNhc2UgJz09JzpcclxuICAgIGNhc2UgJ0VRJzogcmV0dXJuICh2YWx1ZTEgPT09IHZhbHVlMik7XHJcbiAgICBjYXNlICdJTic6IHJldHVybiAoKHZhbHVlMiAmJiB2YWx1ZTIuaW5kZXhPZikgPyAodmFsdWUyLmluZGV4T2YodmFsdWUxKSA+IC0xKSA6IGZhbHNlKTtcclxuICAgIGNhc2UgJ05JTic6XHJcbiAgICBjYXNlICdOT1RfSU4nOlxyXG4gICAgICByZXR1cm4gKCh2YWx1ZTIgJiYgdmFsdWUyLmluY2x1ZGVzKSA/ICghdmFsdWUyLmluY2x1ZGVzKHZhbHVlMSkpIDogZmFsc2UpO1xyXG4gICAgY2FzZSAnSU5fQ09OVEFJTlMnOlxyXG4gICAgICBpZiAodmFsdWUyICYmIEFycmF5LmlzQXJyYXkodmFsdWUyKSAmJiB2YWx1ZTIuZmluZEluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuICgodmFsdWUyLmZpbmRJbmRleCgodmFsKSA9PiB2YWx1ZTEuaW5kZXhPZih2YWwpID4gLTEpKSA+IC0xKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBjYXNlICdOSU5fQ09OVEFJTlMnOlxyXG4gICAgY2FzZSAnTk9UX0lOX0NPTlRBSU5TJzpcclxuICAgICAgaWYgKHZhbHVlMiAmJiBBcnJheS5pc0FycmF5KHZhbHVlMikgJiYgdmFsdWUyLmZpbmRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiAhKCh2YWx1ZTIuZmluZEluZGV4KCh2YWwpID0+IHZhbHVlMS5pbmRleE9mKHZhbCkgPiAtMSkpID4gLTEpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcbiJdfQ==