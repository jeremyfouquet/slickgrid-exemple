import { Constants } from '../constants';
export function textValidator(inputValue, options) {
    const errorMsg = options.errorMessage;
    const isRequired = options.required;
    const minLength = options.minLength;
    const maxLength = options.maxLength;
    const operatorConditionalType = options.operatorConditionalType || 'inclusive';
    const mapValidation = {
        '{{minLength}}': minLength,
        '{{maxLength}}': maxLength
    };
    let isValid = true;
    let outputMsg = '';
    const inputValueLength = inputValue && inputValue.length || 0;
    if (options.validator) {
        return options.validator(inputValue, options.editorArgs);
    }
    // by default the editor is almost always valid (except when it's required but not provided)
    if (isRequired && inputValue === '') {
        isValid = false;
        outputMsg = errorMsg || Constants.VALIDATION_REQUIRED_FIELD;
    }
    else if (minLength !== undefined && maxLength !== undefined && ((operatorConditionalType === 'exclusive' && (inputValueLength <= minLength || inputValueLength >= maxLength)) || (operatorConditionalType === 'inclusive' && (inputValueLength < minLength || inputValueLength > maxLength)))) {
        // MIN & MAX Length provided
        // make sure text length is between minLength and maxLength
        isValid = false;
        outputMsg = errorMsg || Constants.VALIDATION_EDITOR_TEXT_LENGTH_BETWEEN.replace(/{{minLength}}|{{maxLength}}/gi, (matched) => mapValidation[matched]);
    }
    else if (minLength !== undefined && inputValueLength !== null && ((operatorConditionalType === 'exclusive' && inputValueLength <= minLength) || (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength < minLength))) {
        // MIN Length ONLY
        // when text length is shorter than minLength
        isValid = false;
        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH_INCLUSIVE : Constants.VALIDATION_EDITOR_TEXT_MIN_LENGTH;
        outputMsg = errorMsg || defaultErrorMsg.replace(/{{minLength}}/gi, (matched) => mapValidation[matched]);
    }
    else if (maxLength !== undefined && inputValueLength !== null && ((operatorConditionalType === 'exclusive' && inputValueLength >= maxLength) || (operatorConditionalType === 'inclusive' && inputValueLength !== null && inputValueLength > maxLength))) {
        // MAX Length ONLY
        // when text length is longer than minLength
        isValid = false;
        const defaultErrorMsg = operatorConditionalType === 'inclusive' ? Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH_INCLUSIVE : Constants.VALIDATION_EDITOR_TEXT_MAX_LENGTH;
        outputMsg = errorMsg || defaultErrorMsg.replace(/{{maxLength}}/gi, (matched) => mapValidation[matched]);
    }
    return { valid: isValid, msg: outputMsg };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dFZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZWRpdG9yVmFsaWRhdG9ycy90ZXh0VmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFjekMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxVQUFlLEVBQUUsT0FBNkI7SUFDMUUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUN0QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDcEMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNwQyxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsSUFBSSxXQUFXLENBQUM7SUFDL0UsTUFBTSxhQUFhLEdBQUc7UUFDcEIsZUFBZSxFQUFFLFNBQVM7UUFDMUIsZUFBZSxFQUFFLFNBQVM7S0FDM0IsQ0FBQztJQUNGLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDbkIsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFFOUQsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1FBQ3JCLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsNEZBQTRGO0lBQzVGLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxFQUFFLEVBQUU7UUFDbkMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixTQUFTLEdBQUcsUUFBUSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQztLQUM3RDtTQUFNLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLENBQUMsQ0FBQyx1QkFBdUIsS0FBSyxXQUFXLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixLQUFLLFdBQVcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsSUFBSSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDL1IsNEJBQTRCO1FBQzVCLDJEQUEyRDtRQUMzRCxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLFNBQVMsR0FBRyxRQUFRLElBQUksU0FBUyxDQUFDLHFDQUFxQyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDdko7U0FBTSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksZ0JBQWdCLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyx1QkFBdUIsS0FBSyxXQUFXLElBQUksZ0JBQWdCLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsS0FBSyxXQUFXLElBQUksZ0JBQWdCLEtBQUssSUFBSSxJQUFJLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxDQUFDLEVBQUU7UUFDelAsa0JBQWtCO1FBQ2xCLDZDQUE2QztRQUM3QyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLE1BQU0sZUFBZSxHQUFHLHVCQUF1QixLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQUM7UUFDdEssU0FBUyxHQUFHLFFBQVEsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUN6RztTQUFNLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLHVCQUF1QixLQUFLLFdBQVcsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLHVCQUF1QixLQUFLLFdBQVcsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLElBQUksZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLENBQUMsRUFBRTtRQUN6UCxrQkFBa0I7UUFDbEIsNENBQTRDO1FBQzVDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsTUFBTSxlQUFlLEdBQUcsdUJBQXVCLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQztRQUN0SyxTQUFTLEdBQUcsUUFBUSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3pHO0lBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBFZGl0b3JWYWxpZGF0b3JPdXRwdXQgfSBmcm9tICcuLi9tb2RlbHMvZWRpdG9yVmFsaWRhdG9yT3V0cHV0LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEVkaXRvclZhbGlkYXRvciB9IGZyb20gJy4uL21vZGVscy9lZGl0b3JWYWxpZGF0b3IuaW50ZXJmYWNlJztcclxuXHJcbmludGVyZmFjZSBUZXh0VmFsaWRhdG9yT3B0aW9ucyB7XHJcbiAgZWRpdG9yQXJnczogYW55O1xyXG4gIGVycm9yTWVzc2FnZT86IHN0cmluZztcclxuICBtaW5MZW5ndGg/OiBudW1iZXI7XHJcbiAgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG4gIG9wZXJhdG9yQ29uZGl0aW9uYWxUeXBlPzogJ2luY2x1c2l2ZScgfCAnZXhjbHVzaXZlJztcclxuICByZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgdmFsaWRhdG9yPzogRWRpdG9yVmFsaWRhdG9yO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGV4dFZhbGlkYXRvcihpbnB1dFZhbHVlOiBhbnksIG9wdGlvbnM6IFRleHRWYWxpZGF0b3JPcHRpb25zKTogRWRpdG9yVmFsaWRhdG9yT3V0cHV0IHtcclxuICBjb25zdCBlcnJvck1zZyA9IG9wdGlvbnMuZXJyb3JNZXNzYWdlO1xyXG4gIGNvbnN0IGlzUmVxdWlyZWQgPSBvcHRpb25zLnJlcXVpcmVkO1xyXG4gIGNvbnN0IG1pbkxlbmd0aCA9IG9wdGlvbnMubWluTGVuZ3RoO1xyXG4gIGNvbnN0IG1heExlbmd0aCA9IG9wdGlvbnMubWF4TGVuZ3RoO1xyXG4gIGNvbnN0IG9wZXJhdG9yQ29uZGl0aW9uYWxUeXBlID0gb3B0aW9ucy5vcGVyYXRvckNvbmRpdGlvbmFsVHlwZSB8fCAnaW5jbHVzaXZlJztcclxuICBjb25zdCBtYXBWYWxpZGF0aW9uID0ge1xyXG4gICAgJ3t7bWluTGVuZ3RofX0nOiBtaW5MZW5ndGgsXHJcbiAgICAne3ttYXhMZW5ndGh9fSc6IG1heExlbmd0aFxyXG4gIH07XHJcbiAgbGV0IGlzVmFsaWQgPSB0cnVlO1xyXG4gIGxldCBvdXRwdXRNc2cgPSAnJztcclxuICBjb25zdCBpbnB1dFZhbHVlTGVuZ3RoID0gaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLmxlbmd0aCB8fCAwO1xyXG5cclxuICBpZiAob3B0aW9ucy52YWxpZGF0b3IpIHtcclxuICAgIHJldHVybiBvcHRpb25zLnZhbGlkYXRvcihpbnB1dFZhbHVlLCBvcHRpb25zLmVkaXRvckFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgLy8gYnkgZGVmYXVsdCB0aGUgZWRpdG9yIGlzIGFsbW9zdCBhbHdheXMgdmFsaWQgKGV4Y2VwdCB3aGVuIGl0J3MgcmVxdWlyZWQgYnV0IG5vdCBwcm92aWRlZClcclxuICBpZiAoaXNSZXF1aXJlZCAmJiBpbnB1dFZhbHVlID09PSAnJykge1xyXG4gICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgb3V0cHV0TXNnID0gZXJyb3JNc2cgfHwgQ29uc3RhbnRzLlZBTElEQVRJT05fUkVRVUlSRURfRklFTEQ7XHJcbiAgfSBlbHNlIGlmIChtaW5MZW5ndGggIT09IHVuZGVmaW5lZCAmJiBtYXhMZW5ndGggIT09IHVuZGVmaW5lZCAmJiAoKG9wZXJhdG9yQ29uZGl0aW9uYWxUeXBlID09PSAnZXhjbHVzaXZlJyAmJiAoaW5wdXRWYWx1ZUxlbmd0aCA8PSBtaW5MZW5ndGggfHwgaW5wdXRWYWx1ZUxlbmd0aCA+PSBtYXhMZW5ndGgpKSB8fCAob3BlcmF0b3JDb25kaXRpb25hbFR5cGUgPT09ICdpbmNsdXNpdmUnICYmIChpbnB1dFZhbHVlTGVuZ3RoIDwgbWluTGVuZ3RoIHx8IGlucHV0VmFsdWVMZW5ndGggPiBtYXhMZW5ndGgpKSkpIHtcclxuICAgIC8vIE1JTiAmIE1BWCBMZW5ndGggcHJvdmlkZWRcclxuICAgIC8vIG1ha2Ugc3VyZSB0ZXh0IGxlbmd0aCBpcyBiZXR3ZWVuIG1pbkxlbmd0aCBhbmQgbWF4TGVuZ3RoXHJcbiAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICBvdXRwdXRNc2cgPSBlcnJvck1zZyB8fCBDb25zdGFudHMuVkFMSURBVElPTl9FRElUT1JfVEVYVF9MRU5HVEhfQkVUV0VFTi5yZXBsYWNlKC97e21pbkxlbmd0aH19fHt7bWF4TGVuZ3RofX0vZ2ksIChtYXRjaGVkKSA9PiBtYXBWYWxpZGF0aW9uW21hdGNoZWRdKTtcclxuICB9IGVsc2UgaWYgKG1pbkxlbmd0aCAhPT0gdW5kZWZpbmVkICYmIGlucHV0VmFsdWVMZW5ndGggIT09IG51bGwgJiYgKChvcGVyYXRvckNvbmRpdGlvbmFsVHlwZSA9PT0gJ2V4Y2x1c2l2ZScgJiYgaW5wdXRWYWx1ZUxlbmd0aCA8PSBtaW5MZW5ndGgpIHx8IChvcGVyYXRvckNvbmRpdGlvbmFsVHlwZSA9PT0gJ2luY2x1c2l2ZScgJiYgaW5wdXRWYWx1ZUxlbmd0aCAhPT0gbnVsbCAmJiBpbnB1dFZhbHVlTGVuZ3RoIDwgbWluTGVuZ3RoKSkpIHtcclxuICAgIC8vIE1JTiBMZW5ndGggT05MWVxyXG4gICAgLy8gd2hlbiB0ZXh0IGxlbmd0aCBpcyBzaG9ydGVyIHRoYW4gbWluTGVuZ3RoXHJcbiAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICBjb25zdCBkZWZhdWx0RXJyb3JNc2cgPSBvcGVyYXRvckNvbmRpdGlvbmFsVHlwZSA9PT0gJ2luY2x1c2l2ZScgPyBDb25zdGFudHMuVkFMSURBVElPTl9FRElUT1JfVEVYVF9NSU5fTEVOR1RIX0lOQ0xVU0lWRSA6IENvbnN0YW50cy5WQUxJREFUSU9OX0VESVRPUl9URVhUX01JTl9MRU5HVEg7XHJcbiAgICBvdXRwdXRNc2cgPSBlcnJvck1zZyB8fCBkZWZhdWx0RXJyb3JNc2cucmVwbGFjZSgve3ttaW5MZW5ndGh9fS9naSwgKG1hdGNoZWQpID0+IG1hcFZhbGlkYXRpb25bbWF0Y2hlZF0pO1xyXG4gIH0gZWxzZSBpZiAobWF4TGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgaW5wdXRWYWx1ZUxlbmd0aCAhPT0gbnVsbCAmJiAoKG9wZXJhdG9yQ29uZGl0aW9uYWxUeXBlID09PSAnZXhjbHVzaXZlJyAmJiBpbnB1dFZhbHVlTGVuZ3RoID49IG1heExlbmd0aCkgfHwgKG9wZXJhdG9yQ29uZGl0aW9uYWxUeXBlID09PSAnaW5jbHVzaXZlJyAmJiBpbnB1dFZhbHVlTGVuZ3RoICE9PSBudWxsICYmIGlucHV0VmFsdWVMZW5ndGggPiBtYXhMZW5ndGgpKSkge1xyXG4gICAgLy8gTUFYIExlbmd0aCBPTkxZXHJcbiAgICAvLyB3aGVuIHRleHQgbGVuZ3RoIGlzIGxvbmdlciB0aGFuIG1pbkxlbmd0aFxyXG4gICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgY29uc3QgZGVmYXVsdEVycm9yTXNnID0gb3BlcmF0b3JDb25kaXRpb25hbFR5cGUgPT09ICdpbmNsdXNpdmUnID8gQ29uc3RhbnRzLlZBTElEQVRJT05fRURJVE9SX1RFWFRfTUFYX0xFTkdUSF9JTkNMVVNJVkUgOiBDb25zdGFudHMuVkFMSURBVElPTl9FRElUT1JfVEVYVF9NQVhfTEVOR1RIO1xyXG4gICAgb3V0cHV0TXNnID0gZXJyb3JNc2cgfHwgZGVmYXVsdEVycm9yTXNnLnJlcGxhY2UoL3t7bWF4TGVuZ3RofX0vZ2ksIChtYXRjaGVkKSA9PiBtYXBWYWxpZGF0aW9uW21hdGNoZWRdKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHZhbGlkOiBpc1ZhbGlkLCBtc2c6IG91dHB1dE1zZyB9O1xyXG59XHJcbiJdfQ==