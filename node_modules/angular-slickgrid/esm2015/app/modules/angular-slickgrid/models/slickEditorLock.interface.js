//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpY2tFZGl0b3JMb2NrLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvbW9kZWxzL3NsaWNrRWRpdG9yTG9jay5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvciB9IGZyb20gJy4vZWRpdG9yLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogQSBsb2NraW5nIGhlbHBlciB0byB0cmFjayB0aGUgYWN0aXZlIGVkaXQgY29udHJvbGxlciBhbmQgZW5zdXJlIHRoYXQgb25seSBhIHNpbmdsZSBjb250cm9sbGVyXHJcbiAqIGNhbiBiZSBhY3RpdmUgYXQgYSB0aW1lLiAgVGhpcyBwcmV2ZW50cyBhIHdob2xlIGNsYXNzIG9mIHN0YXRlIGFuZCB2YWxpZGF0aW9uIHN5bmNocm9uaXphdGlvblxyXG4gKiBpc3N1ZXMuICBBbiBlZGl0IGNvbnRyb2xsZXIgKHN1Y2ggYXMgU2xpY2tHcmlkKSBjYW4gcXVlcnkgaWYgYW4gYWN0aXZlIGVkaXQgaXMgaW4gcHJvZ3Jlc3NcclxuICogYW5kIGF0dGVtcHQgYSBjb21taXQgb3IgY2FuY2VsIGJlZm9yZSBwcm9jZWVkaW5nLlxyXG4gKiBAY2xhc3MgRWRpdG9yTG9ja1xyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2xpY2tFZGl0b3JMb2NrIHtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgc3BlY2lmaWVkIGVkaXQgY29udHJvbGxlciBpcyBhY3RpdmUgKGhhcyB0aGUgZWRpdCBsb2NrKS5cclxuICAgKiBJZiB0aGUgcGFyYW1ldGVyIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgdHJ1ZSBpZiBhbnkgZWRpdCBjb250cm9sbGVyIGlzIGFjdGl2ZS5cclxuICAgKiBAbWV0aG9kIGlzQWN0aXZlXHJcbiAgICogQHBhcmFtIGVkaXRDb250cm9sbGVyIHtFZGl0Q29udHJvbGxlcn1cclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIGlzQWN0aXZlKGVkaXRDb250cm9sbGVyPzogRWRpdG9yKTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgc3BlY2lmaWVkIGVkaXQgY29udHJvbGxlciBhcyB0aGUgYWN0aXZlIGVkaXQgY29udHJvbGxlciAoYWNxdWlyZSBlZGl0IGxvY2spLlxyXG4gICAqIElmIGFub3RoZXIgZWRpdCBjb250cm9sbGVyIGlzIGFscmVhZHkgYWN0aXZlLCBhbmQgZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxyXG4gICAqIEBtZXRob2QgYWN0aXZhdGVcclxuICAgKiBAcGFyYW0gZWRpdENvbnRyb2xsZXIge0VkaXRDb250cm9sbGVyfSBlZGl0IGNvbnRyb2xsZXIgYWNxdWlyaW5nIHRoZSBsb2NrXHJcbiAgICovXHJcbiAgYWN0aXZhdGUoZWRpdENvbnRyb2xsZXI6IEVkaXRvcik6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVuc2V0cyB0aGUgc3BlY2lmaWVkIGVkaXQgY29udHJvbGxlciBhcyB0aGUgYWN0aXZlIGVkaXQgY29udHJvbGxlciAocmVsZWFzZSBlZGl0IGxvY2spLlxyXG4gICAqIElmIHRoZSBzcGVjaWZpZWQgZWRpdCBjb250cm9sbGVyIGlzIG5vdCB0aGUgYWN0aXZlIG9uZSwgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxyXG4gICAqIEBtZXRob2QgZGVhY3RpdmF0ZVxyXG4gICAqIEBwYXJhbSBlZGl0Q29udHJvbGxlciB7RWRpdENvbnRyb2xsZXJ9IGVkaXQgY29udHJvbGxlciByZWxlYXNpbmcgdGhlIGxvY2tcclxuICAgKi9cclxuICBkZWFjdGl2YXRlKGVkaXRDb250cm9sbGVyOiBFZGl0b3IpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBBdHRlbXB0cyB0byBjb21taXQgdGhlIGN1cnJlbnQgZWRpdCBieSBjYWxsaW5nIFwiY29tbWl0Q3VycmVudEVkaXRcIiBtZXRob2Qgb24gdGhlIGFjdGl2ZSBlZGl0XHJcbiAgICogY29udHJvbGxlciBhbmQgcmV0dXJucyB3aGV0aGVyIHRoZSBjb21taXQgYXR0ZW1wdCB3YXMgc3VjY2Vzc2Z1bCAoY29tbWl0IG1heSBmYWlsIGR1ZSB0byB2YWxpZGF0aW9uXHJcbiAgICogZXJyb3JzLCBldGMuKS4gIEVkaXQgY29udHJvbGxlcidzIFwiY29tbWl0Q3VycmVudEVkaXRcIiBtdXN0IHJldHVybiB0cnVlIGlmIHRoZSBjb21taXQgaGFzIHN1Y2NlZWRlZFxyXG4gICAqIGFuZCBmYWxzZSBvdGhlcndpc2UuICBJZiBubyBlZGl0IGNvbnRyb2xsZXIgaXMgYWN0aXZlLCByZXR1cm5zIHRydWUuXHJcbiAgICogQG1ldGhvZCBjb21taXRDdXJyZW50RWRpdFxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgY29tbWl0Q3VycmVudEVkaXQoKTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQXR0ZW1wdHMgdG8gY2FuY2VsIHRoZSBjdXJyZW50IGVkaXQgYnkgY2FsbGluZyBcImNhbmNlbEN1cnJlbnRFZGl0XCIgbWV0aG9kIG9uIHRoZSBhY3RpdmUgZWRpdFxyXG4gICAqIGNvbnRyb2xsZXIgYW5kIHJldHVybnMgd2hldGhlciB0aGUgZWRpdCB3YXMgc3VjY2Vzc2Z1bGx5IGNhbmNlbGxlZC4gIElmIG5vIGVkaXQgY29udHJvbGxlciBpc1xyXG4gICAqIGFjdGl2ZSwgcmV0dXJucyB0cnVlLlxyXG4gICAqIEBtZXRob2QgY2FuY2VsQ3VycmVudEVkaXRcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIGNhbmNlbEN1cnJlbnRFZGl0KCk6IGJvb2xlYW47XHJcbn1cclxuIl19