import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import { FieldType } from '../models/index';
import * as moment_ from 'moment-mini';
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
export function compareDates(value1, value2, sortDirection, sortColumn, format, strict) {
    let diff = 0;
    const checkForUndefinedValues = sortColumn && sortColumn.valueCouldBeUndefined || false;
    if (value1 === null || value1 === '' || (checkForUndefinedValues && value1 === undefined) || !moment(value1, format, strict).isValid()) {
        diff = -1;
    }
    else if (value2 === null || value2 === '' || (checkForUndefinedValues && value2 === undefined) || !moment(value2, format, strict).isValid()) {
        diff = 1;
    }
    else {
        const date1 = moment(value1, format, strict);
        const date2 = moment(value2, format, strict);
        diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);
    }
    return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));
}
/** From a FieldType, return the associated date Sorter */
export function getAssociatedDateSorter(fieldType) {
    const FORMAT = (fieldType === FieldType.date) ? moment.ISO_8601 : mapMomentDateFormatWithFieldType(fieldType);
    return (value1, value2, sortDirection, sortColumn) => {
        if (FORMAT === moment.ISO_8601) {
            return compareDates(value1, value2, sortDirection, sortColumn, FORMAT, false);
        }
        return compareDates(value1, value2, sortDirection, sortColumn, FORMAT, true);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc29ydGVycy9kYXRlVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBVSxTQUFTLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1RCxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUksTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsVUFBa0IsRUFBRSxNQUE0QyxFQUFFLE1BQWdCO0lBQzlKLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLE1BQU0sdUJBQXVCLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUM7SUFFeEYsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN0SSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDWDtTQUFNLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLElBQUksTUFBTSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0ksSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNWO1NBQU07UUFDTCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDMUU7SUFFRCxPQUFPLGFBQWEsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsMERBQTBEO0FBQzFELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxTQUFvQjtJQUMxRCxNQUFNLE1BQU0sR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlHLE9BQU8sQ0FBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsVUFBa0IsRUFBRSxFQUFFO1FBQzdFLElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMvRTtRQUNELE9BQU8sWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0UsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuaW1wb3J0IHsgQ29sdW1uLCBGaWVsZFR5cGUsIFNvcnRlciB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50LW1pbmknO1xyXG5jb25zdCBtb21lbnQgPSBtb21lbnRfOyAvLyBwYXRjaCB0byBmaXggcm9sbHVwIFwibW9tZW50IGhhcyBubyBkZWZhdWx0IGV4cG9ydFwiIGlzc3VlLCBkb2N1bWVudCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy82NzBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlRGF0ZXModmFsdWUxOiBhbnksIHZhbHVlMjogYW55LCBzb3J0RGlyZWN0aW9uOiBudW1iZXIsIHNvcnRDb2x1bW46IENvbHVtbiwgZm9ybWF0OiBzdHJpbmcgfCBtb21lbnRfLk1vbWVudEJ1aWx0aW5Gb3JtYXQsIHN0cmljdD86IGJvb2xlYW4pIHtcclxuICBsZXQgZGlmZiA9IDA7XHJcbiAgY29uc3QgY2hlY2tGb3JVbmRlZmluZWRWYWx1ZXMgPSBzb3J0Q29sdW1uICYmIHNvcnRDb2x1bW4udmFsdWVDb3VsZEJlVW5kZWZpbmVkIHx8IGZhbHNlO1xyXG5cclxuICBpZiAodmFsdWUxID09PSBudWxsIHx8IHZhbHVlMSA9PT0gJycgfHwgKGNoZWNrRm9yVW5kZWZpbmVkVmFsdWVzICYmIHZhbHVlMSA9PT0gdW5kZWZpbmVkKSB8fCAhbW9tZW50KHZhbHVlMSwgZm9ybWF0LCBzdHJpY3QpLmlzVmFsaWQoKSkge1xyXG4gICAgZGlmZiA9IC0xO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUyID09PSBudWxsIHx8IHZhbHVlMiA9PT0gJycgfHwgKGNoZWNrRm9yVW5kZWZpbmVkVmFsdWVzICYmIHZhbHVlMiA9PT0gdW5kZWZpbmVkKSB8fCAhbW9tZW50KHZhbHVlMiwgZm9ybWF0LCBzdHJpY3QpLmlzVmFsaWQoKSkge1xyXG4gICAgZGlmZiA9IDE7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGRhdGUxID0gbW9tZW50KHZhbHVlMSwgZm9ybWF0LCBzdHJpY3QpO1xyXG4gICAgY29uc3QgZGF0ZTIgPSBtb21lbnQodmFsdWUyLCBmb3JtYXQsIHN0cmljdCk7XHJcbiAgICBkaWZmID0gcGFyc2VJbnQoZGF0ZTEuZm9ybWF0KCdYJyksIDEwKSAtIHBhcnNlSW50KGRhdGUyLmZvcm1hdCgnWCcpLCAxMCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc29ydERpcmVjdGlvbiAqIChkaWZmID09PSAwID8gMCA6IChkaWZmID4gMCA/IDEgOiAtMSkpO1xyXG59XHJcblxyXG4vKiogRnJvbSBhIEZpZWxkVHlwZSwgcmV0dXJuIHRoZSBhc3NvY2lhdGVkIGRhdGUgU29ydGVyICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3NvY2lhdGVkRGF0ZVNvcnRlcihmaWVsZFR5cGU6IEZpZWxkVHlwZSk6IFNvcnRlciB7XHJcbiAgY29uc3QgRk9STUFUID0gKGZpZWxkVHlwZSA9PT0gRmllbGRUeXBlLmRhdGUpID8gbW9tZW50LklTT184NjAxIDogbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoZmllbGRUeXBlKTtcclxuXHJcbiAgcmV0dXJuICh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHNvcnREaXJlY3Rpb246IG51bWJlciwgc29ydENvbHVtbjogQ29sdW1uKSA9PiB7XHJcbiAgICBpZiAoRk9STUFUID09PSBtb21lbnQuSVNPXzg2MDEpIHtcclxuICAgICAgcmV0dXJuIGNvbXBhcmVEYXRlcyh2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbiwgc29ydENvbHVtbiwgRk9STUFULCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tcGFyZURhdGVzKHZhbHVlMSwgdmFsdWUyLCBzb3J0RGlyZWN0aW9uLCBzb3J0Q29sdW1uLCBGT1JNQVQsIHRydWUpO1xyXG4gIH07XHJcbn1cclxuIl19