import * as DOMPurify_ from 'dompurify';
const DOMPurify = DOMPurify_; // patch to fix rollup to work
/**
 * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).
 * The structure will be "<a href="hyperlink">hyperlink</a>"
 *
 * You can optionally change the hyperlink text displayed by using the generic params "hyperlinkText" in the column definition
 * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display "<a href="link">Company Website</a>"
 *
 * You can also optionally provide the hyperlink URL by using the generic params "hyperlinkUrl" in the column definition
 * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display "<a href="http://www.somewhere.com">Company Website</a>"
 */
export const hyperlinkFormatter = (row, cell, value, columnDef, dataContext) => {
    const columnParams = columnDef && columnDef.params || {};
    let displayedText = columnParams.hyperlinkText ? columnParams.hyperlinkText : value;
    displayedText = DOMPurify.sanitize(displayedText || '');
    let outputLink = columnParams.hyperlinkUrl ? columnParams.hyperlinkUrl : value;
    outputLink = DOMPurify.sanitize(outputLink || '');
    const matchUrl = outputLink.match(/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?/i);
    if (matchUrl && Array.isArray(matchUrl) && matchUrl.length > 0) {
        const finalUrl = matchUrl[0];
        return `<a href="${finalUrl}">${displayedText}</a>`;
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlwZXJsaW5rRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2h5cGVybGlua0Zvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssVUFBVSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyw4QkFBOEI7QUFLNUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQWMsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxTQUFpQixFQUFFLFdBQWdCLEVBQUUsRUFBRTtJQUMxSCxNQUFNLFlBQVksR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFFekQsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BGLGFBQWEsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV4RCxJQUFJLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDL0UsVUFBVSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRWxELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUdBQW1HLENBQUMsQ0FBQztJQUV2SSxJQUFJLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzlELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixPQUFPLFlBQVksUUFBUSxLQUFLLGFBQWEsTUFBTSxDQUFDO0tBQ3JEO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBET01QdXJpZnlfIGZyb20gJ2RvbXB1cmlmeSc7XHJcbmNvbnN0IERPTVB1cmlmeSA9IERPTVB1cmlmeV87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgdG8gd29ya1xyXG5cclxuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi8uLi9tb2RlbHMvY29sdW1uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2Zvcm1hdHRlci5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIFRha2VzIGFuIGh5cGVybGluayBjZWxsIHZhbHVlIGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYSByZWFsIGh5cGVybGluaywgZ2l2ZW4gdGhhdCB0aGUgdmFsdWUgc3RhcnRzIHdpdGggMSBvZiB0aGVzZSAoaHR0cHxmdHB8aHR0cHMpLlxyXG4gKiBUaGUgc3RydWN0dXJlIHdpbGwgYmUgXCI8YSBocmVmPVwiaHlwZXJsaW5rXCI+aHlwZXJsaW5rPC9hPlwiXHJcbiAqXHJcbiAqIFlvdSBjYW4gb3B0aW9uYWxseSBjaGFuZ2UgdGhlIGh5cGVybGluayB0ZXh0IGRpc3BsYXllZCBieSB1c2luZyB0aGUgZ2VuZXJpYyBwYXJhbXMgXCJoeXBlcmxpbmtUZXh0XCIgaW4gdGhlIGNvbHVtbiBkZWZpbml0aW9uXHJcbiAqIEZvciBleGFtcGxlOiB7IGlkOiAnbGluaycsIGZpZWxkOiAnbGluaycsIHBhcmFtczogeyBoeXBlcmxpbmtUZXh0OiAnQ29tcGFueSBXZWJzaXRlJyB9IH0gd2lsbCBkaXNwbGF5IFwiPGEgaHJlZj1cImxpbmtcIj5Db21wYW55IFdlYnNpdGU8L2E+XCJcclxuICpcclxuICogWW91IGNhbiBhbHNvIG9wdGlvbmFsbHkgcHJvdmlkZSB0aGUgaHlwZXJsaW5rIFVSTCBieSB1c2luZyB0aGUgZ2VuZXJpYyBwYXJhbXMgXCJoeXBlcmxpbmtVcmxcIiBpbiB0aGUgY29sdW1uIGRlZmluaXRpb25cclxuICogRm9yIGV4YW1wbGU6IHsgaWQ6ICdsaW5rJywgZmllbGQ6ICdsaW5rJywgcGFyYW1zOiB7ICBoeXBlcmxpbmtUZXh0OiAnQ29tcGFueSBXZWJzaXRlJywgaHlwZXJsaW5rVXJsOiAnaHR0cDovL3d3dy5zb21ld2hlcmUuY29tJyB9IH0gd2lsbCBkaXNwbGF5IFwiPGEgaHJlZj1cImh0dHA6Ly93d3cuc29tZXdoZXJlLmNvbVwiPkNvbXBhbnkgV2Vic2l0ZTwvYT5cIlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGh5cGVybGlua0Zvcm1hdHRlcjogRm9ybWF0dGVyID0gKHJvdzogbnVtYmVyLCBjZWxsOiBudW1iZXIsIHZhbHVlOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBkYXRhQ29udGV4dDogYW55KSA9PiB7XHJcbiAgY29uc3QgY29sdW1uUGFyYW1zID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi5wYXJhbXMgfHwge307XHJcblxyXG4gIGxldCBkaXNwbGF5ZWRUZXh0ID0gY29sdW1uUGFyYW1zLmh5cGVybGlua1RleHQgPyBjb2x1bW5QYXJhbXMuaHlwZXJsaW5rVGV4dCA6IHZhbHVlO1xyXG4gIGRpc3BsYXllZFRleHQgPSBET01QdXJpZnkuc2FuaXRpemUoZGlzcGxheWVkVGV4dCB8fCAnJyk7XHJcblxyXG4gIGxldCBvdXRwdXRMaW5rID0gY29sdW1uUGFyYW1zLmh5cGVybGlua1VybCA/IGNvbHVtblBhcmFtcy5oeXBlcmxpbmtVcmwgOiB2YWx1ZTtcclxuICBvdXRwdXRMaW5rID0gRE9NUHVyaWZ5LnNhbml0aXplKG91dHB1dExpbmsgfHwgJycpO1xyXG5cclxuICBjb25zdCBtYXRjaFVybCA9IG91dHB1dExpbmsubWF0Y2goL14oaHR0cHxmdHB8aHR0cHMpOlxcL1xcL1tcXHdcXC1fXSsoXFwuW1xcd1xcLV9dKykrKFtcXHdcXC1cXC4sQD9ePSUmYW1wOzpcXC9+XFwrI10qW1xcd1xcLVxcQD9ePSUmYW1wO1xcL35cXCsjXSk/L2kpO1xyXG5cclxuICBpZiAobWF0Y2hVcmwgJiYgQXJyYXkuaXNBcnJheShtYXRjaFVybCkgJiYgbWF0Y2hVcmwubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgZmluYWxVcmwgPSBtYXRjaFVybFswXTtcclxuICAgIHJldHVybiBgPGEgaHJlZj1cIiR7ZmluYWxVcmx9XCI+JHtkaXNwbGF5ZWRUZXh0fTwvYT5gO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59O1xyXG4iXX0=