import { FieldType } from '../models/index';
import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import * as moment_ from 'moment-mini';
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
/**
 * Find the option value from the following (in order of execution)
 * 1- Column Definition "params"
 * 2- Grid Options "formatterOptions"
 * 3- nothing found, return default value provided
 */
export function getValueFromParamsOrFormatterOptions(optionName, columnDef, grid, defaultValue) {
    const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
    const params = columnDef && columnDef.params;
    if (params && params.hasOwnProperty(optionName)) {
        return params[optionName];
    }
    else if (gridOptions.formatterOptions && gridOptions.formatterOptions.hasOwnProperty(optionName)) {
        return gridOptions.formatterOptions[optionName];
    }
    return defaultValue;
}
/** From a FieldType, return the associated date Formatter */
export function getAssociatedDateFormatter(fieldType, defaultSeparator) {
    const defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);
    return (_row, _cell, value, columnDef, _dataContext, grid) => {
        const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
        const customSeparator = gridOptions && gridOptions.formatterOptions && gridOptions.formatterOptions.dateSeparator || defaultSeparator;
        const inputType = columnDef && columnDef.type || FieldType.date;
        const inputDateFormat = mapMomentDateFormatWithFieldType(inputType);
        const isParsingAsUtc = columnDef && columnDef.params && columnDef.params.parseDateAsUtc || false;
        const isDateValid = moment(value, inputDateFormat, false).isValid();
        let outputDate = value;
        if (value && isDateValid) {
            outputDate = isParsingAsUtc ? moment.utc(value).format(defaultDateFormat) : moment(value).format(defaultDateFormat);
        }
        // user can customize the separator through the "formatterOptions"
        // if that is the case we need to replace the default "/" to the new separator
        if (outputDate && customSeparator !== defaultSeparator) {
            const regex = new RegExp(defaultSeparator, 'ig'); // find separator globally
            outputDate = outputDate.replace(regex, customSeparator);
        }
        return outputDate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2Zvcm1hdHRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUF5QixNQUFNLGlCQUFpQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLHNIQUFzSDtBQUU5STs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxvQ0FBb0MsQ0FBQyxVQUFrQixFQUFFLFNBQWlCLEVBQUUsSUFBUyxFQUFFLFlBQWtCO0lBQ3ZILE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBZSxDQUFDO0lBQzdHLE1BQU0sTUFBTSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDO0lBRTdDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDL0MsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0I7U0FBTSxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ2xHLE9BQU8sV0FBVyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUVELDZEQUE2RDtBQUM3RCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsU0FBb0IsRUFBRSxnQkFBd0I7SUFDdkYsTUFBTSxpQkFBaUIsR0FBRyxnQ0FBZ0MsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0RSxPQUFPLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxLQUFVLEVBQUUsU0FBaUIsRUFBRSxZQUFpQixFQUFFLElBQVMsRUFBRSxFQUFFO1FBQ2xHLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBZSxDQUFDO1FBQzdHLE1BQU0sZUFBZSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsSUFBSSxnQkFBZ0IsQ0FBQztRQUN0SSxNQUFNLFNBQVMsR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQ2hFLE1BQU0sZUFBZSxHQUFHLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sY0FBYyxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLEtBQUssQ0FBQztRQUVqRyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwRSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxLQUFLLElBQUksV0FBVyxFQUFFO1lBQ3hCLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNySDtRQUVELGtFQUFrRTtRQUNsRSw4RUFBOEU7UUFDOUUsSUFBSSxVQUFVLElBQUksZUFBZSxLQUFLLGdCQUFnQixFQUFFO1lBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBQzVFLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztTQUN6RDtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZpZWxkVHlwZSwgRm9ybWF0dGVyLCBHcmlkT3B0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudC1taW5pJztcclxuY29uc3QgbW9tZW50ID0gbW9tZW50XzsgLy8gcGF0Y2ggdG8gZml4IHJvbGx1cCBcIm1vbWVudCBoYXMgbm8gZGVmYXVsdCBleHBvcnRcIiBpc3N1ZSwgZG9jdW1lbnQgaGVyZSBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvNjcwXHJcblxyXG4vKipcclxuICogRmluZCB0aGUgb3B0aW9uIHZhbHVlIGZyb20gdGhlIGZvbGxvd2luZyAoaW4gb3JkZXIgb2YgZXhlY3V0aW9uKVxyXG4gKiAxLSBDb2x1bW4gRGVmaW5pdGlvbiBcInBhcmFtc1wiXHJcbiAqIDItIEdyaWQgT3B0aW9ucyBcImZvcm1hdHRlck9wdGlvbnNcIlxyXG4gKiAzLSBub3RoaW5nIGZvdW5kLCByZXR1cm4gZGVmYXVsdCB2YWx1ZSBwcm92aWRlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucyhvcHRpb25OYW1lOiBzdHJpbmcsIGNvbHVtbkRlZjogQ29sdW1uLCBncmlkOiBhbnksIGRlZmF1bHRWYWx1ZT86IGFueSkge1xyXG4gIGNvbnN0IGdyaWRPcHRpb25zID0gKChncmlkICYmIHR5cGVvZiBncmlkLmdldE9wdGlvbnMgPT09ICdmdW5jdGlvbicpID8gZ3JpZC5nZXRPcHRpb25zKCkgOiB7fSkgYXMgR3JpZE9wdGlvbjtcclxuICBjb25zdCBwYXJhbXMgPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLnBhcmFtcztcclxuXHJcbiAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuaGFzT3duUHJvcGVydHkob3B0aW9uTmFtZSkpIHtcclxuICAgIHJldHVybiBwYXJhbXNbb3B0aW9uTmFtZV07XHJcbiAgfSBlbHNlIGlmIChncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zICYmIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uTmFtZSkpIHtcclxuICAgIHJldHVybiBncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zW29wdGlvbk5hbWVdO1xyXG4gIH1cclxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG59XHJcblxyXG4vKiogRnJvbSBhIEZpZWxkVHlwZSwgcmV0dXJuIHRoZSBhc3NvY2lhdGVkIGRhdGUgRm9ybWF0dGVyICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3NvY2lhdGVkRGF0ZUZvcm1hdHRlcihmaWVsZFR5cGU6IEZpZWxkVHlwZSwgZGVmYXVsdFNlcGFyYXRvcjogc3RyaW5nKTogRm9ybWF0dGVyIHtcclxuICBjb25zdCBkZWZhdWx0RGF0ZUZvcm1hdCA9IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKGZpZWxkVHlwZSk7XHJcblxyXG4gIHJldHVybiAoX3JvdzogbnVtYmVyLCBfY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgX2RhdGFDb250ZXh0OiBhbnksIGdyaWQ6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgZ3JpZE9wdGlvbnMgPSAoKGdyaWQgJiYgdHlwZW9mIGdyaWQuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgPyBncmlkLmdldE9wdGlvbnMoKSA6IHt9KSBhcyBHcmlkT3B0aW9uO1xyXG4gICAgY29uc3QgY3VzdG9tU2VwYXJhdG9yID0gZ3JpZE9wdGlvbnMgJiYgZ3JpZE9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucyAmJiBncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zLmRhdGVTZXBhcmF0b3IgfHwgZGVmYXVsdFNlcGFyYXRvcjtcclxuICAgIGNvbnN0IGlucHV0VHlwZSA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYudHlwZSB8fCBGaWVsZFR5cGUuZGF0ZTtcclxuICAgIGNvbnN0IGlucHV0RGF0ZUZvcm1hdCA9IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKGlucHV0VHlwZSk7XHJcbiAgICBjb25zdCBpc1BhcnNpbmdBc1V0YyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zICYmIGNvbHVtbkRlZi5wYXJhbXMucGFyc2VEYXRlQXNVdGMgfHwgZmFsc2U7XHJcblxyXG4gICAgY29uc3QgaXNEYXRlVmFsaWQgPSBtb21lbnQodmFsdWUsIGlucHV0RGF0ZUZvcm1hdCwgZmFsc2UpLmlzVmFsaWQoKTtcclxuICAgIGxldCBvdXRwdXREYXRlID0gdmFsdWU7XHJcbiAgICBpZiAodmFsdWUgJiYgaXNEYXRlVmFsaWQpIHtcclxuICAgICAgb3V0cHV0RGF0ZSA9IGlzUGFyc2luZ0FzVXRjID8gbW9tZW50LnV0Yyh2YWx1ZSkuZm9ybWF0KGRlZmF1bHREYXRlRm9ybWF0KSA6IG1vbWVudCh2YWx1ZSkuZm9ybWF0KGRlZmF1bHREYXRlRm9ybWF0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB1c2VyIGNhbiBjdXN0b21pemUgdGhlIHNlcGFyYXRvciB0aHJvdWdoIHRoZSBcImZvcm1hdHRlck9wdGlvbnNcIlxyXG4gICAgLy8gaWYgdGhhdCBpcyB0aGUgY2FzZSB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHQgXCIvXCIgdG8gdGhlIG5ldyBzZXBhcmF0b3JcclxuICAgIGlmIChvdXRwdXREYXRlICYmIGN1c3RvbVNlcGFyYXRvciAhPT0gZGVmYXVsdFNlcGFyYXRvcikge1xyXG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoZGVmYXVsdFNlcGFyYXRvciwgJ2lnJyk7IC8vIGZpbmQgc2VwYXJhdG9yIGdsb2JhbGx5XHJcbiAgICAgIG91dHB1dERhdGUgPSBvdXRwdXREYXRlLnJlcGxhY2UocmVnZXgsIGN1c3RvbVNlcGFyYXRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dERhdGU7XHJcbiAgfTtcclxufVxyXG4iXX0=