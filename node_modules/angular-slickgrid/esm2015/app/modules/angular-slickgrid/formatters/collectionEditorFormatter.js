import { arrayToCsvFormatter } from './arrayToCsvFormatter';
import { findOrDefault } from '../services/utilities';
/**
 * A formatter to show the label property value of an editor collection
 */
export const collectionEditorFormatter = (row, cell, value, columnDef, dataContext, grid) => {
    if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection
        || !columnDef.internalColumnEditor.collection.length) {
        return value;
    }
    const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;
    const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';
    const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';
    if (Array.isArray(value)) {
        if (collection.every(x => typeof x === 'string')) {
            return arrayToCsvFormatter(row, cell, value.map((v) => findOrDefault(collection, (c) => c === v)), columnDef, dataContext, grid);
        }
        else {
            return arrayToCsvFormatter(row, cell, value.map((v) => findOrDefault(collection, (c) => c[valueName] === v)[labelName]), columnDef, dataContext, grid);
        }
    }
    return findOrDefault(collection, (c) => c[valueName] === value)[labelName] || '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbkVkaXRvckZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9jb2xsZWN0aW9uRWRpdG9yRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFjLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxLQUFVLEVBQUUsU0FBaUIsRUFBRSxXQUFnQixFQUFFLElBQVMsRUFBRSxFQUFFO0lBQzVJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsVUFBVTtXQUNwRyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1FBQ3RELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUNqRixNQUFNLFNBQVMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDaEgsTUFBTSxTQUFTLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBRWhILElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUNoRCxPQUFPLG1CQUFtQixDQUFDLEdBQUcsRUFDNUIsSUFBSSxFQUNKLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNyRSxTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksQ0FBQyxDQUFDO1NBQ1Q7YUFBTTtZQUNMLE9BQU8sbUJBQW1CLENBQUMsR0FBRyxFQUM1QixJQUFJLEVBQ0osS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQzNGLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxDQUFDLENBQUM7U0FDVDtLQUNGO0lBRUQsT0FBTyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5VG9Dc3ZGb3JtYXR0ZXIgfSBmcm9tICcuL2FycmF5VG9Dc3ZGb3JtYXR0ZXInO1xyXG5pbXBvcnQgeyBDb2x1bW4sIEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgZmluZE9yRGVmYXVsdCB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcblxyXG4vKipcclxuICogQSBmb3JtYXR0ZXIgdG8gc2hvdyB0aGUgbGFiZWwgcHJvcGVydHkgdmFsdWUgb2YgYW4gZWRpdG9yIGNvbGxlY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBjb2xsZWN0aW9uRWRpdG9yRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSAocm93OiBudW1iZXIsIGNlbGw6IG51bWJlciwgdmFsdWU6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGRhdGFDb250ZXh0OiBhbnksIGdyaWQ6IGFueSkgPT4ge1xyXG4gIGlmICghdmFsdWUgfHwgIWNvbHVtbkRlZiB8fCAhY29sdW1uRGVmLmludGVybmFsQ29sdW1uRWRpdG9yIHx8ICFjb2x1bW5EZWYuaW50ZXJuYWxDb2x1bW5FZGl0b3IuY29sbGVjdGlvblxyXG4gICAgfHwgIWNvbHVtbkRlZi5pbnRlcm5hbENvbHVtbkVkaXRvci5jb2xsZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgeyBpbnRlcm5hbENvbHVtbkVkaXRvciwgaW50ZXJuYWxDb2x1bW5FZGl0b3I6IHsgY29sbGVjdGlvbiB9IH0gPSBjb2x1bW5EZWY7XHJcbiAgY29uc3QgbGFiZWxOYW1lID0gKGludGVybmFsQ29sdW1uRWRpdG9yLmN1c3RvbVN0cnVjdHVyZSkgPyBpbnRlcm5hbENvbHVtbkVkaXRvci5jdXN0b21TdHJ1Y3R1cmUubGFiZWwgOiAnbGFiZWwnO1xyXG4gIGNvbnN0IHZhbHVlTmFtZSA9IChpbnRlcm5hbENvbHVtbkVkaXRvci5jdXN0b21TdHJ1Y3R1cmUpID8gaW50ZXJuYWxDb2x1bW5FZGl0b3IuY3VzdG9tU3RydWN0dXJlLnZhbHVlIDogJ3ZhbHVlJztcclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICBpZiAoY29sbGVjdGlvbi5ldmVyeSh4ID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJykpIHtcclxuICAgICAgcmV0dXJuIGFycmF5VG9Dc3ZGb3JtYXR0ZXIocm93LFxyXG4gICAgICAgIGNlbGwsXHJcbiAgICAgICAgdmFsdWUubWFwKCh2OiBhbnkpID0+IGZpbmRPckRlZmF1bHQoY29sbGVjdGlvbiwgKGM6IGFueSkgPT4gYyA9PT0gdikpLFxyXG4gICAgICAgIGNvbHVtbkRlZixcclxuICAgICAgICBkYXRhQ29udGV4dCxcclxuICAgICAgICBncmlkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBhcnJheVRvQ3N2Rm9ybWF0dGVyKHJvdyxcclxuICAgICAgICBjZWxsLFxyXG4gICAgICAgIHZhbHVlLm1hcCgodjogYW55KSA9PiBmaW5kT3JEZWZhdWx0KGNvbGxlY3Rpb24sIChjOiBhbnkpID0+IGNbdmFsdWVOYW1lXSA9PT0gdilbbGFiZWxOYW1lXSksXHJcbiAgICAgICAgY29sdW1uRGVmLFxyXG4gICAgICAgIGRhdGFDb250ZXh0LFxyXG4gICAgICAgIGdyaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZpbmRPckRlZmF1bHQoY29sbGVjdGlvbiwgKGM6IGFueSkgPT4gY1t2YWx1ZU5hbWVdID09PSB2YWx1ZSlbbGFiZWxOYW1lXSB8fCAnJztcclxufTtcclxuIl19