import { getDescendantProperty, htmlEncode } from '../services/utilities';
export const treeFormatter = (row, cell, value, columnDef, dataContext, grid) => {
    const dataView = grid && grid.getData();
    const gridOptions = grid && grid.getOptions();
    const treeDataOptions = gridOptions && gridOptions.treeDataOptions;
    const treeLevelPropName = treeDataOptions && treeDataOptions.levelPropName || '__treeLevel';
    const indentMarginLeft = treeDataOptions && treeDataOptions.indentMarginLeft || 15;
    let outputValue = value;
    if (typeof columnDef.queryFieldNameGetterFn === 'function') {
        const fieldName = columnDef.queryFieldNameGetterFn(dataContext);
        if (fieldName && fieldName.indexOf('.') >= 0) {
            outputValue = getDescendantProperty(dataContext, fieldName);
        }
        else {
            outputValue = dataContext.hasOwnProperty(fieldName) ? dataContext[fieldName] : value;
        }
    }
    if (outputValue === null || outputValue === undefined || dataContext === undefined) {
        return '';
    }
    if (!dataContext.hasOwnProperty(treeLevelPropName)) {
        throw new Error('You must provide valid "treeDataOptions" in your Grid Options and it seems that there are no tree level found in this row');
    }
    if (dataView && dataView.getIdxById && dataView.getItemByIdx) {
        if (typeof outputValue === 'string') {
            outputValue = htmlEncode(outputValue);
        }
        const identifierPropName = dataView.getIdPropertyName() || 'id';
        const spacer = `<span style="display:inline-block; width:${indentMarginLeft * dataContext[treeLevelPropName]}px;"></span>`;
        const idx = dataView.getIdxById(dataContext[identifierPropName]);
        const nextItemRow = dataView.getItemByIdx(idx + 1);
        if (nextItemRow && nextItemRow[treeLevelPropName] > dataContext[treeLevelPropName]) {
            if (dataContext.__collapsed) {
                return `${spacer}<span class="slick-group-toggle collapsed"></span>&nbsp;${outputValue}`;
            }
            else {
                return `${spacer}<span class="slick-group-toggle expanded"></span>&nbsp;${outputValue}`;
            }
        }
        return `${spacer}<span class="slick-group-toggle"></span>&nbsp;${outputValue}`;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZUZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy90cmVlRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQWMsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxTQUFpQixFQUFFLFdBQWdCLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDaEksTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QyxNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBZ0IsQ0FBQztJQUM1RCxNQUFNLGVBQWUsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQztJQUNuRSxNQUFNLGlCQUFpQixHQUFHLGVBQWUsSUFBSSxlQUFlLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQztJQUM1RixNQUFNLGdCQUFnQixHQUFHLGVBQWUsSUFBSSxlQUFlLENBQUMsZ0JBQWdCLElBQUksRUFBRSxDQUFDO0lBQ25GLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztJQUV4QixJQUFJLE9BQU8sU0FBUyxDQUFDLHNCQUFzQixLQUFLLFVBQVUsRUFBRTtRQUMxRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM3RDthQUFNO1lBQ0wsV0FBVyxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQ3RGO0tBQ0Y7SUFDRCxJQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQ2xGLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsMkhBQTJILENBQUMsQ0FBQztLQUM5STtJQUVELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRTtRQUM1RCxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRTtZQUNuQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsTUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDaEUsTUFBTSxNQUFNLEdBQUcsNENBQTRDLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7UUFDM0gsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRW5ELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQ2xGLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRTtnQkFDM0IsT0FBTyxHQUFHLE1BQU0sMkRBQTJELFdBQVcsRUFBRSxDQUFDO2FBQzFGO2lCQUFNO2dCQUNMLE9BQU8sR0FBRyxNQUFNLDBEQUEwRCxXQUFXLEVBQUUsQ0FBQzthQUN6RjtTQUNGO1FBQ0QsT0FBTyxHQUFHLE1BQU0saURBQWlELFdBQVcsRUFBRSxDQUFDO0tBQ2hGO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZvcm1hdHRlciwgR3JpZE9wdGlvbiB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgZ2V0RGVzY2VuZGFudFByb3BlcnR5LCBodG1sRW5jb2RlIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCB0cmVlRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSAocm93OiBudW1iZXIsIGNlbGw6IG51bWJlciwgdmFsdWU6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGRhdGFDb250ZXh0OiBhbnksIGdyaWQ6IGFueSkgPT4ge1xyXG4gIGNvbnN0IGRhdGFWaWV3ID0gZ3JpZCAmJiBncmlkLmdldERhdGEoKTtcclxuICBjb25zdCBncmlkT3B0aW9ucyA9IGdyaWQgJiYgZ3JpZC5nZXRPcHRpb25zKCkgYXMgR3JpZE9wdGlvbjtcclxuICBjb25zdCB0cmVlRGF0YU9wdGlvbnMgPSBncmlkT3B0aW9ucyAmJiBncmlkT3B0aW9ucy50cmVlRGF0YU9wdGlvbnM7XHJcbiAgY29uc3QgdHJlZUxldmVsUHJvcE5hbWUgPSB0cmVlRGF0YU9wdGlvbnMgJiYgdHJlZURhdGFPcHRpb25zLmxldmVsUHJvcE5hbWUgfHwgJ19fdHJlZUxldmVsJztcclxuICBjb25zdCBpbmRlbnRNYXJnaW5MZWZ0ID0gdHJlZURhdGFPcHRpb25zICYmIHRyZWVEYXRhT3B0aW9ucy5pbmRlbnRNYXJnaW5MZWZ0IHx8IDE1O1xyXG4gIGxldCBvdXRwdXRWYWx1ZSA9IHZhbHVlO1xyXG5cclxuICBpZiAodHlwZW9mIGNvbHVtbkRlZi5xdWVyeUZpZWxkTmFtZUdldHRlckZuID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBjb2x1bW5EZWYucXVlcnlGaWVsZE5hbWVHZXR0ZXJGbihkYXRhQ29udGV4dCk7XHJcbiAgICBpZiAoZmllbGROYW1lICYmIGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPj0gMCkge1xyXG4gICAgICBvdXRwdXRWYWx1ZSA9IGdldERlc2NlbmRhbnRQcm9wZXJ0eShkYXRhQ29udGV4dCwgZmllbGROYW1lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dHB1dFZhbHVlID0gZGF0YUNvbnRleHQuaGFzT3duUHJvcGVydHkoZmllbGROYW1lKSA/IGRhdGFDb250ZXh0W2ZpZWxkTmFtZV0gOiB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKG91dHB1dFZhbHVlID09PSBudWxsIHx8IG91dHB1dFZhbHVlID09PSB1bmRlZmluZWQgfHwgZGF0YUNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFkYXRhQ29udGV4dC5oYXNPd25Qcm9wZXJ0eSh0cmVlTGV2ZWxQcm9wTmFtZSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSB2YWxpZCBcInRyZWVEYXRhT3B0aW9uc1wiIGluIHlvdXIgR3JpZCBPcHRpb25zIGFuZCBpdCBzZWVtcyB0aGF0IHRoZXJlIGFyZSBubyB0cmVlIGxldmVsIGZvdW5kIGluIHRoaXMgcm93Jyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZGF0YVZpZXcgJiYgZGF0YVZpZXcuZ2V0SWR4QnlJZCAmJiBkYXRhVmlldy5nZXRJdGVtQnlJZHgpIHtcclxuICAgIGlmICh0eXBlb2Ygb3V0cHV0VmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIG91dHB1dFZhbHVlID0gaHRtbEVuY29kZShvdXRwdXRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpZGVudGlmaWVyUHJvcE5hbWUgPSBkYXRhVmlldy5nZXRJZFByb3BlcnR5TmFtZSgpIHx8ICdpZCc7XHJcbiAgICBjb25zdCBzcGFjZXIgPSBgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jazsgd2lkdGg6JHtpbmRlbnRNYXJnaW5MZWZ0ICogZGF0YUNvbnRleHRbdHJlZUxldmVsUHJvcE5hbWVdfXB4O1wiPjwvc3Bhbj5gO1xyXG4gICAgY29uc3QgaWR4ID0gZGF0YVZpZXcuZ2V0SWR4QnlJZChkYXRhQ29udGV4dFtpZGVudGlmaWVyUHJvcE5hbWVdKTtcclxuICAgIGNvbnN0IG5leHRJdGVtUm93ID0gZGF0YVZpZXcuZ2V0SXRlbUJ5SWR4KGlkeCArIDEpO1xyXG5cclxuICAgIGlmIChuZXh0SXRlbVJvdyAmJiBuZXh0SXRlbVJvd1t0cmVlTGV2ZWxQcm9wTmFtZV0gPiBkYXRhQ29udGV4dFt0cmVlTGV2ZWxQcm9wTmFtZV0pIHtcclxuICAgICAgaWYgKGRhdGFDb250ZXh0Ll9fY29sbGFwc2VkKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3NwYWNlcn08c3BhbiBjbGFzcz1cInNsaWNrLWdyb3VwLXRvZ2dsZSBjb2xsYXBzZWRcIj48L3NwYW4+Jm5ic3A7JHtvdXRwdXRWYWx1ZX1gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHtzcGFjZXJ9PHNwYW4gY2xhc3M9XCJzbGljay1ncm91cC10b2dnbGUgZXhwYW5kZWRcIj48L3NwYW4+Jm5ic3A7JHtvdXRwdXRWYWx1ZX1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7c3BhY2VyfTxzcGFuIGNsYXNzPVwic2xpY2stZ3JvdXAtdG9nZ2xlXCI+PC9zcGFuPiZuYnNwOyR7b3V0cHV0VmFsdWV9YDtcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59O1xyXG4iXX0=