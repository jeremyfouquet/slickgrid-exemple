import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { SlickgridConfig } from '../slickgrid-config';
import { TranslateService } from '@ngx-translate/core';
import { CollectionService } from '../services/collection.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
let FilterFactory = class FilterFactory {
    constructor(config, translate, collectionService) {
        this.config = config;
        this.translate = translate;
        this.collectionService = collectionService;
        this._options = this.config.options;
    }
    // Uses the User model to create a new User
    createFilter(columnFilter) {
        let filter;
        if (columnFilter && columnFilter.model) {
            filter = typeof columnFilter.model === 'function' ? new columnFilter.model(this.translate, this.collectionService) : columnFilter.model;
        }
        // fallback to the default filter
        if (!filter && this._options.defaultFilter) {
            filter = new this._options.defaultFilter(this.translate, this.collectionService);
        }
        return filter;
    }
};
FilterFactory.ɵfac = function FilterFactory_Factory(t) { return new (t || FilterFactory)(ɵngcc0.ɵɵinject(SlickgridConfig), ɵngcc0.ɵɵinject(ɵngcc1.TranslateService, 8), ɵngcc0.ɵɵinject(CollectionService)); };
FilterFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FilterFactory, factory: FilterFactory.ɵfac });
FilterFactory.ctorParameters = () => [
    { type: SlickgridConfig },
    { type: TranslateService, decorators: [{ type: Optional }] },
    { type: CollectionService }
];
FilterFactory = tslib_1.__decorate([ tslib_1.__param(1, Optional())
], FilterFactory);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterFactory, [{
        type: Injectable
    }], function () { return [{ type: SlickgridConfig }, { type: ɵngcc1.TranslateService, decorators: [{
                type: Optional
            }] }, { type: CollectionService }]; }, null); })();
export { FilterFactory };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyRmFjdG9yeS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItc2xpY2tncmlkL2FwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL2ZpbHRlcnMvZmlsdGVyRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7QUFHbkUsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtBQUMxQixJQUtFLFlBQW9CLE1BQXVCLEVBQXNCLFNBQTJCLEVBQVUsaUJBQW9DO0FBQzVJLFFBRHNCLFdBQU0sR0FBTixNQUFNLENBQWlCO0FBQUMsUUFBcUIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7QUFBQyxRQUFTLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7QUFBQyxRQUN6SSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQUUsQ0FBQztBQUNILElBQ0UsMkNBQTJDO0FBQzdDLElBQUUsWUFBWSxDQUFDLFlBQXNDO0FBQUksUUFDckQsSUFBSSxNQUEwQixDQUFDO0FBQ25DLFFBQ0ksSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtBQUM1QyxZQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztBQUM5SSxTQUFLO0FBQ0wsUUFDSSxpQ0FBaUM7QUFDckMsUUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFO0FBQ2hELFlBQU0sTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN2RixTQUFLO0FBQ0wsUUFDSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSCxDQUFDOzt1R0FBQTtBQUNEO0FBQXVDLFlBcEJULGVBQWU7QUFBSSxZQUE2QixnQkFBZ0IsdUJBQTlDLFFBQVE7QUFBTyxZQUE0RCxpQkFBaUI7QUFBRztBQU5sSSxhQUFhLDRCQUR6QixVQUFVLEVBQUUsakJBQ1QsQ0FNNEMsbUJBQUEsUUFBUSxFQUFFLENBQUE7QUFBQyxHQU45QyxhQUFhLENBeUJ6Qjs7Ozs7K0RBQ0Q7O0FBbENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFuQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU5BLEFBQUEsQUFEQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTkEsQUFBQSxBQXlCQSxBQXpCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBDb2x1bW5GaWx0ZXIgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBTbGlja2dyaWRDb25maWcgfSBmcm9tICcuLi9zbGlja2dyaWQtY29uZmlnJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbGxlY3Rpb24uc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJGYWN0b3J5IHtcclxuICAvKipcclxuICAgKiBUaGUgb3B0aW9ucyBmcm9tIHRoZSBTbGlja2dyaWRDb25maWdcclxuICAgKi9cclxuICBwcml2YXRlIF9vcHRpb25zOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBTbGlja2dyaWRDb25maWcsIEBPcHRpb25hbCgpIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBwcml2YXRlIGNvbGxlY3Rpb25TZXJ2aWNlOiBDb2xsZWN0aW9uU2VydmljZSkge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IHRoaXMuY29uZmlnLm9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvLyBVc2VzIHRoZSBVc2VyIG1vZGVsIHRvIGNyZWF0ZSBhIG5ldyBVc2VyXHJcbiAgY3JlYXRlRmlsdGVyKGNvbHVtbkZpbHRlcjogQ29sdW1uRmlsdGVyIHwgdW5kZWZpbmVkKTogRmlsdGVyIHwgdW5kZWZpbmVkIHtcclxuICAgIGxldCBmaWx0ZXI6IEZpbHRlciB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAoY29sdW1uRmlsdGVyICYmIGNvbHVtbkZpbHRlci5tb2RlbCkge1xyXG4gICAgICBmaWx0ZXIgPSB0eXBlb2YgY29sdW1uRmlsdGVyLm1vZGVsID09PSAnZnVuY3Rpb24nID8gbmV3IGNvbHVtbkZpbHRlci5tb2RlbCh0aGlzLnRyYW5zbGF0ZSwgdGhpcy5jb2xsZWN0aW9uU2VydmljZSkgOiBjb2x1bW5GaWx0ZXIubW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmFsbGJhY2sgdG8gdGhlIGRlZmF1bHQgZmlsdGVyXHJcbiAgICBpZiAoIWZpbHRlciAmJiB0aGlzLl9vcHRpb25zLmRlZmF1bHRGaWx0ZXIpIHtcclxuICAgICAgZmlsdGVyID0gbmV3IHRoaXMuX29wdGlvbnMuZGVmYXVsdEZpbHRlcih0aGlzLnRyYW5zbGF0ZSwgdGhpcy5jb2xsZWN0aW9uU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbHRlcjtcclxuICB9XHJcbn1cclxuIl19