import { TranslateService } from '@ngx-translate/core';
import * as moment_ from 'moment-mini';
import * as _flatpickr from 'flatpickr';
const flatpickr = _flatpickr; // patch for rollup
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
import { Constants } from './../constants';
import { destroyObjectDomElementProps, getDescendantProperty, mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType, setDeepValue } from './../services/utilities';
import { FieldType, } from './../models/index';
require('flatpickr');
/*
 * An example of a date picker editor using Flatpickr
 * https://chmln.github.io/flatpickr
 */
export class DateEditor {
    constructor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (args.grid && args.grid.getOptions() || {});
        const options = this.gridOptions || this.args.column.params || {};
        if (options && options.i18n instanceof TranslateService) {
            this._translate = options.i18n;
        }
        this.init();
    }
    /** Get Column Definition object */
    get columnDef() {
        return this.args && this.args.column;
    }
    /** Get Column Editor object */
    get columnEditor() {
        return this.columnDef && this.columnDef.internalColumnEditor || {};
    }
    /** Get the Editor DOM Element */
    get editorDomElement() {
        return this._$input;
    }
    /** Get Flatpickr options passed to the editor by the user */
    get editorOptions() {
        return this.columnEditor.editorOptions || {};
    }
    get hasAutoCommitEdit() {
        return this.grid.getOptions().autoCommitEdit;
    }
    get pickerOptions() {
        return this._pickerMergedOptions;
    }
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    get validator() {
        return this.columnEditor.validator || this.columnDef.validator;
    }
    init() {
        if (this.args && this.columnDef) {
            const columnId = this.columnDef && this.columnDef.id;
            const placeholder = this.columnEditor && this.columnEditor.placeholder || '';
            const title = this.columnEditor && this.columnEditor.title || '';
            this.defaultDate = (this.args.item) ? this.args.item[this.columnDef.field] : null;
            const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);
            const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnEditor.type || this.columnDef.type || FieldType.dateUtc);
            let currentLocale = this._translate && this._translate.currentLang || this.gridOptions.locale || 'en';
            if (currentLocale && currentLocale.length > 2) {
                currentLocale = currentLocale.substring(0, 2);
            }
            const pickerOptions = {
                defaultDate: this.defaultDate,
                altInput: true,
                altFormat: outputFormat,
                dateFormat: inputFormat,
                closeOnSelect: true,
                wrap: true,
                locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',
                onChange: () => this.save(),
                errorHandler: () => {
                    // do nothing, Flatpickr is a little too sensitive and will throw an error when provided date is lower than minDate so just disregard the error completely
                }
            };
            // merge options with optional user's custom options
            this._pickerMergedOptions = Object.assign({}, pickerOptions, this.editorOptions);
            const inputCssClasses = `.editor-text.editor-${columnId}.form-control`;
            if (this._pickerMergedOptions.altInput) {
                this._pickerMergedOptions.altInputClass = 'flatpickr-alt-input form-control';
            }
            this._$editorInputElm = $(`<div class="flatpickr input-group"></div>`);
            const closeButtonElm = $(`<span class="input-group-btn" data-clear>
          <button class="btn btn-default icon-close" type="button"></button>
        </span>`);
            this._$input = $(`<input type="text" data-input data-defaultDate="${this.defaultDate}" class="${inputCssClasses.replace(/\./g, ' ')}" placeholder="${placeholder}" title="${title}" />`);
            this._$input.appendTo(this._$editorInputElm);
            // show clear date button (unless user specifically doesn't want it)
            const isCloseButtonHidden = this.columnEditor && this.columnEditor.params && this.columnEditor.params.hideClearButton || false;
            if (!isCloseButtonHidden) {
                closeButtonElm.appendTo(this._$editorInputElm);
            }
            this._$editorInputElm.appendTo(this.args.container);
            this.flatInstance = (flatpickr && this._$editorInputElm[0] && typeof this._$editorInputElm[0].flatpickr === 'function') ? this._$editorInputElm[0].flatpickr(this._pickerMergedOptions) : flatpickr(this._$editorInputElm, this._pickerMergedOptions);
            // when we're using an alternate input to display data, we'll consider this input as the one to do the focus later on
            // else just use the top one
            this._$inputWithData = (this._pickerMergedOptions && this._pickerMergedOptions.altInput) ? $(`${inputCssClasses}.flatpickr-alt-input`) : this._$input;
            setTimeout(() => {
                this.show();
                this.focus();
            }, 50);
        }
    }
    destroy() {
        this.hide();
        if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {
            this.flatInstance.destroy();
            if (this.flatInstance.element) {
                setTimeout(() => destroyObjectDomElementProps(this.flatInstance));
            }
            this.flatInstance = null;
        }
        if (this._$editorInputElm) {
            this._$editorInputElm.remove();
            this._$editorInputElm = null;
        }
        if (this._$inputWithData) {
            this._$inputWithData.remove();
            this._$inputWithData = null;
        }
        this._$input.remove();
    }
    focus() {
        this._$input.focus();
        if (this._$inputWithData && typeof this._$inputWithData.focus === 'function') {
            this._$inputWithData.focus().select();
        }
    }
    hide() {
        if (this.flatInstance && typeof this.flatInstance.close === 'function') {
            this.flatInstance.close();
        }
    }
    show() {
        if (this.flatInstance && typeof this.flatInstance.open === 'function' && this.flatInstance._input) {
            this.flatInstance.open();
        }
    }
    getValue() {
        return this._$input.val();
    }
    setValue(val) {
        this.flatInstance.setDate(val);
    }
    applyValue(item, state) {
        const fieldName = this.columnDef && this.columnDef.field;
        if (fieldName !== undefined) {
            const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
            const saveTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.saveOutputType || this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
            const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
            // validate the value before applying it (if not valid we'll set an empty string)
            const validation = this.validate(state);
            const newValue = (state && validation && validation.valid) ? moment(state, outputTypeFormat).format(saveTypeFormat) : '';
            // set the new value to the item datacontext
            if (isComplexObject) {
                setDeepValue(item, fieldName, newValue);
            }
            else {
                item[fieldName] = newValue;
            }
        }
    }
    isValueChanged() {
        const elmValue = this._$input.val();
        const inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);
        const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateUtc);
        const elmDateStr = elmValue ? moment(elmValue, inputFormat, false).format(outputTypeFormat) : '';
        const orgDateStr = this._originalDate ? moment(this._originalDate, inputFormat, false).format(outputTypeFormat) : '';
        if (elmDateStr === 'Invalid date' || orgDateStr === 'Invalid date') {
            return false;
        }
        const isChanged = (!(elmDateStr === '' && orgDateStr === '')) && (elmDateStr !== orgDateStr);
        return isChanged;
    }
    loadValue(item) {
        const fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            const isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            const value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this._originalDate = value;
            this.flatInstance.setDate(value);
        }
    }
    save() {
        const validation = this.validate();
        const isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    }
    serializeValue() {
        const domValue = this._$input.val();
        if (!domValue) {
            return '';
        }
        const inputFormat = mapMomentDateFormatWithFieldType(this.columnEditor.type || (this.columnDef && this.columnDef.type) || FieldType.dateIso);
        const outputTypeFormat = mapMomentDateFormatWithFieldType((this.columnDef && (this.columnDef.outputType || this.columnEditor.type || this.columnDef.type)) || FieldType.dateIso);
        const value = moment(domValue, inputFormat, false).format(outputTypeFormat);
        return value;
    }
    validate(inputValue) {
        const isRequired = this.columnEditor.required;
        const elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val && this._$input.val();
        const errorMsg = this.columnEditor.errorMessage;
        if (this.validator) {
            return this.validator(elmValue, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && elmValue === '') {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    }
    //
    // private functions
    // ------------------
    /** Load a different set of locales for Flatpickr to be localized */
    loadFlatpickrLocale(language) {
        let locales = 'en';
        if (language !== 'en') {
            // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/
            const localeDefault = require(`flatpickr/dist/l10n/${language}.js`).default;
            locales = (localeDefault && localeDefault[language]) ? localeDefault[language] : 'en';
        }
        return locales;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZWRpdG9ycy9kYXRlRWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE9BQU8sS0FBSyxVQUFVLE1BQU0sV0FBVyxDQUFDO0FBRXhDLE1BQU0sU0FBUyxHQUFnQixVQUFpQixDQUFDLENBQUMsbUJBQW1CO0FBQ3JFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLHNIQUFzSDtBQUU5SSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLHFCQUFxQixFQUFFLG1DQUFtQyxFQUFFLGdDQUFnQyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ25MLE9BQU8sRUFPTCxTQUFTLEdBR1YsTUFBTSxtQkFBbUIsQ0FBQztBQUczQixPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFLckI7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFvQnJCLFlBQW9CLElBQXFCO1FBQXJCLFNBQUksR0FBSixJQUFJLENBQWlCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLG9HQUFvRyxDQUFDLENBQUM7U0FDdkg7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQWUsQ0FBQztRQUM3RSxNQUFNLE9BQU8sR0FBRyxJQUFJ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QUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQ3ZGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudC1taW5pJztcclxuaW1wb3J0IHsgQmFzZU9wdGlvbnMgYXMgRmxhdHBpY2tyQmFzZU9wdGlvbnMgfSBmcm9tICdmbGF0cGlja3IvZGlzdC90eXBlcy9vcHRpb25zJztcclxuaW1wb3J0ICogYXMgX2ZsYXRwaWNrciBmcm9tICdmbGF0cGlja3InO1xyXG5pbXBvcnQgeyBGbGF0cGlja3JGbiB9IGZyb20gJ2ZsYXRwaWNrci9kaXN0L3R5cGVzL2luc3RhbmNlJztcclxuY29uc3QgZmxhdHBpY2tyOiBGbGF0cGlja3JGbiA9IF9mbGF0cGlja3IgYXMgYW55OyAvLyBwYXRjaCBmb3Igcm9sbHVwXHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgXCJtb21lbnQgaGFzIG5vIGRlZmF1bHQgZXhwb3J0XCIgaXNzdWUsIGRvY3VtZW50IGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzY3MFxyXG5cclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi8uLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBkZXN0cm95T2JqZWN0RG9tRWxlbWVudFByb3BzLCBnZXREZXNjZW5kYW50UHJvcGVydHksIG1hcEZsYXRwaWNrckRhdGVGb3JtYXRXaXRoRmllbGRUeXBlLCBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSwgc2V0RGVlcFZhbHVlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQge1xyXG4gIENvbHVtbixcclxuICBDb2x1bW5FZGl0b3IsXHJcbiAgRWRpdG9yLFxyXG4gIEVkaXRvckFyZ3VtZW50cyxcclxuICBFZGl0b3JWYWxpZGF0b3IsXHJcbiAgRWRpdG9yVmFsaWRhdG9yT3V0cHV0LFxyXG4gIEZpZWxkVHlwZSxcclxuICBGbGF0cGlja3JPcHRpb24sXHJcbiAgR3JpZE9wdGlvbixcclxufSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcblxyXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobmFtZTogc3RyaW5nKTtcclxucmVxdWlyZSgnZmxhdHBpY2tyJyk7XHJcblxyXG4vLyB1c2luZyBleHRlcm5hbCBub24tdHlwZWQganMgbGlicmFyaWVzXHJcbmRlY2xhcmUgY29uc3QgJDogYW55O1xyXG5cclxuLypcclxuICogQW4gZXhhbXBsZSBvZiBhIGRhdGUgcGlja2VyIGVkaXRvciB1c2luZyBGbGF0cGlja3JcclxuICogaHR0cHM6Ly9jaG1sbi5naXRodWIuaW8vZmxhdHBpY2tyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGF0ZUVkaXRvciBpbXBsZW1lbnRzIEVkaXRvciB7XHJcbiAgcHJpdmF0ZSBfJGlucHV0V2l0aERhdGE6IGFueTtcclxuICBwcml2YXRlIF8kaW5wdXQ6IGFueTtcclxuICBwcml2YXRlIF8kZWRpdG9ySW5wdXRFbG06IGFueTtcclxuICBwcml2YXRlIF9vcmlnaW5hbERhdGU6IHN0cmluZztcclxuICBwcml2YXRlIF9waWNrZXJNZXJnZWRPcHRpb25zOiBGbGF0cGlja3JPcHRpb247XHJcblxyXG4gIC8qKiBUaGUgdHJhbnNsYXRlIGxpYnJhcnkgKi9cclxuICBwcml2YXRlIF90cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2U7XHJcblxyXG4gIGZsYXRJbnN0YW5jZTogYW55O1xyXG4gIGRlZmF1bHREYXRlOiBzdHJpbmc7XHJcbiAgb3JpZ2luYWxEYXRlOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBTbGlja0dyaWQgR3JpZCBvYmplY3QgKi9cclxuICBncmlkOiBhbnk7XHJcblxyXG4gIC8qKiBHcmlkIG9wdGlvbnMgKi9cclxuICBncmlkT3B0aW9uczogR3JpZE9wdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcmdzOiBFZGl0b3JBcmd1bWVudHMpIHtcclxuICAgIGlmICghYXJncykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tBbmd1bGFyLVNsaWNrR3JpZF0gU29tZXRoaW5nIGlzIHdyb25nIHdpdGggdGhpcyBncmlkLCBhbiBFZGl0b3IgbXVzdCBhbHdheXMgaGF2ZSB2YWxpZCBhcmd1bWVudHMuJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmdyaWQgPSBhcmdzLmdyaWQ7XHJcbiAgICB0aGlzLmdyaWRPcHRpb25zID0gKGFyZ3MuZ3JpZCAmJiBhcmdzLmdyaWQuZ2V0T3B0aW9ucygpIHx8IHt9KSBhcyBHcmlkT3B0aW9uO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ3JpZE9wdGlvbnMgfHwgdGhpcy5hcmdzLmNvbHVtbi5wYXJhbXMgfHwge307XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmkxOG4gaW5zdGFuY2VvZiBUcmFuc2xhdGVTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSA9IG9wdGlvbnMuaTE4bjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgQ29sdW1uIERlZmluaXRpb24gb2JqZWN0ICovXHJcbiAgZ2V0IGNvbHVtbkRlZigpOiBDb2x1bW4gfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuYXJncyAmJiB0aGlzLmFyZ3MuY29sdW1uO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCBDb2x1bW4gRWRpdG9yIG9iamVjdCAqL1xyXG4gIGdldCBjb2x1bW5FZGl0b3IoKTogQ29sdW1uRWRpdG9yIHtcclxuICAgIHJldHVybiB0aGlzLmNvbHVtbkRlZiAmJiB0aGlzLmNvbHVtbkRlZi5pbnRlcm5hbENvbHVtbkVkaXRvciB8fCB7fTtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgdGhlIEVkaXRvciBET00gRWxlbWVudCAqL1xyXG4gIGdldCBlZGl0b3JEb21FbGVtZW50KCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fJGlucHV0O1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCBGbGF0cGlja3Igb3B0aW9ucyBwYXNzZWQgdG8gdGhlIGVkaXRvciBieSB0aGUgdXNlciAqL1xyXG4gIGdldCBlZGl0b3JPcHRpb25zKCk6IEZsYXRwaWNrck9wdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5FZGl0b3IuZWRpdG9yT3B0aW9ucyB8fCB7fTtcclxuICB9XHJcblxyXG4gIGdldCBoYXNBdXRvQ29tbWl0RWRpdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmdyaWQuZ2V0T3B0aW9ucygpLmF1dG9Db21taXRFZGl0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBpY2tlck9wdGlvbnMoKTogRmxhdHBpY2tyT3B0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLl9waWNrZXJNZXJnZWRPcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCB0aGUgVmFsaWRhdG9yIGZ1bmN0aW9uLCBjYW4gYmUgcGFzc2VkIGluIEVkaXRvciBwcm9wZXJ0eSBvciBDb2x1bW4gRGVmaW5pdGlvbiAqL1xyXG4gIGdldCB2YWxpZGF0b3IoKTogRWRpdG9yVmFsaWRhdG9yIHtcclxuICAgIHJldHVybiB0aGlzLmNvbHVtbkVkaXRvci52YWxpZGF0b3IgfHwgdGhpcy5jb2x1bW5EZWYudmFsaWRhdG9yO1xyXG4gIH1cclxuXHJcbiAgaW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmFyZ3MgJiYgdGhpcy5jb2x1bW5EZWYpIHtcclxuICAgICAgY29uc3QgY29sdW1uSWQgPSB0aGlzLmNvbHVtbkRlZiAmJiB0aGlzLmNvbHVtbkRlZi5pZDtcclxuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB0aGlzLmNvbHVtbkVkaXRvciAmJiB0aGlzLmNvbHVtbkVkaXRvci5wbGFjZWhvbGRlciB8fCAnJztcclxuICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmNvbHVtbkVkaXRvciAmJiB0aGlzLmNvbHVtbkVkaXRvci50aXRsZSB8fCAnJztcclxuICAgICAgdGhpcy5kZWZhdWx0RGF0ZSA9ICh0aGlzLmFyZ3MuaXRlbSkgPyB0aGlzLmFyZ3MuaXRlbVt0aGlzLmNvbHVtbkRlZi5maWVsZF0gOiBudWxsO1xyXG4gICAgICBjb25zdCBpbnB1dEZvcm1hdCA9IG1hcEZsYXRwaWNrckRhdGVGb3JtYXRXaXRoRmllbGRUeXBlKHRoaXMuY29sdW1uRWRpdG9yLnR5cGUgfHwgdGhpcy5jb2x1bW5EZWYudHlwZSB8fCBGaWVsZFR5cGUuZGF0ZVV0Yyk7XHJcbiAgICAgIGNvbnN0IG91dHB1dEZvcm1hdCA9IG1hcEZsYXRwaWNrckRhdGVGb3JtYXRXaXRoRmllbGRUeXBlKHRoaXMuY29sdW1uRGVmLm91dHB1dFR5cGUgfHwgdGhpcy5jb2x1bW5FZGl0b3IudHlwZSB8fCB0aGlzLmNvbHVtbkRlZi50eXBlIHx8IEZpZWxkVHlwZS5kYXRlVXRjKTtcclxuICAgICAgbGV0IGN1cnJlbnRMb2NhbGUgPSB0aGlzLl90cmFuc2xhdGUgJiYgdGhpcy5fdHJhbnNsYXRlLmN1cnJlbnRMYW5nIHx8IHRoaXMuZ3JpZE9wdGlvbnMubG9jYWxlIHx8ICdlbic7XHJcbiAgICAgIGlmIChjdXJyZW50TG9jYWxlICYmIGN1cnJlbnRMb2NhbGUubGVuZ3RoID4gMikge1xyXG4gICAgICAgIGN1cnJlbnRMb2NhbGUgPSBjdXJyZW50TG9jYWxlLnN1YnN0cmluZygwLCAyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcGlja2VyT3B0aW9uczogRmxhdHBpY2tyT3B0aW9uID0ge1xyXG4gICAgICAgIGRlZmF1bHREYXRlOiB0aGlzLmRlZmF1bHREYXRlIGFzIHN0cmluZyxcclxuICAgICAgICBhbHRJbnB1dDogdHJ1ZSxcclxuICAgICAgICBhbHRGb3JtYXQ6IG91dHB1dEZvcm1hdCxcclxuICAgICAgICBkYXRlRm9ybWF0OiBpbnB1dEZvcm1hdCxcclxuICAgICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgIHdyYXA6IHRydWUsXHJcbiAgICAgICAgbG9jYWxlOiAoY3VycmVudExvY2FsZSAhPT0gJ2VuJykgPyB0aGlzLmxvYWRGbGF0cGlja3JMb2NhbGUoY3VycmVudExvY2FsZSkgOiAnZW4nLFxyXG4gICAgICAgIG9uQ2hhbmdlOiAoKSA9PiB0aGlzLnNhdmUoKSxcclxuICAgICAgICBlcnJvckhhbmRsZXI6ICgpID0+IHtcclxuICAgICAgICAgIC8vIGRvIG5vdGhpbmcsIEZsYXRwaWNrciBpcyBhIGxpdHRsZSB0b28gc2Vuc2l0aXZlIGFuZCB3aWxsIHRocm93IGFuIGVycm9yIHdoZW4gcHJvdmlkZWQgZGF0ZSBpcyBsb3dlciB0aGFuIG1pbkRhdGUgc28ganVzdCBkaXNyZWdhcmQgdGhlIGVycm9yIGNvbXBsZXRlbHlcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBtZXJnZSBvcHRpb25zIHdpdGggb3B0aW9uYWwgdXNlcidzIGN1c3RvbSBvcHRpb25zXHJcbiAgICAgIHRoaXMuX3BpY2tlck1lcmdlZE9wdGlvbnMgPSB7IC4uLnBpY2tlck9wdGlvbnMsIC4uLih0aGlzLmVkaXRvck9wdGlvbnMgYXMgRmxhdHBpY2tyT3B0aW9uKSB9O1xyXG4gICAgICBjb25zdCBpbnB1dENzc0NsYXNzZXMgPSBgLmVkaXRvci10ZXh0LmVkaXRvci0ke2NvbHVtbklkfS5mb3JtLWNvbnRyb2xgO1xyXG4gICAgICBpZiAodGhpcy5fcGlja2VyTWVyZ2VkT3B0aW9ucy5hbHRJbnB1dCkge1xyXG4gICAgICAgIHRoaXMuX3BpY2tlck1lcmdlZE9wdGlvbnMuYWx0SW5wdXRDbGFzcyA9ICdmbGF0cGlja3ItYWx0LWlucHV0IGZvcm0tY29udHJvbCc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuXyRlZGl0b3JJbnB1dEVsbSA9ICQoYDxkaXYgY2xhc3M9XCJmbGF0cGlja3IgaW5wdXQtZ3JvdXBcIj48L2Rpdj5gKTtcclxuICAgICAgY29uc3QgY2xvc2VCdXR0b25FbG0gPSAkKGA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiIGRhdGEtY2xlYXI+XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGljb24tY2xvc2VcIiB0eXBlPVwiYnV0dG9uXCI+PC9idXR0b24+XHJcbiAgICAgICAgPC9zcGFuPmApO1xyXG4gICAgICB0aGlzLl8kaW5wdXQgPSAkKGA8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWlucHV0IGRhdGEtZGVmYXVsdERhdGU9XCIke3RoaXMuZGVmYXVsdERhdGV9XCIgY2xhc3M9XCIke2lucHV0Q3NzQ2xhc3Nlcy5yZXBsYWNlKC9cXC4vZywgJyAnKX1cIiBwbGFjZWhvbGRlcj1cIiR7cGxhY2Vob2xkZXJ9XCIgdGl0bGU9XCIke3RpdGxlfVwiIC8+YCk7XHJcbiAgICAgIHRoaXMuXyRpbnB1dC5hcHBlbmRUbyh0aGlzLl8kZWRpdG9ySW5wdXRFbG0pO1xyXG5cclxuICAgICAgLy8gc2hvdyBjbGVhciBkYXRlIGJ1dHRvbiAodW5sZXNzIHVzZXIgc3BlY2lmaWNhbGx5IGRvZXNuJ3Qgd2FudCBpdClcclxuICAgICAgY29uc3QgaXNDbG9zZUJ1dHRvbkhpZGRlbiA9IHRoaXMuY29sdW1uRWRpdG9yICYmIHRoaXMuY29sdW1uRWRpdG9yLnBhcmFtcyAmJiB0aGlzLmNvbHVtbkVkaXRvci5wYXJhbXMuaGlkZUNsZWFyQnV0dG9uIHx8IGZhbHNlO1xyXG4gICAgICBpZiAoIWlzQ2xvc2VCdXR0b25IaWRkZW4pIHtcclxuICAgICAgICBjbG9zZUJ1dHRvbkVsbS5hcHBlbmRUbyh0aGlzLl8kZWRpdG9ySW5wdXRFbG0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl8kZWRpdG9ySW5wdXRFbG0uYXBwZW5kVG8odGhpcy5hcmdzLmNvbnRhaW5lcik7XHJcbiAgICAgIHRoaXMuZmxhdEluc3RhbmNlID0gKGZsYXRwaWNrciAmJiB0aGlzLl8kZWRpdG9ySW5wdXRFbG1bMF0gJiYgdHlwZW9mIHRoaXMuXyRlZGl0b3JJbnB1dEVsbVswXS5mbGF0cGlja3IgPT09ICdmdW5jdGlvbicpID8gdGhpcy5fJGVkaXRvcklucHV0RWxtWzBdLmZsYXRwaWNrcih0aGlzLl9waWNrZXJNZXJnZWRPcHRpb25zKSA6IGZsYXRwaWNrcih0aGlzLl8kZWRpdG9ySW5wdXRFbG0sIHRoaXMuX3BpY2tlck1lcmdlZE9wdGlvbnMgYXMgdW5rbm93biBhcyBQYXJ0aWFsPEZsYXRwaWNrckJhc2VPcHRpb25zPik7XHJcblxyXG4gICAgICAvLyB3aGVuIHdlJ3JlIHVzaW5nIGFuIGFsdGVybmF0ZSBpbnB1dCB0byBkaXNwbGF5IGRhdGEsIHdlJ2xsIGNvbnNpZGVyIHRoaXMgaW5wdXQgYXMgdGhlIG9uZSB0byBkbyB0aGUgZm9jdXMgbGF0ZXIgb25cclxuICAgICAgLy8gZWxzZSBqdXN0IHVzZSB0aGUgdG9wIG9uZVxyXG4gICAgICB0aGlzLl8kaW5wdXRXaXRoRGF0YSA9ICh0aGlzLl9waWNrZXJNZXJnZWRPcHRpb25zICYmIHRoaXMuX3BpY2tlck1lcmdlZE9wdGlvbnMuYWx0SW5wdXQpID8gJChgJHtpbnB1dENzc0NsYXNzZXN9LmZsYXRwaWNrci1hbHQtaW5wdXRgKSA6IHRoaXMuXyRpbnB1dDtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgfSwgNTApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgaWYgKHRoaXMuZmxhdEluc3RhbmNlICYmIHR5cGVvZiB0aGlzLmZsYXRJbnN0YW5jZS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMuZmxhdEluc3RhbmNlLmRlc3Ryb3koKTtcclxuICAgICAgaWYgKHRoaXMuZmxhdEluc3RhbmNlLmVsZW1lbnQpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGRlc3Ryb3lPYmplY3REb21FbGVtZW50UHJvcHModGhpcy5mbGF0SW5zdGFuY2UpKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmZsYXRJbnN0YW5jZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fJGVkaXRvcklucHV0RWxtKSB7XHJcbiAgICAgIHRoaXMuXyRlZGl0b3JJbnB1dEVsbS5yZW1vdmUoKTtcclxuICAgICAgdGhpcy5fJGVkaXRvcklucHV0RWxtID0gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLl8kaW5wdXRXaXRoRGF0YSkge1xyXG4gICAgICB0aGlzLl8kaW5wdXRXaXRoRGF0YS5yZW1vdmUoKTtcclxuICAgICAgdGhpcy5fJGlucHV0V2l0aERhdGEgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fJGlucHV0LnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgZm9jdXMoKSB7XHJcbiAgICB0aGlzLl8kaW5wdXQuZm9jdXMoKTtcclxuICAgIGlmICh0aGlzLl8kaW5wdXRXaXRoRGF0YSAmJiB0eXBlb2YgdGhpcy5fJGlucHV0V2l0aERhdGEuZm9jdXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5fJGlucHV0V2l0aERhdGEuZm9jdXMoKS5zZWxlY3QoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBpZiAodGhpcy5mbGF0SW5zdGFuY2UgJiYgdHlwZW9mIHRoaXMuZmxhdEluc3RhbmNlLmNsb3NlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMuZmxhdEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgaWYgKHRoaXMuZmxhdEluc3RhbmNlICYmIHR5cGVvZiB0aGlzLmZsYXRJbnN0YW5jZS5vcGVuID09PSAnZnVuY3Rpb24nICYmIHRoaXMuZmxhdEluc3RhbmNlLl9pbnB1dCkge1xyXG4gICAgICB0aGlzLmZsYXRJbnN0YW5jZS5vcGVuKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuXyRpbnB1dC52YWwoKTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKHZhbDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmZsYXRJbnN0YW5jZS5zZXREYXRlKHZhbCk7XHJcbiAgfVxyXG5cclxuICBhcHBseVZhbHVlKGl0ZW06IGFueSwgc3RhdGU6IGFueSkge1xyXG4gICAgY29uc3QgZmllbGROYW1lID0gdGhpcy5jb2x1bW5EZWYgJiYgdGhpcy5jb2x1bW5EZWYuZmllbGQ7XHJcbiAgICBpZiAoZmllbGROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uc3Qgb3V0cHV0VHlwZUZvcm1hdCA9IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKCh0aGlzLmNvbHVtbkRlZiAmJiAodGhpcy5jb2x1bW5EZWYub3V0cHV0VHlwZSB8fCB0aGlzLmNvbHVtbkVkaXRvci50eXBlIHx8IHRoaXMuY29sdW1uRGVmLnR5cGUpKSB8fCBGaWVsZFR5cGUuZGF0ZVV0Yyk7XHJcbiAgICAgIGNvbnN0IHNhdmVUeXBlRm9ybWF0ID0gbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoKHRoaXMuY29sdW1uRGVmICYmICh0aGlzLmNvbHVtbkRlZi5zYXZlT3V0cHV0VHlwZSB8fCB0aGlzLmNvbHVtbkRlZi5vdXRwdXRUeXBlIHx8IHRoaXMuY29sdW1uRWRpdG9yLnR5cGUgfHwgdGhpcy5jb2x1bW5EZWYudHlwZSkpIHx8IEZpZWxkVHlwZS5kYXRlVXRjKTtcclxuICAgICAgY29uc3QgaXNDb21wbGV4T2JqZWN0ID0gZmllbGROYW1lICYmIGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPiAwOyAvLyBpcyB0aGUgZmllbGQgYSBjb21wbGV4IG9iamVjdCwgXCJhZGRyZXNzLnN0cmVldE51bWJlclwiXHJcblxyXG4gICAgICAvLyB2YWxpZGF0ZSB0aGUgdmFsdWUgYmVmb3JlIGFwcGx5aW5nIGl0IChpZiBub3QgdmFsaWQgd2UnbGwgc2V0IGFuIGVtcHR5IHN0cmluZylcclxuICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGUoc3RhdGUpO1xyXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IChzdGF0ZSAmJiB2YWxpZGF0aW9uICYmIHZhbGlkYXRpb24udmFsaWQpID8gbW9tZW50KHN0YXRlLCBvdXRwdXRUeXBlRm9ybWF0KS5mb3JtYXQoc2F2ZVR5cGVGb3JtYXQpIDogJyc7XHJcblxyXG4gICAgICAvLyBzZXQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgaXRlbSBkYXRhY29udGV4dFxyXG4gICAgICBpZiAoaXNDb21wbGV4T2JqZWN0KSB7XHJcbiAgICAgICAgc2V0RGVlcFZhbHVlKGl0ZW0sIGZpZWxkTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGl0ZW1bZmllbGROYW1lXSA9IG5ld1ZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc1ZhbHVlQ2hhbmdlZCgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGVsbVZhbHVlID0gdGhpcy5fJGlucHV0LnZhbCgpO1xyXG4gICAgY29uc3QgaW5wdXRGb3JtYXQgPSBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSh0aGlzLmNvbHVtbkVkaXRvci50eXBlIHx8ICh0aGlzLmNvbHVtbkRlZiAmJiB0aGlzLmNvbHVtbkRlZi50eXBlKSB8fCBGaWVsZFR5cGUuZGF0ZUlzbyk7XHJcbiAgICBjb25zdCBvdXRwdXRUeXBlRm9ybWF0ID0gbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoKHRoaXMuY29sdW1uRGVmICYmICh0aGlzLmNvbHVtbkRlZi5vdXRwdXRUeXBlIHx8IHRoaXMuY29sdW1uRWRpdG9yLnR5cGUgfHwgdGhpcy5jb2x1bW5EZWYudHlwZSkpIHx8IEZpZWxkVHlwZS5kYXRlVXRjKTtcclxuICAgIGNvbnN0IGVsbURhdGVTdHIgPSBlbG1WYWx1ZSA/IG1vbWVudChlbG1WYWx1ZSwgaW5wdXRGb3JtYXQsIGZhbHNlKS5mb3JtYXQob3V0cHV0VHlwZUZvcm1hdCkgOiAnJztcclxuICAgIGNvbnN0IG9yZ0RhdGVTdHIgPSB0aGlzLl9vcmlnaW5hbERhdGUgPyBtb21lbnQodGhpcy5fb3JpZ2luYWxEYXRlLCBpbnB1dEZvcm1hdCwgZmFsc2UpLmZvcm1hdChvdXRwdXRUeXBlRm9ybWF0KSA6ICcnO1xyXG4gICAgaWYgKGVsbURhdGVTdHIgPT09ICdJbnZhbGlkIGRhdGUnIHx8IG9yZ0RhdGVTdHIgPT09ICdJbnZhbGlkIGRhdGUnKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc0NoYW5nZWQgPSAoIShlbG1EYXRlU3RyID09PSAnJyAmJiBvcmdEYXRlU3RyID09PSAnJykpICYmIChlbG1EYXRlU3RyICE9PSBvcmdEYXRlU3RyKTtcclxuICAgIHJldHVybiBpc0NoYW5nZWQ7XHJcbiAgfVxyXG5cclxuICBsb2FkVmFsdWUoaXRlbTogYW55KSB7XHJcbiAgICBjb25zdCBmaWVsZE5hbWUgPSB0aGlzLmNvbHVtbkRlZiAmJiB0aGlzLmNvbHVtbkRlZi5maWVsZDtcclxuXHJcbiAgICBpZiAoaXRlbSAmJiBmaWVsZE5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAvLyBpcyB0aGUgZmllbGQgYSBjb21wbGV4IG9iamVjdCwgXCJhZGRyZXNzLnN0cmVldE51bWJlclwiXHJcbiAgICAgIGNvbnN0IGlzQ29tcGxleE9iamVjdCA9IGZpZWxkTmFtZSAmJiBmaWVsZE5hbWUuaW5kZXhPZignLicpID4gMDtcclxuICAgICAgY29uc3QgdmFsdWUgPSAoaXNDb21wbGV4T2JqZWN0KSA/IGdldERlc2NlbmRhbnRQcm9wZXJ0eShpdGVtLCBmaWVsZE5hbWUpIDogaXRlbVtmaWVsZE5hbWVdO1xyXG5cclxuICAgICAgdGhpcy5fb3JpZ2luYWxEYXRlID0gdmFsdWU7XHJcbiAgICAgIHRoaXMuZmxhdEluc3RhbmNlLnNldERhdGUodmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2F2ZSgpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlKCk7XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gKHZhbGlkYXRpb24gJiYgdmFsaWRhdGlvbi52YWxpZCkgfHwgZmFsc2U7XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzQXV0b0NvbW1pdEVkaXQgJiYgaXNWYWxpZCkge1xyXG4gICAgICAvLyBkbyBub3QgdXNlIGFyZ3MuY29tbWl0Q2hhbmdlcygpIGFzIHRoaXMgc2V0cyB0aGUgZm9jdXMgdG8gdGhlIG5leHQgcm93LlxyXG4gICAgICAvLyBhbHNvIHRoZSBzZWxlY3QgbGlzdCB3aWxsIHN0YXkgc2hvd24gd2hlbiBjbGlja2luZyBvZmYgdGhlIGdyaWRcclxuICAgICAgdGhpcy5ncmlkLmdldEVkaXRvckxvY2soKS5jb21taXRDdXJyZW50RWRpdCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5hcmdzLmNvbW1pdENoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlcmlhbGl6ZVZhbHVlKCkge1xyXG4gICAgY29uc3QgZG9tVmFsdWU6IHN0cmluZyA9IHRoaXMuXyRpbnB1dC52YWwoKTtcclxuXHJcbiAgICBpZiAoIWRvbVZhbHVlKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbnB1dEZvcm1hdCA9IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKHRoaXMuY29sdW1uRWRpdG9yLnR5cGUgfHwgKHRoaXMuY29sdW1uRGVmICYmIHRoaXMuY29sdW1uRGVmLnR5cGUpIHx8IEZpZWxkVHlwZS5kYXRlSXNvKTtcclxuICAgIGNvbnN0IG91dHB1dFR5cGVGb3JtYXQgPSBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSgodGhpcy5jb2x1bW5EZWYgJiYgKHRoaXMuY29sdW1uRGVmLm91dHB1dFR5cGUgfHwgdGhpcy5jb2x1bW5FZGl0b3IudHlwZSB8fCB0aGlzLmNvbHVtbkRlZi50eXBlKSkgfHwgRmllbGRUeXBlLmRhdGVJc28pO1xyXG4gICAgY29uc3QgdmFsdWUgPSBtb21lbnQoZG9tVmFsdWUsIGlucHV0Rm9ybWF0LCBmYWxzZSkuZm9ybWF0KG91dHB1dFR5cGVGb3JtYXQpO1xyXG5cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlKGlucHV0VmFsdWU/OiBhbnkpOiBFZGl0b3JWYWxpZGF0b3JPdXRwdXQge1xyXG4gICAgY29uc3QgaXNSZXF1aXJlZCA9IHRoaXMuY29sdW1uRWRpdG9yLnJlcXVpcmVkO1xyXG4gICAgY29uc3QgZWxtVmFsdWUgPSAoaW5wdXRWYWx1ZSAhPT0gdW5kZWZpbmVkKSA/IGlucHV0VmFsdWUgOiB0aGlzLl8kaW5wdXQgJiYgdGhpcy5fJGlucHV0LnZhbCAmJiB0aGlzLl8kaW5wdXQudmFsKCk7XHJcbiAgICBjb25zdCBlcnJvck1zZyA9IHRoaXMuY29sdW1uRWRpdG9yLmVycm9yTWVzc2FnZTtcclxuXHJcbiAgICBpZiAodGhpcy52YWxpZGF0b3IpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGVsbVZhbHVlLCB0aGlzLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGJ5IGRlZmF1bHQgdGhlIGVkaXRvciBpcyBhbG1vc3QgYWx3YXlzIHZhbGlkIChleGNlcHQgd2hlbiBpdCdzIHJlcXVpcmVkIGJ1dCBub3QgcHJvdmlkZWQpXHJcbiAgICBpZiAoaXNSZXF1aXJlZCAmJiBlbG1WYWx1ZSA9PT0gJycpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgbXNnOiBlcnJvck1zZyB8fCBDb25zdGFudHMuVkFMSURBVElPTl9SRVFVSVJFRF9GSUVMRFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICBtc2c6IG51bGxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvL1xyXG4gIC8vIHByaXZhdGUgZnVuY3Rpb25zXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIC8qKiBMb2FkIGEgZGlmZmVyZW50IHNldCBvZiBsb2NhbGVzIGZvciBGbGF0cGlja3IgdG8gYmUgbG9jYWxpemVkICovXHJcbiAgcHJpdmF0ZSBsb2FkRmxhdHBpY2tyTG9jYWxlKGxhbmd1YWdlOiBzdHJpbmcpIHtcclxuICAgIGxldCBsb2NhbGVzID0gJ2VuJztcclxuXHJcbiAgICBpZiAobGFuZ3VhZ2UgIT09ICdlbicpIHtcclxuICAgICAgLy8gY2hhbmdlIGxvY2FsZSBpZiBuZWVkZWQsIEZsYXRwaWNrciByZWZlcmVuY2U6IGh0dHBzOi8vY2htbG4uZ2l0aHViLmlvL2ZsYXRwaWNrci9sb2NhbGl6YXRpb24vXHJcbiAgICAgIGNvbnN0IGxvY2FsZURlZmF1bHQ6IGFueSA9IHJlcXVpcmUoYGZsYXRwaWNrci9kaXN0L2wxMG4vJHtsYW5ndWFnZX0uanNgKS5kZWZhdWx0O1xyXG4gICAgICBsb2NhbGVzID0gKGxvY2FsZURlZmF1bHQgJiYgbG9jYWxlRGVmYXVsdFtsYW5ndWFnZV0pID8gbG9jYWxlRGVmYXVsdFtsYW5ndWFnZV0gOiAnZW4nO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxvY2FsZXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==