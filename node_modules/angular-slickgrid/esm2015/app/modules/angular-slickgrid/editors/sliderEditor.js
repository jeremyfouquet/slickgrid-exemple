import { getDescendantProperty, setDeepValue } from '../services/utilities';
import { sliderValidator } from '../editorValidators/sliderValidator';
const DEFAULT_MIN_VALUE = 0;
const DEFAULT_MAX_VALUE = 100;
const DEFAULT_STEP = 1;
export class SliderEditor {
    constructor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.init();
    }
    /** Get Column Definition object */
    get columnDef() {
        return this.args && this.args.column;
    }
    /** Get Column Editor object */
    get columnEditor() {
        return this.columnDef && this.columnDef.internalColumnEditor || {};
    }
    /** Get the Editor DOM Element */
    get editorDomElement() {
        return this._$input;
    }
    get hasAutoCommitEdit() {
        return this.grid && this.grid.getOptions && this.grid.getOptions().autoCommitEdit;
    }
    /** Getter for the Editor Generic Params */
    get editorParams() {
        return this.columnEditor.params || {};
    }
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    get validator() {
        return this.columnEditor.validator || this.columnDef.validator;
    }
    init() {
        const container = this.args && this.args.container;
        // define the input & slider number IDs
        const itemId = this.args && this.args.item && this.args.item.id;
        this._elementRangeInputId = `rangeInput_${this.columnDef.field}_${itemId}`;
        this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}_${itemId}`;
        // create HTML string template
        const editorTemplate = this.buildTemplateHtmlString();
        this._$editorElm = $(editorTemplate);
        this._$input = this._$editorElm.children('input');
        this.$sliderNumber = this._$editorElm.children('div.input-group-addon.input-group-append').children();
        this.focus();
        // watch on change event
        this._$editorElm
            .appendTo(container)
            .on('mouseup', () => this.save());
        // if user chose to display the slider number on the right side, then update it every time it changes
        // we need to use both "input" and "change" event to be all cross-browser
        if (!this.editorParams.hideSliderNumber) {
            this._$editorElm.on('input change', (event) => {
                const value = event && event.target && event.target.value || '';
                if (value) {
                    const elements = document.getElementsByClassName(this._elementRangeOutputId);
                    if (elements.length) {
                        elements[0].innerHTML = event.target.value;
                    }
                }
            });
        }
    }
    cancel() {
        this._$input.val(this.originalValue);
        this.args.cancelChanges();
    }
    destroy() {
        if (this._$editorElm) {
            this._$editorElm.off('input change mouseup touchend').remove();
            this._$editorElm = null;
        }
    }
    focus() {
        this._$editorElm.focus();
    }
    getValue() {
        return this._$input.val() || '';
    }
    setValue(value) {
        this._$input.val(value);
    }
    applyValue(item, state) {
        const fieldName = this.columnDef && this.columnDef.field;
        const isComplexObject = fieldName && fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
        const validation = this.validate(state);
        const newValue = (validation && validation.valid) ? state : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    }
    isValueChanged() {
        const elmValue = this._$input.val();
        return (!(elmValue === '' && this.originalValue === undefined)) && (+elmValue !== this.originalValue);
    }
    loadValue(item) {
        const fieldName = this.columnDef && this.columnDef.field;
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            const isComplexObject = fieldName && fieldName.indexOf('.') > 0;
            let value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            if (value === '' || value === null || value === undefined) {
                value = this.defaultValue; // load default value when item doesn't have any value
            }
            this.originalValue = +value;
            this._$input.val(value);
            this.$sliderNumber.html(value);
        }
    }
    save() {
        const validation = this.validate();
        const isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    }
    serializeValue() {
        const elmValue = this._$input.val();
        return elmValue !== '' ? parseInt(elmValue, 10) : this.originalValue;
    }
    validate(inputValue) {
        const elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val();
        return sliderValidator(elmValue, {
            editorArgs: this.args,
            errorMessage: this.columnEditor.errorMessage,
            minValue: this.columnEditor.minValue,
            maxValue: this.columnEditor.maxValue,
            required: this.columnEditor.required,
            validator: this.validator,
        });
    }
    //
    // private functions
    // ------------------
    /**
     * Create the HTML template as a string
     */
    buildTemplateHtmlString() {
        const fieldId = this.columnDef && this.columnDef.id;
        const title = this.columnEditor && this.columnEditor.title || '';
        const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;
        const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;
        const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;
        const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;
        this.defaultValue = defaultValue;
        if (this.editorParams.hideSliderNumber) {
            return `
      <div class="slider-container slider-editor">
        <input type="range" name="${this._elementRangeInputId}" title="${title}"
          defaultValue="${defaultValue}" value="${defaultValue}"
          min="${minValue}" max="${maxValue}" step="${step}"
          class="form-control slider-editor-input editor-${fieldId} range ${this._elementRangeInputId}" />
      </div>`;
        }
        return `
      <div class="input-group slider-container slider-editor">
        <input type="range" name="${this._elementRangeInputId}" title="${title}"
          defaultValue="${defaultValue}" value="${defaultValue}"
          min="${minValue}" max="${maxValue}" step="${step}"
          class="form-control slider-editor-input editor-${fieldId} range ${this._elementRangeInputId}" />
        <div class="input-group-addon input-group-append slider-value"><span class="input-group-text ${this._elementRangeOutputId}">${defaultValue}</span></div>
      </div>`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyRWRpdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9lZGl0b3JzL3NsaWRlckVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBS3RFLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO0FBQzlCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUV2QixNQUFNLE9BQU8sWUFBWTtJQVl2QixZQUFvQixJQUFxQjtRQUFyQixTQUFJLEdBQUosSUFBSSxDQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxvR0FBb0csQ0FBQyxDQUFDO1NBQ3ZIO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxtQ0FBbUM7SUFDbkMsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwrQkFBK0I7SUFDL0IsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBQ3JFLENBQUM7SUFFRCxpQ0FBaUM7SUFDakMsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElB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QUNDLE9BQU8sVUFBVSxJQUFJLENBQUMsb0JBQW9CO3VHQUNFLElBQUksQ0FBQyxxQkFBcUIsS0FBSyxZQUFZO2FBQ3JJLENBQUM7SUFDWixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEVkaXRvciwgRWRpdG9yQXJndW1lbnRzLCBFZGl0b3JWYWxpZGF0b3IsIEVkaXRvclZhbGlkYXRvck91dHB1dCwgQ29sdW1uRWRpdG9yIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBnZXREZXNjZW5kYW50UHJvcGVydHksIHNldERlZXBWYWx1ZSB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IHNsaWRlclZhbGlkYXRvciB9IGZyb20gJy4uL2VkaXRvclZhbGlkYXRvcnMvc2xpZGVyVmFsaWRhdG9yJztcclxuXHJcbi8vIHVzaW5nIGV4dGVybmFsIG5vbi10eXBlZCBqcyBsaWJyYXJpZXNcclxuZGVjbGFyZSBjb25zdCAkOiBhbnk7XHJcblxyXG5jb25zdCBERUZBVUxUX01JTl9WQUxVRSA9IDA7XHJcbmNvbnN0IERFRkFVTFRfTUFYX1ZBTFVFID0gMTAwO1xyXG5jb25zdCBERUZBVUxUX1NURVAgPSAxO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNsaWRlckVkaXRvciBpbXBsZW1lbnRzIEVkaXRvciB7XHJcbiAgcHJpdmF0ZSBfZWxlbWVudFJhbmdlSW5wdXRJZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgX2VsZW1lbnRSYW5nZU91dHB1dElkOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfJGVkaXRvckVsbTogYW55O1xyXG4gIHByaXZhdGUgXyRpbnB1dDogYW55O1xyXG4gICRzbGlkZXJOdW1iZXI6IGFueTtcclxuICBkZWZhdWx0VmFsdWU6IGFueTtcclxuICBvcmlnaW5hbFZhbHVlOiBhbnk7XHJcblxyXG4gIC8qKiBTbGlja0dyaWQgR3JpZCBvYmplY3QgKi9cclxuICBncmlkOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXJnczogRWRpdG9yQXJndW1lbnRzKSB7XHJcbiAgICBpZiAoIWFyZ3MpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQW5ndWxhci1TbGlja0dyaWRdIFNvbWV0aGluZyBpcyB3cm9uZyB3aXRoIHRoaXMgZ3JpZCwgYW4gRWRpdG9yIG11c3QgYWx3YXlzIGhhdmUgdmFsaWQgYXJndW1lbnRzLicpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ncmlkID0gYXJncy5ncmlkO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICAvKiogR2V0IENvbHVtbiBEZWZpbml0aW9uIG9iamVjdCAqL1xyXG4gIGdldCBjb2x1bW5EZWYoKTogQ29sdW1uIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmFyZ3MgJiYgdGhpcy5hcmdzLmNvbHVtbjtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgQ29sdW1uIEVkaXRvciBvYmplY3QgKi9cclxuICBnZXQgY29sdW1uRWRpdG9yKCk6IENvbHVtbkVkaXRvciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5EZWYgJiYgdGhpcy5jb2x1bW5EZWYuaW50ZXJuYWxDb2x1bW5FZGl0b3IgfHwge307XHJcbiAgfVxyXG5cclxuICAvKiogR2V0IHRoZSBFZGl0b3IgRE9NIEVsZW1lbnQgKi9cclxuICBnZXQgZWRpdG9yRG9tRWxlbWVudCgpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMuXyRpbnB1dDtcclxuICB9XHJcblxyXG4gIGdldCBoYXNBdXRvQ29tbWl0RWRpdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmdyaWQgJiYgdGhpcy5ncmlkLmdldE9wdGlvbnMgJiYgdGhpcy5ncmlkLmdldE9wdGlvbnMoKS5hdXRvQ29tbWl0RWRpdDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXR0ZXIgZm9yIHRoZSBFZGl0b3IgR2VuZXJpYyBQYXJhbXMgKi9cclxuICBwcml2YXRlIGdldCBlZGl0b3JQYXJhbXMoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmNvbHVtbkVkaXRvci5wYXJhbXMgfHwge307XHJcbiAgfVxyXG5cclxuICAvKiogR2V0IHRoZSBWYWxpZGF0b3IgZnVuY3Rpb24sIGNhbiBiZSBwYXNzZWQgaW4gRWRpdG9yIHByb3BlcnR5IG9yIENvbHVtbiBEZWZpbml0aW9uICovXHJcbiAgZ2V0IHZhbGlkYXRvcigpOiBFZGl0b3JWYWxpZGF0b3Ige1xyXG4gICAgcmV0dXJuIHRoaXMuY29sdW1uRWRpdG9yLnZhbGlkYXRvciB8fCB0aGlzLmNvbHVtbkRlZi52YWxpZGF0b3I7XHJcbiAgfVxyXG5cclxuICBpbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5hcmdzICYmIHRoaXMuYXJncy5jb250YWluZXI7XHJcblxyXG4gICAgLy8gZGVmaW5lIHRoZSBpbnB1dCAmIHNsaWRlciBudW1iZXIgSURzXHJcbiAgICBjb25zdCBpdGVtSWQgPSB0aGlzLmFyZ3MgJiYgdGhpcy5hcmdzLml0ZW0gJiYgdGhpcy5hcmdzLml0ZW0uaWQ7XHJcbiAgICB0aGlzLl9lbGVtZW50UmFuZ2VJbnB1dElkID0gYHJhbmdlSW5wdXRfJHt0aGlzLmNvbHVtbkRlZi5maWVsZH1fJHtpdGVtSWR9YDtcclxuICAgIHRoaXMuX2VsZW1lbnRSYW5nZU91dHB1dElkID0gYHJhbmdlT3V0cHV0XyR7dGhpcy5jb2x1bW5EZWYuZmllbGR9XyR7aXRlbUlkfWA7XHJcblxyXG4gICAgLy8gY3JlYXRlIEhUTUwgc3RyaW5nIHRlbXBsYXRlXHJcbiAgICBjb25zdCBlZGl0b3JUZW1wbGF0ZSA9IHRoaXMuYnVpbGRUZW1wbGF0ZUh0bWxTdHJpbmcoKTtcclxuICAgIHRoaXMuXyRlZGl0b3JFbG0gPSAkKGVkaXRvclRlbXBsYXRlKTtcclxuICAgIHRoaXMuXyRpbnB1dCA9IHRoaXMuXyRlZGl0b3JFbG0uY2hpbGRyZW4oJ2lucHV0Jyk7XHJcbiAgICB0aGlzLiRzbGlkZXJOdW1iZXIgPSB0aGlzLl8kZWRpdG9yRWxtLmNoaWxkcmVuKCdkaXYuaW5wdXQtZ3JvdXAtYWRkb24uaW5wdXQtZ3JvdXAtYXBwZW5kJykuY2hpbGRyZW4oKTtcclxuICAgIHRoaXMuZm9jdXMoKTtcclxuXHJcbiAgICAvLyB3YXRjaCBvbiBjaGFuZ2UgZXZlbnRcclxuICAgIHRoaXMuXyRlZGl0b3JFbG1cclxuICAgICAgLmFwcGVuZFRvKGNvbnRhaW5lcilcclxuICAgICAgLm9uKCdtb3VzZXVwJywgKCkgPT4gdGhpcy5zYXZlKCkpO1xyXG5cclxuICAgIC8vIGlmIHVzZXIgY2hvc2UgdG8gZGlzcGxheSB0aGUgc2xpZGVyIG51bWJlciBvbiB0aGUgcmlnaHQgc2lkZSwgdGhlbiB1cGRhdGUgaXQgZXZlcnkgdGltZSBpdCBjaGFuZ2VzXHJcbiAgICAvLyB3ZSBuZWVkIHRvIHVzZSBib3RoIFwiaW5wdXRcIiBhbmQgXCJjaGFuZ2VcIiBldmVudCB0byBiZSBhbGwgY3Jvc3MtYnJvd3NlclxyXG4gICAgaWYgKCF0aGlzLmVkaXRvclBhcmFtcy5oaWRlU2xpZGVyTnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuXyRlZGl0b3JFbG0ub24oJ2lucHV0IGNoYW5nZScsIChldmVudDogSlF1ZXJ5LkV2ZW50ICYgeyB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC52YWx1ZSB8fCAnJztcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0aGlzLl9lbGVtZW50UmFuZ2VPdXRwdXRJZCk7XHJcbiAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzWzBdLmlubmVySFRNTCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsKCkge1xyXG4gICAgdGhpcy5fJGlucHV0LnZhbCh0aGlzLm9yaWdpbmFsVmFsdWUpO1xyXG4gICAgdGhpcy5hcmdzLmNhbmNlbENoYW5nZXMoKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5fJGVkaXRvckVsbSkge1xyXG4gICAgICB0aGlzLl8kZWRpdG9yRWxtLm9mZignaW5wdXQgY2hhbmdlIG1vdXNldXAgdG91Y2hlbmQnKS5yZW1vdmUoKTtcclxuICAgICAgdGhpcy5fJGVkaXRvckVsbSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb2N1cygpIHtcclxuICAgIHRoaXMuXyRlZGl0b3JFbG0uZm9jdXMoKTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fJGlucHV0LnZhbCgpIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUodmFsdWU6IG51bWJlciB8IHN0cmluZykge1xyXG4gICAgdGhpcy5fJGlucHV0LnZhbCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBhcHBseVZhbHVlKGl0ZW06IGFueSwgc3RhdGU6IGFueSkge1xyXG4gICAgY29uc3QgZmllbGROYW1lID0gdGhpcy5jb2x1bW5EZWYgJiYgdGhpcy5jb2x1bW5EZWYuZmllbGQ7XHJcbiAgICBjb25zdCBpc0NvbXBsZXhPYmplY3QgPSBmaWVsZE5hbWUgJiYgZmllbGROYW1lLmluZGV4T2YoJy4nKSA+IDA7IC8vIGlzIHRoZSBmaWVsZCBhIGNvbXBsZXggb2JqZWN0LCBcImFkZHJlc3Muc3RyZWV0TnVtYmVyXCJcclxuXHJcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZShzdGF0ZSk7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9ICh2YWxpZGF0aW9uICYmIHZhbGlkYXRpb24udmFsaWQpID8gc3RhdGUgOiAnJztcclxuXHJcbiAgICAvLyBzZXQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgaXRlbSBkYXRhY29udGV4dFxyXG4gICAgaWYgKGlzQ29tcGxleE9iamVjdCkge1xyXG4gICAgICBzZXREZWVwVmFsdWUoaXRlbSwgZmllbGROYW1lLCBuZXdWYWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpdGVtW2ZpZWxkTmFtZV0gPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzVmFsdWVDaGFuZ2VkKCkge1xyXG4gICAgY29uc3QgZWxtVmFsdWUgPSB0aGlzLl8kaW5wdXQudmFsKCk7XHJcbiAgICByZXR1cm4gKCEoZWxtVmFsdWUgPT09ICcnICYmIHRoaXMub3JpZ2luYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSkgJiYgKCtlbG1WYWx1ZSAhPT0gdGhpcy5vcmlnaW5hbFZhbHVlKTtcclxuICB9XHJcblxyXG4gIGxvYWRWYWx1ZShpdGVtOiBhbnkpIHtcclxuICAgIGNvbnN0IGZpZWxkTmFtZSA9IHRoaXMuY29sdW1uRGVmICYmIHRoaXMuY29sdW1uRGVmLmZpZWxkO1xyXG5cclxuICAgIGlmIChpdGVtICYmIGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8vIGlzIHRoZSBmaWVsZCBhIGNvbXBsZXggb2JqZWN0LCBcImFkZHJlc3Muc3RyZWV0TnVtYmVyXCJcclxuICAgICAgY29uc3QgaXNDb21wbGV4T2JqZWN0ID0gZmllbGROYW1lICYmIGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPiAwO1xyXG4gICAgICBsZXQgdmFsdWUgPSAoaXNDb21wbGV4T2JqZWN0KSA/IGdldERlc2NlbmRhbnRQcm9wZXJ0eShpdGVtLCBmaWVsZE5hbWUpIDogaXRlbVtmaWVsZE5hbWVdO1xyXG5cclxuICAgICAgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTsgLy8gbG9hZCBkZWZhdWx0IHZhbHVlIHdoZW4gaXRlbSBkb2Vzbid0IGhhdmUgYW55IHZhbHVlXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vcmlnaW5hbFZhbHVlID0gK3ZhbHVlO1xyXG4gICAgICB0aGlzLl8kaW5wdXQudmFsKHZhbHVlKTtcclxuICAgICAgdGhpcy4kc2xpZGVyTnVtYmVyLmh0bWwodmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2F2ZSgpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlKCk7XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gKHZhbGlkYXRpb24gJiYgdmFsaWRhdGlvbi52YWxpZCkgfHwgZmFsc2U7XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzQXV0b0NvbW1pdEVkaXQgJiYgaXNWYWxpZCkge1xyXG4gICAgICAvLyBkbyBub3QgdXNlIGFyZ3MuY29tbWl0Q2hhbmdlcygpIGFzIHRoaXMgc2V0cyB0aGUgZm9jdXMgdG8gdGhlIG5leHQgcm93LlxyXG4gICAgICAvLyBhbHNvIHRoZSBzZWxlY3QgbGlzdCB3aWxsIHN0YXkgc2hvd24gd2hlbiBjbGlja2luZyBvZmYgdGhlIGdyaWRcclxuICAgICAgdGhpcy5ncmlkLmdldEVkaXRvckxvY2soKS5jb21taXRDdXJyZW50RWRpdCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5hcmdzLmNvbW1pdENoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNlcmlhbGl6ZVZhbHVlKCkge1xyXG4gICAgY29uc3QgZWxtVmFsdWU6IHN0cmluZyA9IHRoaXMuXyRpbnB1dC52YWwoKTtcclxuICAgIHJldHVybiBlbG1WYWx1ZSAhPT0gJycgPyBwYXJzZUludChlbG1WYWx1ZSwgMTApIDogdGhpcy5vcmlnaW5hbFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoaW5wdXRWYWx1ZT86IGFueSk6IEVkaXRvclZhbGlkYXRvck91dHB1dCB7XHJcbiAgICBjb25zdCBlbG1WYWx1ZSA9IChpbnB1dFZhbHVlICE9PSB1bmRlZmluZWQpID8gaW5wdXRWYWx1ZSA6IHRoaXMuXyRpbnB1dCAmJiB0aGlzLl8kaW5wdXQudmFsKCk7XHJcbiAgICByZXR1cm4gc2xpZGVyVmFsaWRhdG9yKGVsbVZhbHVlLCB7XHJcbiAgICAgIGVkaXRvckFyZ3M6IHRoaXMuYXJncyxcclxuICAgICAgZXJyb3JNZXNzYWdlOiB0aGlzLmNvbHVtbkVkaXRvci5lcnJvck1lc3NhZ2UsXHJcbiAgICAgIG1pblZhbHVlOiB0aGlzLmNvbHVtbkVkaXRvci5taW5WYWx1ZSxcclxuICAgICAgbWF4VmFsdWU6IHRoaXMuY29sdW1uRWRpdG9yLm1heFZhbHVlLFxyXG4gICAgICByZXF1aXJlZDogdGhpcy5jb2x1bW5FZGl0b3IucmVxdWlyZWQsXHJcbiAgICAgIHZhbGlkYXRvcjogdGhpcy52YWxpZGF0b3IsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vXHJcbiAgLy8gcHJpdmF0ZSBmdW5jdGlvbnNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIHRoZSBIVE1MIHRlbXBsYXRlIGFzIGEgc3RyaW5nXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZFRlbXBsYXRlSHRtbFN0cmluZygpIHtcclxuICAgIGNvbnN0IGZpZWxkSWQgPSB0aGlzLmNvbHVtbkRlZiAmJiB0aGlzLmNvbHVtbkRlZi5pZDtcclxuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5jb2x1bW5FZGl0b3IgJiYgdGhpcy5jb2x1bW5FZGl0b3IudGl0bGUgfHwgJyc7XHJcbiAgICBjb25zdCBtaW5WYWx1ZSA9IHRoaXMuY29sdW1uRWRpdG9yLmhhc093blByb3BlcnR5KCdtaW5WYWx1ZScpID8gdGhpcy5jb2x1bW5FZGl0b3IubWluVmFsdWUgOiBERUZBVUxUX01JTl9WQUxVRTtcclxuICAgIGNvbnN0IG1heFZhbHVlID0gdGhpcy5jb2x1bW5FZGl0b3IuaGFzT3duUHJvcGVydHkoJ21heFZhbHVlJykgPyB0aGlzLmNvbHVtbkVkaXRvci5tYXhWYWx1ZSA6IERFRkFVTFRfTUFYX1ZBTFVFO1xyXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdGhpcy5lZGl0b3JQYXJhbXMuaGFzT3duUHJvcGVydHkoJ3NsaWRlclN0YXJ0VmFsdWUnKSA/IHRoaXMuZWRpdG9yUGFyYW1zLnNsaWRlclN0YXJ0VmFsdWUgOiBtaW5WYWx1ZTtcclxuICAgIGNvbnN0IHN0ZXAgPSB0aGlzLmNvbHVtbkVkaXRvci5oYXNPd25Qcm9wZXJ0eSgndmFsdWVTdGVwJykgPyB0aGlzLmNvbHVtbkVkaXRvci52YWx1ZVN0ZXAgOiBERUZBVUxUX1NURVA7XHJcbiAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuXHJcbiAgICBpZiAodGhpcy5lZGl0b3JQYXJhbXMuaGlkZVNsaWRlck51bWJlcikge1xyXG4gICAgICByZXR1cm4gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2xpZGVyLWNvbnRhaW5lciBzbGlkZXItZWRpdG9yXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCIke3RoaXMuX2VsZW1lbnRSYW5nZUlucHV0SWR9XCIgdGl0bGU9XCIke3RpdGxlfVwiXHJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9XCIke2RlZmF1bHRWYWx1ZX1cIiB2YWx1ZT1cIiR7ZGVmYXVsdFZhbHVlfVwiXHJcbiAgICAgICAgICBtaW49XCIke21pblZhbHVlfVwiIG1heD1cIiR7bWF4VmFsdWV9XCIgc3RlcD1cIiR7c3RlcH1cIlxyXG4gICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2wgc2xpZGVyLWVkaXRvci1pbnB1dCBlZGl0b3ItJHtmaWVsZElkfSByYW5nZSAke3RoaXMuX2VsZW1lbnRSYW5nZUlucHV0SWR9XCIgLz5cclxuICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgc2xpZGVyLWNvbnRhaW5lciBzbGlkZXItZWRpdG9yXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCIke3RoaXMuX2VsZW1lbnRSYW5nZUlucHV0SWR9XCIgdGl0bGU9XCIke3RpdGxlfVwiXHJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9XCIke2RlZmF1bHRWYWx1ZX1cIiB2YWx1ZT1cIiR7ZGVmYXVsdFZhbHVlfVwiXHJcbiAgICAgICAgICBtaW49XCIke21pblZhbHVlfVwiIG1heD1cIiR7bWF4VmFsdWV9XCIgc3RlcD1cIiR7c3RlcH1cIlxyXG4gICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2wgc2xpZGVyLWVkaXRvci1pbnB1dCBlZGl0b3ItJHtmaWVsZElkfSByYW5nZSAke3RoaXMuX2VsZW1lbnRSYW5nZUlucHV0SWR9XCIgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb24gaW5wdXQtZ3JvdXAtYXBwZW5kIHNsaWRlci12YWx1ZVwiPjxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dCAke3RoaXMuX2VsZW1lbnRSYW5nZU91dHB1dElkfVwiPiR7ZGVmYXVsdFZhbHVlfTwvc3Bhbj48L2Rpdj5cclxuICAgICAgPC9kaXY+YDtcclxuICB9XHJcbn1cclxuIl19