/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from "@angular/core";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateCompiler = /** @class */ (function () {
    function TranslateCompiler() {
    }
    return TranslateCompiler;
}());
/**
 * @abstract
 */
export { TranslateCompiler };
if (false) {
    /**
     * @abstract
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compile = function (value, lang) { };
    /**
     * @abstract
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };
}
/**
 * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all
 */
var TranslateFakeCompiler = /** @class */ (function (_super) {
    __extends(TranslateFakeCompiler, _super);
    function TranslateFakeCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compile = /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    function (value, lang) {
        return value;
    };
    /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compileTranslations = /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    function (translations, lang) {
        return translations;
    };
TranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) { return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler); };
TranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: function (t) { return TranslateFakeCompiler.ɵfac(t); } });
var ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{
        type: Injectable
    }], null, null); })();
    return TranslateFakeCompiler;
}(TranslateCompiler));
export { TranslateFakeCompiler };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmNvbXBpbGVyLmpzIiwic291cmNlcyI6WyJuZzovQG5neC10cmFuc2xhdGUvY29yZS9saWIvdHJhbnNsYXRlLmNvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QztBQUNHO0FBQWE7O0FBQWhCO0FBQVE7QUFBYTtBQUFJO0FBQ08sSUFEaEM7QUFBK0IsSUFJL0IsQ0FBQztBQUNELElBREEsd0JBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQztBQUNEO0FBQ0c7QUFDUztBQUFJO0FBQThCO0FBQWE7QUFBUTtBQUFpQjtBQUUvRTtBQUNTO0FBQW1CO0FBQVEsSUFUdkMsaUVBQWlFO0FBQ25FO0FBQ087QUFBaUI7QUFBK0I7QUFJdEQ7QUFBbUI7QUFBUSxJQUoxQixvRkFBbUU7QUFDckU7QUFDQTtBQUNHO0FBQytGO0FBRWxHO0FBQ2lELElBQU4seUNBQWlCO0FBQUMsSUFEN0Q7QUFDcUI7QUFDVSxJQU8vQixDQUFDO0FBQ0Q7QUFBUTtBQUF3QjtBQUF1QjtBQUFtQjtBQUFRLElBUmhGLHVDQUFPO0FBQU87QUFBd0I7QUFDckM7QUFFSDtBQUNPLElBSkwsVUFBUSxLQUFhLEVBQUUsSUFBWTtBQUFJLFFBQ3JDLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBK0I7QUFDdkM7QUFBbUI7QUFDakIsSUFGQSxtREFBbUI7QUFBTztBQUErQjtBQUN2QztBQUdaO0FBQVEsSUFKZCxVQUFvQixZQUFpQixFQUFFLElBQVk7QUFBSSxRQUNyRCxPQUFPLFlBQVksQ0FBQztBQUN4QixJQUFFLENBQUM7eURBUkYsVUFBVTs7Ozs7MEJBQ0w7QUFBQyxJQVFQLDRCQUFDO0FBQ0EsQ0FEQSxBQVRELENBQzJDLGlCQUFpQixHQVEzRDtBQUNELFNBVGEscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFuc2xhdGVDb21waWxlciB7XG4gIGFic3RyYWN0IGNvbXBpbGUodmFsdWU6IHN0cmluZywgbGFuZzogc3RyaW5nKTogc3RyaW5nIHwgRnVuY3Rpb247XG5cbiAgYWJzdHJhY3QgY29tcGlsZVRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbnM6IGFueSwgbGFuZzogc3RyaW5nKTogYW55O1xufVxuXG4vKipcbiAqIFRoaXMgY29tcGlsZXIgaXMganVzdCBhIHBsYWNlaG9sZGVyIHRoYXQgZG9lcyBub3RoaW5nLCBpbiBjYXNlIHlvdSBkb24ndCBuZWVkIGEgY29tcGlsZXIgYXQgYWxsXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVGYWtlQ29tcGlsZXIgZXh0ZW5kcyBUcmFuc2xhdGVDb21waWxlciB7XG4gIGNvbXBpbGUodmFsdWU6IHN0cmluZywgbGFuZzogc3RyaW5nKTogc3RyaW5nIHwgRnVuY3Rpb24ge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbXBpbGVUcmFuc2xhdGlvbnModHJhbnNsYXRpb25zOiBhbnksIGxhbmc6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0aW9ucztcbiAgfVxufVxuIl19