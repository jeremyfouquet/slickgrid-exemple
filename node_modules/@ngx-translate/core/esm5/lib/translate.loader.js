/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from "@angular/core";
import { of } from "rxjs";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateLoader = /** @class */ (function () {
    function TranslateLoader() {
    }
    return TranslateLoader;
}());
/**
 * @abstract
 */
export { TranslateLoader };
if (false) {
    /**
     * @abstract
     * @param {?} lang
     * @return {?}
     */
    TranslateLoader.prototype.getTranslation = function (lang) { };
}
/**
 * This loader is just a placeholder that does nothing, in case you don't need a loader at all
 */
var TranslateFakeLoader = /** @class */ (function (_super) {
    __extends(TranslateFakeLoader, _super);
    function TranslateFakeLoader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeLoader.prototype.getTranslation = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        return of({});
    };
TranslateFakeLoader.ɵfac = function TranslateFakeLoader_Factory(t) { return ɵTranslateFakeLoader_BaseFactory(t || TranslateFakeLoader); };
TranslateFakeLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeLoader, factory: function (t) { return TranslateFakeLoader.ɵfac(t); } });
var ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{
        type: Injectable
    }], null, null); })();
    return TranslateFakeLoader;
}(TranslateLoader));
export { TranslateFakeLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmxvYWRlci5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3gtdHJhbnNsYXRlL2NvcmUvbGliL3RyYW5zbGF0ZS5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBYSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEM7QUFDRztBQUFhOztBQUFoQjtBQUFRO0FBQWE7QUFBSTtBQUNPLElBRGhDO0FBQTZCLElBRTdCLENBQUM7QUFDRCxJQURBLHNCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFDRDtBQUNHO0FBQ1M7QUFBSTtBQUE0QjtBQUFhO0FBQVE7QUFBaUI7QUFFNUU7QUFDSztBQUFRLElBUGpCLCtEQUF1RDtBQUN6RDtBQUNBO0FBQ0c7QUFDMkY7QUFFOUY7QUFDK0MsSUFBTix1Q0FBZTtBQUFDLElBRHpEO0FBQ21CO0FBQ2MsSUFHakMsQ0FBQztBQUNEO0FBQVE7QUFBdUI7QUFBbUI7QUFBUSxJQUp4RCw0Q0FBYztBQUFPO0FBQXVCO0FBQy9CO0FBRWYsSUFIRSxVQUFlLElBQVk7QUFBSSxRQUM3QixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQixJQUFFLENBQUM7dURBSkYsVUFBVTs7Ozs7MEJBQ0w7QUFBQyxJQUlQLDBCQUFDO0FBQ0EsQ0FEQSxBQUxELENBQ3lDLGVBQWUsR0FJdkQ7QUFDRCxTQUxhLG1CQUFtQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZn0gZnJvbSBcInJ4anNcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYW5zbGF0ZUxvYWRlciB7XG4gIGFic3RyYWN0IGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55Pjtcbn1cblxuLyoqXG4gKiBUaGlzIGxvYWRlciBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgdGhhdCBkb2VzIG5vdGhpbmcsIGluIGNhc2UgeW91IGRvbid0IG5lZWQgYSBsb2FkZXIgYXQgYWxsXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVGYWtlTG9hZGVyIGV4dGVuZHMgVHJhbnNsYXRlTG9hZGVyIHtcbiAgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gb2Yoe30pO1xuICB9XG59XG4iXX0=