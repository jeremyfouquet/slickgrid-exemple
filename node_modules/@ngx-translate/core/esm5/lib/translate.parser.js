/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from "@angular/core";
import { isDefined } from "./util";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateParser = /** @class */ (function () {
    function TranslateParser() {
    }
    return TranslateParser;
}());
/**
 * @abstract
 */
export { TranslateParser };
if (false) {
    /**
     * Interpolates a string to replace parameters
     * "This is a {{ key }}" ==> "This is a value", with params = { key: "value" }
     * @abstract
     * @param {?} expr
     * @param {?=} params
     * @return {?}
     */
    TranslateParser.prototype.interpolate = function (expr, params) { };
    /**
     * Gets a value from an object by composed key
     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'
     * @abstract
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    TranslateParser.prototype.getValue = function (target, key) { };
}
var TranslateDefaultParser = /** @class */ (function (_super) {
    __extends(TranslateDefaultParser, _super);
    function TranslateDefaultParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateMatcher = /{{\s?([^{}\s]*)\s?}}/g;
        return _this;
    }
    /**
     * @param {?} expr
     * @param {?=} params
     * @return {?}
     */
    TranslateDefaultParser.prototype.interpolate = /**
     * @param {?} expr
     * @param {?=} params
     * @return {?}
     */
    function (expr, params) {
        /** @type {?} */
        var result;
        if (typeof expr === 'string') {
            result = this.interpolateString(expr, params);
        }
        else if (typeof expr === 'function') {
            result = this.interpolateFunction(expr, params);
        }
        else {
            // this should not happen, but an unrelated TranslateService test depends on it
            result = (/** @type {?} */ (expr));
        }
        return result;
    };
    /**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    TranslateDefaultParser.prototype.getValue = /**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        /** @type {?} */
        var keys = typeof key === 'string' ? key.split('.') : [key];
        key = '';
        do {
            key += keys.shift();
            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {
                target = target[key];
                key = '';
            }
            else if (!keys.length) {
                target = undefined;
            }
            else {
                key += '.';
            }
        } while (keys.length);
        return target;
    };
    /**
     * @private
     * @param {?} fn
     * @param {?=} params
     * @return {?}
     */
    TranslateDefaultParser.prototype.interpolateFunction = /**
     * @private
     * @param {?} fn
     * @param {?=} params
     * @return {?}
     */
    function (fn, params) {
        return fn(params);
    };
    /**
     * @private
     * @param {?} expr
     * @param {?=} params
     * @return {?}
     */
    TranslateDefaultParser.prototype.interpolateString = /**
     * @private
     * @param {?} expr
     * @param {?=} params
     * @return {?}
     */
    function (expr, params) {
        var _this = this;
        if (!params) {
            return expr;
        }
        return expr.replace(this.templateMatcher, (/**
         * @param {?} substring
         * @param {?} b
         * @return {?}
         */
        function (substring, b) {
            /** @type {?} */
            var r = _this.getValue(params, b);
            return isDefined(r) ? r : substring;
        }));
    };
TranslateDefaultParser.ɵfac = function TranslateDefaultParser_Factory(t) { return ɵTranslateDefaultParser_BaseFactory(t || TranslateDefaultParser); };
TranslateDefaultParser.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateDefaultParser, factory: function (t) { return TranslateDefaultParser.ɵfac(t); } });
var ɵTranslateDefaultParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{
        type: Injectable
    }], null, null); })();
    return TranslateDefaultParser;
}(TranslateParser));
export { TranslateDefaultParser };
if (false) {
    /** @type {?} */
    TranslateDefaultParser.prototype.templateMatcher;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBhcnNlci5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3gtdHJhbnNsYXRlL2NvcmUvbGliL3RyYW5zbGF0ZS5wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDakM7QUFDRztBQUFhOztBQUFoQjtBQUFRO0FBQWE7QUFBSTtBQUVDLElBRjFCO0FBQTZCLElBZ0I3QixDQUFDO0FBQ0QsSUFEQSxzQkFBQztBQUFELENBQUMsQUFoQkQsSUFnQkM7QUFDRDtBQUNHO0FBQ0Q7QUFBSTtBQUE0QjtBQUFhO0FBQVE7QUFDWDtBQUd6QztBQUFpQjtBQUVGO0FBQ1Y7QUFBbUI7QUFBUSxJQW5CakMsb0VBQW9FO0FBQ3RFO0FBRUM7QUFDRTtBQUNFO0FBQ0Y7QUFFRztBQUFzQjtBQUFtQjtBQUc5QyxJQUhDLGdFQUFnRDtBQUNsRDtBQUVBO0FBQ2tELElBQU4sMENBQWU7QUFBQyxJQUQ1RDtBQUNzQixRQUR0QixxRUFtREM7QUFDRCxRQWxERSxxQkFBZSxHQUFXLHVCQUF1QixDQUFDO0FBQ3BEO0FBQ3FCLElBK0NyQixDQUFDO0FBQ0Q7QUFBUTtBQUF1QjtBQUEwQjtBQUFtQjtBQUFRLElBaEQzRSw0Q0FBVztBQUFPO0FBQXVCO0FBQzVDO0FBRU47QUFBUSxJQUhOLFVBQW1CLElBQXVCLEVBQUUsTUFBWTtBQUFJO0FBQzdDLFlBQVQsTUFBYztBQUN0QixRQUNJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQ2xDLFlBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEQsU0FBSztBQUFDLGFBQUssSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUU7QUFDM0MsWUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sK0VBQStFO0FBQ3JGLFlBQU0sTUFBTSxHQUFHLG1CQUFBLElBQUksRUFBVSxDQUFDO0FBQzlCLFNBQUs7QUFDTCxRQUNJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBeUI7QUFDdEI7QUFBbUI7QUFBUSxJQURwQyx5Q0FBUTtBQUFPO0FBQXlCO0FBQ3RCO0FBQW1CO0FBQVEsSUFEN0MsVUFBUyxNQUFXLEVBQUUsR0FBVztBQUFJO0FBQ25CLFlBQVosSUFBSSxHQUFHLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDL0QsUUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBSSxHQUFHO0FBQ1AsWUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFCLFlBQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQzVHLGdCQUFRLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsZ0JBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNqQixhQUFPO0FBQUMsaUJBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDL0IsZ0JBQVEsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUMzQixhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxHQUFHLElBQUksR0FBRyxDQUFDO0FBQ25CLGFBQU87QUFDUCxTQUFLLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUMxQixRQUNJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBZ0I7QUFBcUI7QUFDbEM7QUFHVDtBQUFRLElBSkEsb0RBQW1CO0FBQU87QUFBZ0I7QUFDdkM7QUFHRjtBQUFtQjtBQUFRLElBSnBDLFVBQTRCLEVBQVksRUFBRSxNQUFZO0FBQ3hELFFBQUksT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEIsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUFnQjtBQUF1QjtBQUNoQztBQUNBO0FBQ1gsSUFITSxrREFBaUI7QUFBTztBQUFnQjtBQUNuQztBQUVaO0FBRVk7QUFBUSxJQUxyQixVQUEwQixJQUFZLEVBQUUsTUFBWTtBQUN0RCxRQURFLGlCQVNDO0FBQ0gsUUFUSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2pCLFlBQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlO0FBQU87QUFDbEQ7QUFBd0I7QUFDakI7QUFBWSxRQUYwQixVQUFDLFNBQWlCLEVBQUUsQ0FBUztBQUFJO0FBQ3JELGdCQUFoQixDQUFDLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLFlBQU0sT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQzFDLFFBQUksQ0FBQyxFQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7MERBbERGLFVBQVU7Ozs7OzBCQUNMO0FBQUMsSUFrRFAsNkJBQUM7QUFDQSxDQURBLEFBbkRELENBQzRDLGVBQWUsR0FrRDFEO0FBQ0QsU0FuRGEsc0JBQXNCO0FBQUk7QUFBYTtBQUN6QyxJQUFULGlEQUFrRDtBQUNwRDtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtpc0RlZmluZWR9IGZyb20gXCIuL3V0aWxcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYW5zbGF0ZVBhcnNlciB7XG4gIC8qKlxuICAgKiBJbnRlcnBvbGF0ZXMgYSBzdHJpbmcgdG8gcmVwbGFjZSBwYXJhbWV0ZXJzXG4gICAqIFwiVGhpcyBpcyBhIHt7IGtleSB9fVwiID09PiBcIlRoaXMgaXMgYSB2YWx1ZVwiLCB3aXRoIHBhcmFtcyA9IHsga2V5OiBcInZhbHVlXCIgfVxuICAgKiBAcGFyYW0gZXhwclxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICBhYnN0cmFjdCBpbnRlcnBvbGF0ZShleHByOiBzdHJpbmcgfCBGdW5jdGlvbiwgcGFyYW1zPzogYW55KTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgZnJvbSBhbiBvYmplY3QgYnkgY29tcG9zZWQga2V5XG4gICAqIHBhcnNlci5nZXRWYWx1ZSh7IGtleTE6IHsga2V5QTogJ3ZhbHVlSScgfX0sICdrZXkxLmtleUEnKSA9PT4gJ3ZhbHVlSSdcbiAgICogQHBhcmFtIHRhcmdldFxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBhYnN0cmFjdCBnZXRWYWx1ZSh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpOiBhbnlcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZURlZmF1bHRQYXJzZXIgZXh0ZW5kcyBUcmFuc2xhdGVQYXJzZXIge1xuICB0ZW1wbGF0ZU1hdGNoZXI6IFJlZ0V4cCA9IC97e1xccz8oW157fVxcc10qKVxccz99fS9nO1xuXG4gIHB1YmxpYyBpbnRlcnBvbGF0ZShleHByOiBzdHJpbmcgfCBGdW5jdGlvbiwgcGFyYW1zPzogYW55KTogc3RyaW5nIHtcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmc7XG5cbiAgICBpZiAodHlwZW9mIGV4cHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmludGVycG9sYXRlU3RyaW5nKGV4cHIsIHBhcmFtcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzdWx0ID0gdGhpcy5pbnRlcnBvbGF0ZUZ1bmN0aW9uKGV4cHIsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMgc2hvdWxkIG5vdCBoYXBwZW4sIGJ1dCBhbiB1bnJlbGF0ZWQgVHJhbnNsYXRlU2VydmljZSB0ZXN0IGRlcGVuZHMgb24gaXRcbiAgICAgIHJlc3VsdCA9IGV4cHIgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBnZXRWYWx1ZSh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIGxldCBrZXlzID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkuc3BsaXQoJy4nKSA6IFtrZXldO1xuICAgIGtleSA9ICcnO1xuICAgIGRvIHtcbiAgICAgIGtleSArPSBrZXlzLnNoaWZ0KCk7XG4gICAgICBpZiAoaXNEZWZpbmVkKHRhcmdldCkgJiYgaXNEZWZpbmVkKHRhcmdldFtrZXldKSAmJiAodHlwZW9mIHRhcmdldFtrZXldID09PSAnb2JqZWN0JyB8fCAha2V5cy5sZW5ndGgpKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldFtrZXldO1xuICAgICAgICBrZXkgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAoIWtleXMubGVuZ3RoKSB7XG4gICAgICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleSArPSAnLic7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoa2V5cy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHByaXZhdGUgaW50ZXJwb2xhdGVGdW5jdGlvbihmbjogRnVuY3Rpb24sIHBhcmFtcz86IGFueSkge1xuICAgIHJldHVybiBmbihwYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbnRlcnBvbGF0ZVN0cmluZyhleHByOiBzdHJpbmcsIHBhcmFtcz86IGFueSkge1xuICAgIGlmICghcGFyYW1zKSB7XG4gICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwci5yZXBsYWNlKHRoaXMudGVtcGxhdGVNYXRjaGVyLCAoc3Vic3RyaW5nOiBzdHJpbmcsIGI6IHN0cmluZykgPT4ge1xuICAgICAgbGV0IHIgPSB0aGlzLmdldFZhbHVlKHBhcmFtcywgYik7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHIpID8gciA6IHN1YnN0cmluZztcbiAgICB9KTtcbiAgfVxufVxuIl19